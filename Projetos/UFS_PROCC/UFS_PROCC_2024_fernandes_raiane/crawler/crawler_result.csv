https://pm.stackexchange.com/questions/17824| As an Agile Coach, how do I deal with argumentative and uncooperative team members?| I an an Agile Coach and Scrum Master for a development team.One of developers has become impossible to work with because of her attitude towards in particular me and I am not sure how to handle it.Any advice would be most welcomed!I have only been working with this team for 3 weeksTeam member has said that I have a boring approach to coaching the team and that the previous coach was more funTeam member speaks up and criticizes every single initiative I present to the teamTeam member questions everything and flails between arguments. She doesn't fight one particular point or point of view, she fights for the sake of fighting.Team member is not a team player and is unwilling to work as a team, very arrogant and always tells the team that she is always right.Team member is not professional at all. Other team members from other team members are difficult, but they are at least professional.I would use an analogy for this team. Imagine a bunch of football players who were not interested in playing a game of football, they just wanted to kick the ball around. Now add me, their coach.I am at odds as I presume this is my job to sort this out.UpdateThe team is using Kanban and a couple of Agile development methods like XP, BDD etc. So they have a Kanban board, WIP limits etcInitiatives I was referring too were for example coaching them about WIP limits, Kaizen time, high quality demo's etcI think the team member works ok with the team, it is primarily about me, so I guess you could say she is a team player as I am not part of the team. She does not share her knowledge constructively no.My role is very clear, but I guess because there is no strong team manager or team lead, I am trying to compensate for this, by doing things which are not part of my role. My role includes providing transparency about how the team is doing in terms of cycle time, process, coach and foster learning, mediate conflicts, remove impediments or flag to management, deliver coaching on all aspects of self organisation, support backlog refinement.| TL;DRYou are taking a potential team composition problem and making it your problem. That is not agile; that is a misunderstanding of your role. From an agile coaching perspective, teams need to be guided into assessing and resolving their own bottlenecks, whether it involves technical or human resource issues.AnalysisI am at odds as I presume this is my job to sort this out.Not really, no. Your job is tocoach the entire teamand help them identify the process that works for them. Since they aren't following a formal methodology like Scrum and just want to be "agile," you need to help them define what that meansto themrather than to you.Team member speaks up and criticizes every single initiative I present to the team[.]Why areyoupresenting initiatives at all? Unless your executive sponsor has tasked you with a traditional command-and-control role, as a coach your responsibility ought to be to educate the team about common practices, and then facilitate their exploration of their own initiatives. Whether or not this particular individual is really a problem is irrelevant to this particular point, although it is certainly germane to other teaming issues.[The t]eam member is not a team player and is unwilling to work as a team, very arrogant and always tells the team that she is always right.This sounds like a problem (if itisa problem) for the entire team. It is notyourproblem; it is theirs. You need to find out how the rest of the team feels about this person. From the team's point of view, does this person:Help or hinder the team?Add value to the team's process?Pull her own weight within the development process?Share her knowledge constructively with the rest of the team?If the answers to these and other similar questions are not to the team's liking, thenthe teamhas a process problem that the team needs to own up to, and collectively request action from line management to resolve. Voting an unhelpful team member off the island ought to be within the purview of the team itself, or the project's executive sponsors.Meta-SolutionAside from spot solutions, the real issue is that your role and authority (if any) are not currently clarified by your executive sponsor. Presumably someone hired you to do a job, fulfill a role, or execute some set of deliverables. Rather than trying guess about the nature of your job,ask someone.In some cases, agile "coaches" are hired to bring a few agile practices to the table while still functioning in a command-and-control capacity. In others, the management team really wants the team to learn, and to become self-organizing. This often requires a more Socratic approach to educating the team.In either case, you currently lack direction and authority. Talk to the person you report to about these things, and plan your course of action accordingly.
https://pm.stackexchange.com/questions/26865| How to get a BI team to work in vertical slices e.g. User Stories| I am an Agile Coach for a bunch of Business Intelligence Engineers and Data Scientists.There is generally speaking 2 different work item types which they undertake:User facing reports and dashboards e.g. Business Objects, LookerPlatform related enablement e.g. Airflow data pipelines, AWS configuration, Snowflake and S3 workI have tried everything but I have not managed to get the team to work in vertical slices - they just say that its impossible and so they essentially work in horizontal slices with each team member working from his/her own backlog of technical tasks e.g.One developer will constantly work on new data pipelines and maintain existing data pipelines.One developer will only do Looker or BO.One developer will do exclusively Snowflake related activities etc.The work does marry up eventually but there is so little user facing value that the business is starting to get unhappy.There are a few more variables which make my problem more complex. We don't have Product Management skills within the team - we do have a PO but he is a business person with no real agile IT experience.Also, the ask of the team is also to embed the skills of creating dashboards and reports within the business users e.g. self-serve.My question is simple - how do I get my team to work in agile way and slice things vertically.| From the looks of it, you currently don't have a team. You have a group of developers presumably working in the same office. To turn them into a team, you need to get them to take collective ownership of the unsliced work-items that provide value to the business.A few suggestions in that direction areHold a retrospective with all team members about how they can collectively turn around the perception of the business that they aren't delivering anything. Let them come up with ideas themselves and try the most promising ones (or the ones that get the most support) for some time.Don't allow the team to horizontally slice a work-item. If no vertical slice can be agreed upon, then assume that that is the smallest that the work-item can become.At the same time, impose a WIP limit on the work-items. If a team member wants to start on a new work-item that would exceed the WIP limit, tell them to  assist in completing an already in-progress work-item, even if that work-item has no work left in their area of expertise. This will help in getting work-items done faster and it also cross-trains the team.You can allow the team to create (horizontally-sliced) sub-tasks under a work-item to know in which technical areas work needs to be done, but the completion of a sub-task would have no meaning for any metrics that you track. They can, however, help the team to see where/how multiple people can collaborate on the same work-item.
https://pm.stackexchange.com/questions/1177| Is it the team members responsibility to correct PMs weaknesses? (or at least in his own interest)| (I understand that this question may be discussed in a pretty wide sense. However I want to focus on its relevance to PM / PM teams).Imagine a PM who does not seem to be qualified in several regards, fails to be exact on meetings and dates, provides poor communication, but nevertheless for some reason was raised to that position. Even worse, the PM himself seems to be very convinced of his work and self-confident.The consequences are not to severe, but nevertheless the project team suffers under those weaknesses.Do you think it is the team members responsibility to continuously silently correct PMs weaknesses? Bring it to his attention (risking that he may be either insulted or just give it a shrug)? Or just give it a shrug as well, similar to what the PM himself is doing?| I would say that it is team's responsibility to make PM aware of the issues in this way or another. Specific method may depend on a situation and specific person so the team may start talking directly with the PM or with PM's manager or with own manager. Either way it's their job to share their expectations and their view of things with PM (either directly or indirectly).Another thing is whether they should correct PM's behavior and here I think it's more an issue for PM themselves or PM's manager. Team members aren't in the best place to play the role of the coach as they are very subjective here.And there's one more perspective, which is project itself. For the good of the project it is possible and sometimes even preferred to have team overtaking some of PMs responsibilities. It shouldn't however be done instead but as an addition to letting others know about the problem.
https://pm.stackexchange.com/questions/27398| Scrum Team and Product Owner working against each other| My current project involves two companies. The product owner from Company A and the development team from Company B.Recently the two companies came to a disagreement regarding the Product Owner (PO) for the following reasons:She does not give acceptance criteria. She will give one-liners and the developers have to figure out what she wants. The if they are done refining they present it to the PO and she can accept or reject the story. If she accept we can then pull it to the backlog for a sprint.She does not prioritize. The Development Team needs to do this. If the Team prioritizes then she complains that we are forcing priorities and if we ask her, she states 'you can decide'.She is very rude and has an explosive personality if she does not agree with the Team.She is a "sort of Scrum" person. She likes Scrum when it suits her. Otherwise, she complains about Scrum, even after coaching.She is the PO, Business Analyst, and tester (final sign off)Company A and B came to disagreement because company A states that she does nothing wrong while my company, Company B, sees the bottleneck she is causing. It is like a ripple effect.No detailed acceptance criteria = More meetings and time spent figuring out stories. I have to log stories, get priorities and have a meeting to decipher her one-liners.Rudeness = Lowers team moraleMultiple roles = One of the roles is neglected depending on what is required.She has been the reason for us not completing the Sprint Goal insomeof our Sprints.This has been raised to the CEO level of both companies and the changes they made was:Move her out of the office so that the rudeness and explosiveness do not affect the team.That's all.I have made numerous suggestions (as the Scrum Master), I think four times, in the past year but it fell on deaf ears.Do you have any suggestions on an approach to follow?| She does not give acceptance criteriaThis is not a problem if the Product Owner is happy to talk through the stories with the team and clear up any details. The team can even create their own acceptance criteria as a result of the discussions if they find that useful.If the Product Owner is not willing to spend the necessary time explaining the stories then there is a discussion to be had about time committent and productivity.She does not prioritizeAny idea why? It would be worth having a conversation with the Product Owner about their motivation for this behaviour. Is it that they do not know what stories take priority? Or perhaps they don't feel sufficiently empowered to make priority decisions?She is very rude and has an explosive personalityIt would be worth getting the whole team together with the Product Owner to discuss ways of working and what behaviour is acceptable. A lot of teams will have a written 'terms of engagement' that they try to stick to.She's the PO, BA, and testerIf there are issues arising from this combination of roles then the retrospective is typically the place they would be surfaced and hopefully mitigated.Do you have any suggestions on a approach to follow?Confrontation is unlikely to be productive as Scrum is by design a collaborative approach. My suggestion would be to talk as much as possible with the Product Owner to try and determine their motivation and see if there are ways of working that can be found to improve the situation.Escalation to management is a risky approach as unless the Product Owner is replaced the result is likely to be even more tension in the team.
https://pm.stackexchange.com/questions/19912| How can I deal with a developer who isn't on board with a new PM and programming framework?| I'm currently implementing Scrum and a switch to Ruby on Rails within my organization. We have a team of six developers, only two of whom have experience in Ruby on Rails. Two of the other developers are getting the hang of Rails relatively fast, but the third is reluctant, constantly complaining about Rails, and how she dislikes the framework.I have provided moral coaching, as well as several resources for them to pass the Rails curve as fast as possible, but I just can't seem to get this person on board by committing to our Sprint goals and work tools (i.e. Rails). Once she gets frustrated by something she goes into a mental block that ticks off the rest of the team (me included, although I handle the events in a calm manner). I think its more of a tantrum or fit rather than an actual technical issue in terms of learning the framework.Any ideas or feedback that might help me be a better manager, and hopefully get this person on board?| TL;DRSince I've only heardyourside of things, I'm unwilling to assume the problem is the individual you're talking about. While I agree that thereisa problem, the problem is one that involves people, processes, and change management. It will require you to acknowledge this before the problem can be resolved to anyone's satisfaction.Most likely, you will need to make some changes to the composition of your team. That isnotan indictment of the team member; it's simply that effective change management sometimes requires changes in personnel.If you ask this question on a different Q&A site likeWorkplace SEyou may get a different answer. From a project management perspective, though, and especially from an agile perspective, you have not implemented organizational change properly.Introduce Organizational Change ProperlyIn programming, you change one simple thing at a time so you can debug it. You have changed at least twocomplexthings at the same time, and are struggling to debug it.Scrum (or any project management framework) requires training and time to be implemented effectively. In addition, agile frameworks require buy-in from the entire team, not just the project manager.If you have team members who aren't interested in agile practices or Scrum ceremonies, and you have truly exhausted all teachable moments and coaching opportunities, then you need to take responsibility for having prescribed a framework without having first created buy-in. After you do that, you need to form a team that contains self-organizing people whowantto follow an agile framework.Introduce Job Changes ProperlyOn the job front, you've introduced a host of changes to the team's job description, including changing:Project management frameworkLanguageWeb application frameworkTechnology stackTechnological ecosystemIf you've changed all that, you've also probably changed the product that you're building, too. That's a lot of change to a person's job description, and not everyone in I.T. wants to be cross-functional or learn new languages and frameworks that don't fit their cognitive patterns.Some people enjoy the chance to use new technologies or work on a new project, while others prefer stability and to stay within a well-defined comfort zone. If you just switched someone's job description from .NET or Java programmer in a waterfall shop to Ruby on Rails developer in a Scrum and/or DevOps organization, there are certainly going to be people who can't or won't make the switch.If theteamdidn't drive this change to the technology stack, then management needs to be ready to take responsibility for having changed the job description. Furthermore, both senior management and the project manager should expect to have to retrain and reform a team around a new technology stack."Change" Often Requires Actual ChangeNot all change is the responsibility of the employee. It's great that you've got five out of six of your current team members on board with the new project and technology frameworks. Now it's your job to determine whether there is a role for anyone who doesn't fit your new I.T. model.Perhaps this person can take on a different role within the company or the team. Maybe there are other projects or other teams that this person can work on, that may be of more interest to her. If not, you're essentially saying: "Adopt the new paradigm or find a new job."As a business, that's may not be an unreasonable perspective. From a team-building standpoint, though, you will generally get better results by acknowledging that not every person is the right fit for every team or organizational culture. Keep that in mind if and when you decide to make changes to your team composition, as nothing destroys team cohesion as quickly as blaming workers for the results of strategic decisions by the business.Treat this as a change in job requirements, rather than an interpersonal issue. Not only is this a more constructive approach than trying to assign blame, it is also more likely to result in an objective resolution.
https://pm.stackexchange.com/questions/9985| Organisation fails to deliver a Product Owner| I am working in a Scrum-team that has been developing software for the past year. The organisation isn't used to agile product development and initially provided a weak product owner who was chosen because of his functional knowledge about the domain, but since we're developing both a functional system and a new technical architecture, he recently quit this position because he couldn't find himself adding much value to the team.Besides the Scrum-team (programmers and testers), there is a relatively new separate project leader/manager who is responsible for budget, a software architect approving technical decisions and a requirements engineer (currenly 'interim product owner') who sees himself aschickenhelping out the hypothetical product owner. And then there is the test department and operations. These all are the stakeholders in this project and the organization has trouble appointing a product owner, because they 'can't find anybody who has enough knowledge and time to take on the job'.Fortunately most of my colleagues are smart, pro-active people and we are constantly debating among ourselves to make the right decisions and I think we're doing quite well under the circumstances.However, not having a product owner does slow us down and demoralizes the team in my opinion, because nobody seems to want to take responsibility for the final product except for the project leader/manager who only appears for demos, when approving timesheets and in weekly 1 hour meetings to inform the team about future organizational plans regarding this product, but also giving us a chance to speak up if there are any issues. A while back, I have asked the project manager to invest more time in making and maintaining a full release planning, so we can plan ahead and make choices about priorities accordingly. Although he response was positive, I have yet to see any results.How would you proceed?| TL;DRThe Scrum Master should work with the team to identify the costs to the team, the project, and the stakeholders that are related to the missing role. This information should be gathered in a transparent way, and the results should be highly-visible to the entire organization.Ultimately, senior management must fix this problem. In the meantime, the team should do its best without violating the principles of Scrum, understanding that it's sub-optimal and will remain so until the organization invests in meeting the managerial and structural obligations of Scrum.The Costs of Indirect Product OwnershipOnly the Product Owner can add or remove stories from the Product Backlog. Only the Product Owner can change the priority of Product Backlog items. Therefore, having a missing, disengaged, or proxy Product Owner creates the following risks:The project may build the wrong thing.The stakeholders may lack proper input or visibility into the project.Sprints may lack clear Sprint Goals.The team may end up working on low-priority items (from the stakeholders' point of view) because the Product Backlog is not properly groomed.The accuracy of estimates in Sprint Planning may be adversely affected.The team may need to commit to fewer stories each Sprint in order to account for ambiguity resulting from lack of Product Owner input.This is not an exhaustive list, but it's representative of the common issues a Scrum team can face when missing a framework-mandated role. Not having a real Product Owner will almost always cause problems for the framework and the project.Make the Costs VisibleThe biggest mistake you can make with Scrum is to sweep problems under the rug. The lack of strong leadership from a Product Owner should not be discounted; it should be madevisibleto the entire organization.While there is certainly political risk for doing so, an ethical Scrum Master should:Remind the organization of the important of the role of Product Owner.Continue enforcing the framework rules.Don't "fill in" for the missing Product Owner.Don't allow stakeholders or the development team to manage the Product Backlog.Attribute reduced velocity or productivity as process problems to the missing Product Owner role when appropriate.Treat schedule slippage as a process problem attributable to the missing Product Owner role.Ensure the process is transparent, and the cost of the missing role is highly visible to stakeholders.When sprints fail, or fail to satisfy the expectations of stakeholders during the Sprint Review, invite them to the Sprint Retrospective.Make the lack of a Product Owner a recurring agenda item for each Sprint Review until the issue is resolved.In other words, if the project takes twice as long to deliver half as much because senior management can't or won't place the right person in the Product Owner role—well, that's their decision to make, but it comes at a cost that they need to live with. Under no circumstances should a Scrum team take improper responsibility for management decisions that violate fundamental framework principles.The team's responsibility is to sustainably deliver product in a professional and workman-like fashion. It is the Product Owner's responsibility to define and prioritize that product, and management's responsibility to identify and empower the Product Owner. In framework terms, it really is just that simple.
https://pm.stackexchange.com/questions/20175| Development manager in the morning scrum| In a company, the development manager comes from a technical and PM background. He also acts as a tech lead, without doing any development work though. He focuses on the management side of the role.In the morning scrum meeting, the developers start talking about yesterday, today and if there any impediments. The development manager starts asking questions to the team members such as "where are we on this?", "why did this occur?" etc. The team members reply, therefore many times starting going into details. The Scrum Master has tried mentioning that this is not a technical meeting, but the manager replies that he wants to know what's going on "with this specific thing" or "we need to understand this better". Sometimes he replies to the SM "hold on, we need to discuss this", therefore the SM has given up trying to refocus the discussion. Other times, the SM will try to coordinate the discussion on a topic, and the manager will say "let's move on, this can wait". Sometimes he will even get annoyed if the SM says "let's take this offline".The SM had separate discussions with the manager on this, and the manager replies with arguments such as "the morning scrum is a great place to catch up on what is going on, without distracting people throughout the day", and "some people need coordination, therefore we need to hold their hands for a bit".In this company the manager is responsible for the delivery of the product and has been working very closely to the team since day one. He has contributed a lot and still does, but it seems that he wants to control every aspect of the meeting, and the development (this propagates down to planning, where the manager will ask things to be done and therefore prioritising the backlog along with the PO).In this company, there is a fixed project deadline, and it sounds far more important to meet the deadline "no matter what", rather than cultivate a scrum environment. The SM and PO feel hopeless, and they don't feel things can change. What would be your suggestions to SM and development manager, in order to facilitate scrum better?| The Scrum Master has to demand any people not part ofthe Development teamto be 100% silent during the Daily Scrum. This is the rule according tothe Scrum guide:The Scrum Master enforces the rule that only Development Team members   participate in the Daily Scrum.After the Daily Scrum it is fine to discuss a little bit about details if needed.I suggest that you also let your manager read theLESS pages about Management. This to make him understand what is expected from managers in Agile environments.Now it is possible he does not want to change his behaviour and he doesn't care if your team is doing real Scrum or something that looks like Scrum. I would try to get the whole team to say (out loud together) they want to follow and implement Scrum by the book, since it generates the most value. Afterwards you should also learn your manager theShu-Ha-Riand if he want to play Ri he should first learn and play the game for a while, like a few years before altering it.To end I would like to quote Martin Fowler as a final suggestion:If you can't change your organization, change your organization!I have done both sides in the past and really its great either way. If you think you can change the organization don't give up after some push backs. Keep repeating and repeating with respect, eventually they will turn around. Change of culture can be a process of years, so you need to have a long breath.
https://pm.stackexchange.com/questions/10086| Balance between sharing creative control and leading the project| I've been working on a project for almost a year now as the Project Manager. Initially, it was just myself. Over time, several others have been engaged in the project on a much smaller scope.The project is relatively heavily modularized, primarily to accommodate this type of an environment.In my experience, I really appreciate when people share creative control. It makes you feel like you're an important part of the project, you're contributions are more than just repetitive to-spec coding, and you get to have a little fun playing around with ideas. As such, I try to grant those I work with a heavy amount of creative control on their parts of the project.I'm beginning to think this is back-firing on me because there are some tasks, which should be relatively simple, that are turning out to be huge burdens because of the amount of discussion expected. I don't want to be a project dictator but when we are in "crunch time" and somebody goes off on a tangent with an idea and reports back that he doesn't think my solution is ideal, I find myself becoming aggravated. I am almost always anextremelylaid back person so this is surprising to me. I don't let my professionalism slip and try to hide any negative notions to keep everyone happy.Many of these issues are more related to "personal taste" (think Design) than a technical, provable problem. As Project Manager, I am really dealt the burden of making sure this project is completed successfully. Overall, I just want to find a way to balance letting my fellow programmers have fun and enjoy their work but also move forward faster than a snail's pace.Can anyone recommend some ways to establish a balance between letting the developers enjoy themselves while continueing to push out a product I feel comfortable delivering?| TL;DR[T]here are some tasks...that are turning out to be huge burdens because of the amount of discussion expected.It isn't really thediscussionthat's inherently problematic; it's the intersection of discussion withParkinson's Law. Or, to put it another way, you have rediscovered the reason that agile frameworks like Scrum rely so heavily ontime-boxing.Over-Engineering: The Enemy of ProductivityThe agile community is full of pithy aphorisms that all boil down to the idea that productivity is about riding the line of "good enough." Some examples include:YAGNI(You Aren't Going to Need It)The simplest thing that could possibly work.Deliver working software frequently.Working software is the primary measure of progress.Scrum enforces time-boxing on both meetings and iterations, so that discussions that need to happen have aplaceto happen, but also a built-in time constraint that encourages selection of workable solutions over "perfect" solutions. In addition, the iterative nature of Scrum development lends itself to acceptance of "good enough" solutions that can always be improved further in later iterations if there's actual value in doing so.This isn't the same thing as cowboy coding or deliberate technical debt. Rather, it's simply a formalized awareness thatshippable featuresare the goal, rather than perfection for its own sake.Introduce Time-Boxing and Set ExpectationsEven if you aren't an agile shop, you may find the following steps useful in reigning in the tendency towards over-engineering.Clearly communicate the objectives and time constraints.Make "good enough" an explicit criteria.Be clear that no one will be blamed if something isn't "perfect" or needs to be refactored in the future—and mean it!Reward on-time delivery of "good enough" features.Set the expectation that a team decision madewithinthe time-box will set the bar for the feature, but you will make a decision by fiat if the team can't reach consensus before the time-box expires.Treat the time-box as inviolate; don't make exceptions.Use a kitchen timer to help remind the team of the time-box.Neverhold individual developers accountable for features that are good enough but not "perfect."The key here is to make the objectives clear, and to communicate effectively about how the team's performance will be reviewed and rewarded. Developers are rarely rewarded for "good enough," but frequently punished for imperfect work. You will need to work hard to build trust in a process that values and rewards alternative team strategies.
https://pm.stackexchange.com/questions/20374| How to encourage more participation in web scrum meetings?| I have recently become scrum master for an established team that has been doing many parts of Scrum, but has not had a scrum master. The team is great team who does well and I have been trying hard to continue with what they are doing that works, while still seeking ways to improve and adapt.The team is all in the same time-zone, but they all work remote. This has only been a problem for me in one way, the Sprint Retrospective. Perhaps in part because the meeting is held using an online tool, I often times have very long periods of silence after I ask a question. While I don't worry too much about silence, from individual discussions I know there are things that are not being brought up, and I also feel we are not being very efficient where the meeting is longer than it should be due to the silence. I am fairly certain the main problem is since everyone is on their own machines and our program doesn't allow everyone on the team to be on webcam at the same time (team is too large atm, another story), they are just kind of ignoring most of the meeting and working through them.Here are some things I have either tried or am thinking of trying, can anyone chip in on those and let me know if they have tried some of these and had success or not, or have other little things you have done to encourage participation?To be perfectly clear I am confident in the team, and also that we will improve, but I would love to hear of other ideas to help if I am not thinking of something, or validation of a good idea.Main thing I have just started doing is talking more to team members individually, and asking them why they think the team devolves into silence sometimes. This is simple but my main plan to improve our meeting communication.I have toyed with the idea of doing safety checks, I don't think that's the problem but still might do one to be sure.I have done some anonymous polls or questions, but haven't had much response from those.I have considered having random team members run the retrospective, to see if that helps everyone be more comfortable. This is in part because I am the new team member, so that was my thought there.I have sought feedback after meetings on what they liked and didn't like, but haven't got much response there either.I do keep the meetings as short as possible and try to add some things in so they are not boring.Any insight from experience is appreciated, just trying to make sure I am doing the right things and not missing something important.| In my experience periods of silence in a retrospective are caused by the following:The team sees no value in the retrospectiveThe team is too large and people are uncomfortable talkingThe team has a lot of introverts that feel uncomfortable talking in meetingsIt is quite possible that you have a combination of all three problems. Throw in the fact it is a remote meeting and you have a powerful combination of factors that discourage conversation.The lack of video is a big issue. People use visual queues in conversation to know when to start speaking and when to listen. You will not get the natural conversation that a retrospective needs using audio only.I wonder whether you could escalate this and try and facilitate a full video-based meeting?Also, consider gathering the teams good/bad/suggestions list prior to the meeting. Email the team a day before the retro and ask them to reply with what they think has gone well, what went badly and any suggestions they might have. This gives them time to come up with ideas and may help the meeting to flow a little better. It also means that if the conversation dies you can quickly move on to the next item.
https://pm.stackexchange.com/questions/10187| A development workflow for a team of 3 developers that minimizes outside interruptions?| My question is similar to these two topics;A software development workflow for a company of 2-4 developers?How to manage a Web Projectbut where my team fails is when we are all working on separate projects and we get bombarded with input from many other departments.I'm sure Scrum and Agile are similar in that, once the project is started after its defined, there should be very little if not no input or changes to the plan. This tends to fail every time no matter the size of the project. We do have the support of the company and product owner but some of these problems originate from that very same person.How can we minimize these outside interruptions to the project?| The following is pulled from a few different sources (including my own experience as a solo freelancer with multiple clients); however, you mentioned Agile and Scrum - so my terminology will be similar.Shorter development efforts, with extended silence:What I found worked for me was to have, essentially, a one week sprint. On Monday, you meet the product owners - or collect the input from all of them and set priorities for the week. Developers forecast what they think they can do by Friday. Then, get to work.Friday comes, you show what you did. The three of you chat about what worked in the processes you actually control - and make improvements. Weekend. Monday - rinse and repeat.If the product owner(s) can't calm down for 4 days and let you do your work uninterrupted, then there's probably a bigger problem.Definition of done:You all (product owners included) should define what "done" means for each task that will be in the sprint. It may start out as "it just works" - but there should be a drive/desire amongst the team to refine and mature the definition to include engineering excellence.Definition of ready:Don't accept into a sprint items which have not been crystalized to a certain, agreed upon, state. This may start out as simple and very generic descriptions (button in top left) - but there should be a drive/desire to improve to having mock-ups, maybe multiple requirements written in an FDD or BDD style in the language of the business...and so on.The only way to change direction is to stop first:So, you've got:Entrance criteria (ex. If an item isn't broken down enough to be done in 1 week - we don't do it);Exit criteria (ex. It just works); andA communication plan (we meet Mondays and Fridays - and possibly daily for 15 minutes, but that should be more for the team doing the work - not the product owner) - between that time the PO can't say anything...If, for whatever reason, the product owner(s) has (have) to change things mid-sprint, it's okay and, in scrum at least, there's a simple way to do it - tell the developers to stop what they're doing, possibly abandon all the work to date, and  start again.If this happens, I highly recommend modifying sprint lengths to get back on the Monday-Friday timetable (it works wonders if you're on that sort of weekday schedule - modify for whenever the team gets time off).Two levels of defects - developers only hear about one during a sprint:Level 1 defects mean stuff is crashing, horribly, it's bad, really bad. Level 2 is everything else - we found a glitch and a workaround, or we want this to be yellow.During a sprint (all 4 days of it, because the 5th cumulatively is taken up by meetings), the team is only informed of level 1 defects. Further, when the team is informed of a level 1 defect - all of the developers stop what they're doing and assist to fix the problem. (This is known as "stopping the line" in Lean Manufacturing.)Now, you may not be able to (or want to) implement all of these. Further, you're corporate culture may not be one where a dramatic shift like this is a good idea. So, start slow.Maybe the Monday-Friday book-end meetings that cover: What we are going to do; what we did do; and, for the developers, how can we do it better? Then start adding things to it...at the sprint review (Friday meeting with the Product Owner) is a great place to suggest having a definition of done and ready. Number 4 may not need to be brought up at all - but, if the PO interrupts, just inform them on the day; or, again, at the sprint review just bring it up and say, "You know, when you do that..."Hope that helps.
https://pm.stackexchange.com/questions/10243| How to improve communication skills of a team?| In IT companies, English is usually the official communication medium as most of the companies deal with foreign customers. We have so many countries where English is second, or even third language and in many workplaces the spoken language will be a regional language and email/online communications will be in English.Problems I felt from team are:Typos (manageable up to an extend in email clients with spell checkers)Bad grammar - leads to miscommunication including misunderstanding as 'rude mail'People hesitate to talk to customers (shy, fear, no confidence)Incorrect pronunciation leads to miscommunication which impacts customer confidenceTime waste in online meetingsProblems for the team in understanding customer requirementsTeam not successful in convincing clients when requirement creepsSoft skills trainings are not usually conducted in small companiesTeam do not give importance to communication skills and they believe it is not a part of their jobHow to transform the team to good communicators? What a PM can do other than ask them to study yourselves? A slow poison is what I expect so that the team communication improvement process will not affect project priorities.UPDATE:Thank you for the answers. Here the communication issues are not just with customer interactions. The teams can be intercultural and/or can contain remote members. So as I said, I am not expecting a fast recovery solution but a medicine to heal the root cause.| From my experience, I would say the problem here is "leadership". I am just taking couple of points from your statement.Team not successful in convincing clients when requirement creepsTeam do not give importance to communication skills and they believe it is not a part of their jobThese are things that should be driven by a strong leader. The leader himself should be inspiring and people should "wish" that they could be like him/her. So it helps to start with you.If the requirement creeps and the team is not able to explain there should be a technical lead or a project manager who should help their views translate to the clients. If the team is thinking they are not giving importance to communication you must tell them and mark them as their goal.Spell checkers help a little bit, but not always. For instance: One of my colleague wrote to my client this way."Dear xxx, I would like to have a call to sink (sync) up (on) the project. So if you cum (come online for the call) it will be great".QA writes: "I have a sanitary (Sanity) test that I have to run..."Bottom line:Guide, mentor, inspire your team.  If you are the lead or manager, mark these as their goals, let them know that it affects their salary, provide links and ask them 1x1 how they are progressing, drive them relentlessly. You will see change!
https://pm.stackexchange.com/questions/28238| How should a Scrum master handle disagreements about story-point estimates in Scrum?| For example : Some see its userstory (e.g. 2 points) and others see technical complications and judge that the story should be 20 points. The 2-point voters say, "I understand your opinion, but don't think those complications are valid." The 20-point voters say, "The past tells us that these things are always a lot more complicated then they seem." Now the team is in deadlock condition. can you someone  put some light on this. how to handle this suitation.| With that much variation in the estimate, it seems like the work as it's currently defined is not ready for estimation yet. Based on that wide spread in estimates, I would say that the team doesn't have a clear understanding of what is required to complete the work. Unless the work was critical and must be started and get to done as quickly as possible, I would recommend spending more time refining the work, whether that's in the portion of the team's capacity allocated to backlog refinement or planned and timeboxed in the form of a Spike.I would expect quite a bit to come out of this additional refinement. I'd look for may include a short list of the tasks or steps needed to get the work to done and a quantification of the risks (including technical debt). Once this is done, I'd bring the work back to the team for further discussion and see if they begin to converge.
https://pm.stackexchange.com/questions/2462| How should I handle an argumentative team member?| I have a developer on my team who is otherwise very productive but is getting more and more argumentative and disrespectful to the team and to the project managers.  For some reason (possibly culturally as she's from another country) she takes any decisions made by the PM's personally though will back down when her manager asks her to do something.Like I said, I believe her to be a productive employee but I'm not one to allow unprofessionalism and disrespect to run rampant simply because that person is good at what they do.  I'm getting to the point of recommending her dismissal but I would like to exhaust all options to steer her in the right direction first.| Have you pulled her aside and had a one-on-one with her? The way you explained yourself on here it sounds like you are capable to have a non-threatening but open discussion with her. There is most probably some underlying issue that is frustrating this team member. I encountered this once before and it took a lot of patience to listen and not get annoyed with the person. Once I understood their problem I knew there is/was nothing that could be done to fix it (he was upset with the processes the company used). Once he vented and I sympathized with him he completely changed.....for about one or 2 months and then there was moments where he wanted to act up again but I could then easily pull him aside and ask him not to go there and that seemed to help.So, in summary, find a non-confrontational way to speak to this person alone and then just listen, you don't need to convince them or try to point out that their reasoning is wrong, just listen and let her vent.
https://pm.stackexchange.com/questions/28363| Driving Changes on a peer-to-peer level| This site is called "Project Management". I am unsure if my current context fits.I am a scrum master. This means I am not "higher" or "lower" than anyone in my team.We work on a peer to peer level (I hope this is the matching wording). And I am new in the company.In the current situation there is a report which I would call "vanity metrics" (SeeVanity metrics vs actionable metrics).If I would be the leader, I would just say. "Stop it. Don't waste time for this report".But I am not the leader.I know, that if you ask "Why do you need this report?", then the others will find a lot of reasons why they think the report is needed. The more I ask into the direction like "stop it", the more the others will think they need to defend what they did in the past.I think it is easier to convince people to start something new, than to convince somebody stop doing something which was done since several months. Related:Plan continuation biasHow to drive change on a peer-to-peer level?Recommendations to books or articles are very welcome.| You can tactfully explore what changes have been made to improve the product or the team based on these metrics in the past few months. If these measurements have led to improvements or more effective decisions, they are not vanity metrics. Your newness can be a benefit here. You can say "Sorry, I'm new. Can you help me understand how the team or leadership has been using these metrics to make decisions?"I they are vanity metrics, you can always take the approach of "what kind of information would help you make decisions more effectively?" and get people moved onto those measures.
https://pm.stackexchange.com/questions/10689| When is the best time to create story tasks?| I have a team of developers who are relatively new to Agile and sprints (approx. 5 months now).Every time I walk into their sprint planning session, I do not like what I see.  It's absolute silence and we can practically hear ourselves breathing.  The SM is the only person talking and tries to create tasks, one-by-one, for each story.I try to encourage the PO and developers to ask questions, but I have developers who are very "passive" (not pro-active).  No developer will voluntarily request to be assigned a task (like I use to do and have seen done by so many of my peers).  They sit and almost wait to be assigned tasks (which was how it was before I introduced Agile).Our sprint planning sessions are WAY too long (almost a full day) for a two week sprint.  There is a lot of wasted time discussing things that should probably have been ironed out before the session by the PO.My questions are as follows:Other than a backlog grooming session, is there a formal meeting where the SM, PO, and I can pre-populate the tasks for each story?We know we will need certain tasks, such as:unit testsfunctional testsload teststest strategy meetingsdesignIf such a meeting exists, what is it called?If not, would this, in any way, go against the Agile methodology?How can I get developers more involved?I want them to be pro-active, ask questions, give opinions, to fight for tasks.What can I do for motivation?Any recommendations on what the PO could do prior to a sprint planning session?I just want all the boilerplate work to be done before developers and others join the session.  Having everyone sit through several minutes per story watching the SM create and name tasks, set the JIRA fields, etc. is entirely counter-productive.| From command-and-control to self-organizingLooks like your team (and perhaps your organization) is struggling with transitioning from command-and-control style of management to agile.This article has some tips.From my experience, here are some things that might help:Is the Product Owner describing the Sprint Goal at the beginning of each Sprint Planning meeting? This will help the team understand what they are expected to accomplish and why.The Scrum Master should not be creating tasks. This should be left to the development team. They are the ones who are going to do the work.How do you estimate story points? I recommend theplanning poker method. The entire development team gets a chance to become familiar with the work that is coming up next.One way of encouraging the developers to participate is to split the Sprint Planning into two parts. In the first part of the Sprint Planning, the team can discuss the stories in the priority order, get clarifications on the requirements and acceptance criteria from the Product Owner and commit to how much work can be accomplished in the Sprint (based on story points). In the second part, the Scrum Master can step back and let the development team take the lead. The team creates tasks for each story based on how they intend accomplishing it.As @CodeGnome suggested, send more people to Scrum training. If you have a tight budget, get those already trained to train the others.
https://pm.stackexchange.com/questions/29496| How to manage a failed sub team inside a scrum team| Our scrum squad consist with three teams (Back-End, Front-End, QA). Each team expertised in their own set of technological stack and of their own code bases (repositories).I'm aware that cohesive skilled team is a key to achieve most out of scrum team. However in this particular case its not an option.As usual, squad burns down assigned user stories inside a sprint and most of the time, Front-End team produces lot of bugs (defects) inside a sprint cycle.Even they spend overtime, all nights, double shifts, they only can resolve 90% of the bugs within a given sprint period.The remaining 10% is mostly the complex bugs. Even we provide few extra days or in some cases an extra week, they fails to deliver. Most of the time the only option is go back and change the already committed code base to a new development plan. Which seems like a whole new sprint.I'm continuously seeing this issue after I joined the team as a product manager.What does this particular team miss here? What resources I should provide them? What's the project management workflow to handle this? What would be the company's management workflow to handle this? As a product owner, should I be responsible for this unskilled team?Edit: Added few notes to clarify few doubts on comments and original answersWhy "its not an option" to have a cohesive skilled teamWe really need to stick with sub teams for now. API is legacy, and needed lot of training and years of experience to maintain it. We are fortunate if we could find fullstack developer with knowledge of this early 2000's code-base and with modern browser UI framework. Reality we are less fortunate and really "Its not an option".And I'm a personal believer of a separate QA team, who are specialized in the field. Who does full day testing and who does have spare time tp break the system with loads of regression tests.How sub teams operate as a scrum teamSprint planning usually happens collaboratively with all the team members. And most of the acceptance criteria comes from me and team comes up with more edge level acceptance criteria cases.Each user story gets assigned by one person from each team. As an example, one from UI, one from API and one from QA team.What happens in retrospectivesWe are in a loop of pointing out the issues -> Team records it -> on next sprint, same issues -> RetrospectiveWhy still slavery exists in our team?This isn't something SM, PO or someone came up with. We strongly discourage of doing overtime, all-nighters. We do discussions, send notices to the team members. However it's something each developer or tester committing. Sometimes, even when not at office. I believe its a matter of the cycle which individual producing less quality work, then that person fear of nearing deadlines or feels guilty, and they work more to cover.Work loadOur scrum team consists of 9 people including me.Usually we have 2 weeks sprints (10 working days)I table a priority list of stories.Its the team who (exclude me) picks the stories for the sprint duration.Its the team who (exclude me) of scoring the stories.| You asked in terms of scrum, so that is how I'll answer. However, there are a number of red flags in your question that lead me to believe you aren't actually doing scrum (and I am far from a scrum purist).The scrum answer would be:as PO, you are responsible for the product backlog and priorities, not for process improvement. If you see an issue, you might bring it up in the retro, or (what I would recommend given the persistent nature of the problem) talk to the SM and get their advice on whether you should bring it up in the retro, or whether they would prefer to bring up the subject.the SM is responsible for bringing up any observed process problems they see, and coaching the team towards process improvement. This is typically done in the retro.be clear about the problem. The problem as you describe it is not "they can't release code without any bugs". That's an unattainable ideal that we should all aim for, but it is not actually achievable. The actual problem you describe sounds like "complex bugs are discovered late, and can't be fixed within the sprint."the first step in any question of the form "why is this happening" is to bring it to the team: askthemwhy this is happening. (Again, this is properly in the SM's sphere to do, not the PO's.) The SM may need to coach past the first answer.in this discussion, think broadly and creatively: maybe the problem is further upstream, in requirements and acceptance specification. Maybe it's in backlog refinement (and if it is,thatpart is in your sphere as PO). Maybe you really need to invest in some automated testing. Maybe you need to fail early. Maybe you need to do some spikes to reduce uncertainty and clarify requirements. I'm sure there are more possibilities.also, think incrementally: brainstorm a bunch of possibilities, then the team selects one item to try, to see if it makes an incremental difference. It is highly unlikely you'll find one big silver bullet.Finally, good grief, stop making them work overtime and nights and double shifts! Scrum is supposed to be a sustainable pace.. and regardless of what methodology you're using, this is utterly counterproductive. It exhausts your team and expects them to solve complicated problems while they're exhausted.Edit: Responded to an additional edit aboveWhat happens in retrospectivesWe are in a loop of pointing out the issues -> Team records it -> on   next sprint, same issues -> RetrospectiveThis is the place to start, then. Don't stop at simply recording the issue. The retro is not only about identifying process issues; it is about brainstorming causes/factors and corresponding possible solutions to try, and committing to try at least one of them in the next sprint.Also, if "we" who point out the issues are not the same as "Team" who records it... that's another problem.
https://pm.stackexchange.com/questions/20895| Can scrum master interrupt team member during daily Scrum?| We are a small team using Daily Scrum meetings to track progress of our mobile app development work. The developers are of varying experience range from 2+ years up to 9 years, and with different technical backgrounds like Android, Java, API Development etc.As per  Agile/Scrum recommendations, the Daily Scrum meetings should be completed in15-min.Although we as a team are aware of this, and also the Team is aware that they should tell only 3 things during daily scrum1. what I did Yesterday, 2. what i will do today and 3. tell impediments if any,but since the team is still new to Scrum, while telling their daily status, some of the team members also discuss/tell about1. how they fixed an issue,  2. how they found new requirement adds more value to business etc.This results in the Daily Scrum meeting going beyond 15-min. almost daily.My Query: Is it the responsibility of the Scrum master to intervene and interrupt a team member when he/she starts telling about points beyond those 3 that I mentioned? Is this OK as per Agile?| Is it the responsibility of the Scrum master to intervene and interrupt a team member when he/she starts telling about points beyond those 3 that I mentioned?Technically speaking, no.  Thepurposeof the Daily Scrum is to facilitate coordination between the the Team. It's not for the Team to call off those three points by rote. Many Teams don't use the 'three questions' at all, and instead take some other approach.That being said, the Daily Scrumissupposed to take only 5-15 minutes. While deviating from the three questions itself is fine, if the Team starts to go into in-depth discussions on details, then it is absolutely the Scrum Master's prerogative to politely request for them to 'Take it offline' or 'Discuss this after the meeting'. This isespeciallytrue if not all members of the Team are involved in the meeting - there is very little that kills attention worse than being in a meeting with other people discussing things that do not pertain to you.Of course, as with basically all things in Agile, perhaps your best approach would be... ask the Team. Since you're doing Scrum, you have a sprintly Retrospective meeting. (And if you don't, consider starting to do so.) Bring it up. "I feel like our Daily Scrum is too long. There are too many in-depth discussions, causing people to lose focus and energy. What do you guys think? Anyone have any suggestions?"Maybe it works for your Team. Maybe your Team also thinks it's a problem, but has their own suggested solution for it (which may end up being far better a solution than you or I could suggest). Maybe your Team hasn't really thought about it, at which point you can suggest having in-depth discussions taken Offline, as above.Only way to know is to ask.
https://pm.stackexchange.com/questions/29524| Quicker Retrospectives? They are taking longer and are less effective now we are working from home because of COVID| I am after ideas to make things run more smoothly and more quickly.I have been using a combination of MS Teams and online tools like GroupMap and Stormz.But there are long pauses, and less to and fro, and everything seems to take much longer.I used to like doing attitude timelines but the online tools I have being using have been card based tools. Are there tools that are more flexible?Clustering ideas is also a lot more awkward. I can fit a lot less cards on a screen than on a whiteboard. It would be nice to zoom in and out, resize cards, and put them were I want instead of having them on a grid.Before in face to face meetings, when the meetings went in a new direction, I would turn the page on the flip chart, and start crowdsourcing ideas from the team. But now it is much harder to spin up a new digital board to explore something new.Before when there was a pause in the conversion I would use eye contact to prompt people to speak, making sure everyone had their say. Now the pauses are a lot longer. When I verbally prompt people everything is sluggish and I feel like I am harassing them.Before the seating arrangement helped determine who was going to speak next. Now I have to prompt everyone.Before I could scan the room to get a feel for whether what I was doing was well received, or whether I needed to speedup, slowdown or change direction. Now I have to ask and there are more pauses, then the same person alway says something and I can't tell by looking whether there is someone who with a little prompting might give a different answer. I can't give non-verbal encouragement to offset inhibitory effect of the first persons answer and my verbal encouragement just doesn't seem as effective without the non-verbal component.I have started to open the digital boards for the retrospective at the start of the sprint so people can jot down their thoughts during the sprint. However I know that only a few people will take advantage of that. I can even name them. I have also used Listy to add a Problem CounterMeasure Board to MS Team.Does anyone have any thoughts on practices, tools or strategies that might improve things?| The first item in theAgile Manifestois:Individuals and interactions over processes and toolsYour question lists a bunch of tools and asks about more tools, some that are more flexible to use given your new situation with people working remotely.How about turning the problem on its head and think aboutimproving the interactions between people? At its core, a retrospective is about what went well, what not so well, and how to improve things. Do you really need tools for collecting this feedback? You don't really. I've often used a text editor open on my computer with a shared screen that everyone looks at. FourKALM(Keep, Add, More, Less) headlines with an extra "Actions" headline works really well. Then we discussed matters and I noted things underneath each section. You can tell people to send you their input before the retrospective and pre-fill the document. Then you discuss. You can't go much simpler than that. And it accomplishes its purpose.Doing retrospectives remotely will of course not go as smoothly as if you were all in one office. Even with something basic as KALM, it's one thing for people to all write their Ks, As, Ls and Ms on a post-it then all stand up and stick it on a whiteboard, and it's another for them to send these to you, and you serially add them to the document, but with working remotely that's just something you have to accept.Things will go slower, that's just the reality of doing stuff remotely.The important things is to keep people engaged.Make sure everyone gets to speak. Verbally prompting them isn't harassing them, that's just the only remaining option when you loose all the visual cues, body language cues, etc. Speaking of which, if you have a small team, you might ask everyone to be on camera so that people stay focused. MS Teams should be able to handle this for a few people. Now people won't start daydreaming as easily, since everyone else is looking at them.Also ask your team for ideason how to improve communication and retrospectives. You don't have to figure everything out on your own. This whole remote setup is just another thing for the team "to inspect and adapt".
https://pm.stackexchange.com/questions/10852| Schedule & Customer Blame| Here are work we are having some difficulty with, well, difficult customers during the implementation phase of a semi-custom SaaS product. Standard story, I guess, ship deliverable's and then nothing for a week, and then there are "emergency" fixes needed overnight.If the work needs to get done, it'll get done, but how does one formally delay dates when the lag is the customers fault?Specifically: Is there some standard (contractual) language, which nicely places fixed deadlines on the customer as well?| Short answerDon't formalize. Communicate more often.Long answerI think this situation calls for better expectation management / communication. Make explicit what you need from the customer and when, and make explicit when they can expect something back and what."emergency" fixes needed overnightIf you mean that the moment the customer finds bugs, they need to be fixed "right now": is it fair for a customer to expect this? I think not. Bugs take time to fix and the team should get that time. Tell them beforehand, that they can expect their fixes "X" days after they report them. If they object, negotiate. In any case, make it explicit when they can expect their fixes.then nothing for a weekSo what's going on here? Are they not using the product or just not talking about it? Radio silence? Let me know and i'll update my reply.Specifically: Is there some standard (contractual) language, which nicely places fixed deadlines on the customer as well?Yes, you can: there are several ways to put everything down in formal documents (contract, time planning, Service Level Agreements, etc), but consider before proceeding:Negotiating and documenting can take a lot of time, compared to the amount of actual work. You'll want to bill your customer to some extent for all this time spent, so effectively, you just become a more expensive supplier. Project size is key. The larger the project, the more sense this approach makes.What do you prefer? To call the customer each other day and change the schedule if and as needed (negotiate) or grind down all the details beforehand in a contract?Finally, instead of naming fixed dates, I would recommend to name your deliverables (update, patch, new release, etc) and indicate how much time is needed after the customer delivers their input/test results/etc. That way, when the customer is late with their results, they cannot expect you to deliver overnight.Hope this is usefull. If anything incorrect / missing, let me know and i'll update my post.
https://pm.stackexchange.com/questions/10888| How does a project manager manage and motivate people that don't actually report to the PM?| Scenario:Software development team does NOT report to PM, but PM is responsible for hitting milestone dates and not exceeding budget.  Sometimes, developers have to do work for other PMs, so less than 100% of their time is available.Questions:As the PM, how can I motivate the developers to produce the results I need (quality work, done on time and within budget)?If there are no negative consequences for developers being late or doing shoddy work, how can I get the best possible work out of them?Other than being one voice out of many at semi-annual performance reviews, I have no way to influence (positively or negatively) the quality or timeliness of the developers' work product.  Yet my performance is evaluated based on making the deadlines and managing the budget.How does a project manager manage and motivate people that don't actually report to the PM?| Leadership in a matrix organizationIn  a hierarchical organization each person reports to one boss. In a matrix organization a person may report to more than one boss. Looks like you are transitioning from a hierarchical organization into a matrix organization. By the way, most PMs work with a team that does not report only to them. I am giving below a couple of links on how to lead successfully in a matrix organization."We found that when leaders were successful in matrix roles they consistently used the following four competencies: empathy, conflict management, influence and self-awareness.""A matrix succeeds when there is a collaborative culture, where information flows freely, where development of strong relationships and informal networks are supported, and where people are encouraged to develop interpersonal skills (e.g. communication, conflict resolution, teamwork and influencing without authority.)"
https://pm.stackexchange.com/questions/21073| I am a brand new scrum master, and my team almost refuses to do the stand-up, what do I do?| I am a new scrum master for my company and we're trying our first few sprints. The dev team has had non-mandatory stand ups for a while which people attend infrequently at best. Now that we're doing actual sprints I've tried to get the sprint team to come to the stand ups but no one will. What do I do?| I don't think telling people to attend meetings is a great pattern.Explaining to people the benefits of attending & then have them want to attend is a far stronger tactic& more likely to bring the improvements in process that agile offers.  Offer insights & info in the meeting that are unavailable elsewhere - treat the session as special & attending the session is a benefit not a chore.Having said that if the group needs the agile process to work then there is a need to explain that all the agile ceremonies are a package - attend them all or attend none -only people fully involved in the project can remain on the project.So if you want to be involved in the project you need to attend the planning session, daily standups & other regular events.There are some people who want a task list, put their headphones on & want no more team involvement.People with a bad attitude will degrade an agile project & cause it to fail.  So they either need to be assigned to other projects, retrained to get better engaged  or finally encouraged to move on & find a new job.To misquote Mr Ford, if people think a project will fail or think a project will succeed then they are probably right.
https://pm.stackexchange.com/questions/29720| Team consistently not making sprints| So I know that this question has been asked before, but since I haven't really seen anything that benefited my problem, I thought I would give it a chance.So first things first, in a perfect world we would be completing sprints and at the end of every sprint, we will deliver all the story points that we have committed to. I know that it is not always attainable, so a 90% delivery to me is still acceptable.The problem I am facing at the moment, is that we commit to (For arguments sake) 100 story points, but only complete 20. This becomes a nightmare as trying to manage the client becomes almost impossible. Now the logical thing to say here is that we are over committing each sprint or underestimating stories which is very possible.Just to explain the process, maybe I am missing something,We have 2 week sprintsDuring sprint, product team gets requests from the client and do requirements gathering, running details past the team/tech lead prior to prioritizing the backlog (We don't have a dedicated grooming session, however stories are fleshed out properly prior planning 1)Thursdays of every second week, we do planning 1. This session is run by the product team, we try to estimate as much of the stories on the backlog as possible, backlog is ordered based on the current priority.Fridays of every second week, we do planning 2. This session is run by the Team lead, expectation is that the team took some time between session 1 and 2 to go through work required in order to adjust estimations, but we go into more technical detail of the change requiredPlanning 1 is for initial estimations, this can change during the planning 2 sessionThe team is left for 2 weeks, there are cases where scope creep occurs, however try to limit it as much as possible as we have a dedicated Developer to work on production issues that is not part of sprint workThe problems I am facing are the following,Team does not communicate that they will not make sprint deadlinesTeam seems to not fully understand the features that are requested (Could speak to lack in requirements, however I don't fully think so)Team takes too long to develop features, going over the expected delivery estimation.Team does not take the initiative to go through future stories during the gap between planning 1 and 2I know that this is a very common issue in software development, however it is an extremely frustrating one as you struggle to build confidence with your client if you cannot deliver on time. Just to give context on myself, as that might have a direct influence. I am currently the SDM for multiple teams, due to a bit of a lack of technical understanding (Team/Tech lead) in some teams, I am quite involved with some planning sessions. I come from a senior developer background, have been developing software for about 10 years.Team in question, can differ in size, but 10 Developers, 3 QA, 2 Product, 2 Team Leads.Sorry if this is a duplicate question, I have checked the other questions and answers and thought it made more sense to post a new question.| The purpose of Sprints is not to deliver points, but to deliver value. The team doesn't commit to delivering a certain set of points or a set of Product Backlog Items. Instead, the team forecasts how much work they can accomplish as part of Sprint Planning and crafting a Sprint Goal that can be achieved based on how much work can be done. Throughout the Sprint, the team should be focusing on achieving the Sprint Goal, rather than completing a particular body of work or finishing so many points or some other measure of output.Looking at the specific practices, I can see several potential problems or opportunities for improvement.Your refinement process seems lacking. Some versions of the Scrum Guide have suggested that about 10% of the Development Team's capacity should be allocated for Product Backlog Refinement, but more recent versions have removed that suggestion. If you have a Development Team of 3 people and a standard 40-hour workweek, I would expect about 12 hours per week allocated to refinement. There's no defined method for performing refinement. Some of the teams I've worked with had everyone get together a few times a week. Others had people work individually on refinement and then get together for about an hour or so a week to align. The team needs to figure out what works for them, but it is important that it is a full-team activity to get the knowledge spread out and get the whole team to buy-in to the work being done.The poor refinement is leading to several problems described, including not fully understanding the features they are being asked to build and taking too long to develop the features. It's highly likely that the lack of understanding is leading to longer development times.The "Planning 1" and "Planning 2" is not clear to me. Sprint Planning is a single session. There are two aspects to it - the first is determining what to build based on forecasting and the second aspect is determining how to build it. More specifically, the primary outcomes for the first part of Sprint Planning is a Sprint Goal and the outcome for the second part is a plan to achieve that Sprint Goal.The team size and composition may also be issues.Although Scrum doesn't enforce rules on a minimum or maximum team size, Scrum is most effective with a Development Team size of between 3 and 9. You have 13, maybe 15 (depending on if the Team Leads are part of the Development Team). That feels very large and communication gets difficult with that many people.I'd also point out that Scrum doesn't recognize a "team lead". Such a concept tends to lead to work being pushed onto the people doing the work rather than being pulled into a Sprint and then into development. It also doesn't promote self-organizing teams.There's no mention of the Daily Scrum or the Sprint Retrospective, but I'd suspect two things. First, with such a large team, you aren't able to effectively hold a Daily Scrum in a reasonable timebox. Second, many of these issues may come out in a well-run Sprint Retrospective.The biggest issue that I see is poor communication. The team size and lack of constant collaboration are probably the two biggest drivers.
https://pm.stackexchange.com/questions/29759| Agile: in a sprint retro can I bring up a negative which isn't affecting me personally but I know another team member has a problem with it?| I've been working in a particular Agile/Scrum team for about 5 months now, and I am conscious of a specific concern (that's been mentioned to me in private) for a few weeks, from 2 different team members (out of 8). The concern doesn't affect me directly but I recognise that it does affect those team members and it is legitimate, not just a "gripe".In our last few retro's (where we "anonymously" add things to a board along the theme of "Things that went well" / "Things that didn't go well" or whatever) these concerns haven't been added to the board. I think they are either conflict avoidant (understandable) or think it won't make a difference as it is just "talk for the sake of it" or similar.I didn't pursue the people but they have independently told me that they have concern X and Y (which are genuine problems). And they don't want to raise it because of thinking the others will lambast them for it, or they won't be perceived as team players any more, or similar.Could, or should, I raise concern X and Y on our next retro? If they are not things that personally affect me, but I am aware of them as things affecting "the team".I could speak about why I added them, if asked.| I don't see any problems with raising concerns that you are aware of yet don't directly impact you. There may be ramifications to your relationship with coworkers if they see that as breaking some level of trust with you, but there's nothing from the process side that would prevent someone from raising a concern or issue on behalf of someone else.The larger concern, though, is why the individuals don't feel comfortable raising the issue on their own. The retrospective, and really all cases of team interactions, should be open and honest. Everyone should feel comfortable raising concerns that they have. If something is preventing people from raising a concern, there may be any number of other concerns that people have that you aren't aware of and aren't being discussed. This can be an impediment to a true culture of continuous improvement.
https://pm.stackexchange.com/questions/21181| How to efficiently manage a Scrum team when one member is much less productive?| Currently we have a team of 2 developers in a Scrum team, one is quick, the other is slow.When the slow developer falls behind in his sprint, the quick developer does some of the remaining work. The quick developer does not mind doing the work, but has made remarks such as 'the other developer should do this it was originally delegated to him'.I am concerned that my slow developer might be coasting it, from knowing that the quick developer will pick up some of the slack for us to meet the sprint goal. I have mentioned to the slow developer that we needs to work on increasing his velocity during the sprint. He has said 'ok', but then goes 'oh I didn't realise that the work was so complex'. So it is hard to know what exactly is going on. The quick developer has told me that the slow developer sometimes is idle, and works in spurts.I currently track the progress of the sprint using a burndown chart which is doing a good job at it.How can I improve the productivity of the slower developer?EDIT:I ammanaging the teams's velocity, but it is becoming apparent from daily stand-ups and the fact that I am sitting next to the two developers that one is much quicker than the other. I feel that it is unfair for the quick one if he keeps on being handed the slack since he ends up doing more work.| First, stop measuring individual velocity. Velocity should be measured on a team level for a Sprint, and not for individuals. Your team delivers a potentially shippable software product after even Sprint, not individuals. Since Scrum is built around self-organizing, cross-functional teams, your velocity should include everything involved in creating the delivery, from grooming the requirements through test and verification.The next problem is a personnel management question. If you are using Scrum, the process is built on a cross-functional team. If the development team needs additional training to be sufficiently cross-functional, they should have the necessary education and training. This could be pair programming, cross-team training sessions, lunch-and-learns, external training courses, bringing in instructors. The burden is on individuals to understand what skills they need to develop and work with management to develop those skills. Management should also be doing the same - identifying gaps in skills, providing the necessary resource to close those gaps, and encouraging staff to do so.If you have an employee who isn't performing to the needs of the business, that's a human resources management issue. It's not addressed in the Scrum framework.
https://pm.stackexchange.com/questions/29875| Should I ask my boss not to come to retrospectives?| I am a Scrum Master for a small team (8 devs). I have been having trouble getting engagement from many of the team members, especially the junior team members. My boss missed two retrospectives because he had other meetings and I started making progress. There was more engagement, and one junior team member who had been silent in previous Sprint Retrospectives talked at length about an action item she wanted added.Then last Sprint my boss attended the retrospective and the junior devs just shut down. He always asked everybody's opinion but every time he opened his mouth he killed any chance that 7 out of 8 team members would say anything, and the remaining team member would always agree with him. I had been getting good action items from the retrospectives and all the item have had volunteer owners. But in this retro, most of the action items were suggested by my boss and there were no owners for any of the items.The trouble is that he still has a foot in the technical side and still completes some of the Sprint items. That means he isnot exactly a chicken; he is at least half a pig. I could ask him to stay silent, but I am not sure that would work. There is a chilling effect when he is here. Am I overreacting? Should I just try to build up the confidence of the team, or should I ban my boss from the retrospective? I am not sure how he would take that.| It sounds like you have team members from high power distance cultures. People may not speak up when the boss is in the room because their values require them to listen and follow, not to advise or lead. You may even notice it happening between junior and senior team members or between yourself and team members. Read more about power distance here:https://en.wikipedia.org/wiki/Power_distanceCultures with high power distance often have strong collectivism which means individuals want to be part of a whole rather than stand out as individuals. This is contrary to other cultures who have strong individualism and low power distance values.A short term solution may be to hold two retrospectives where you first collect feedback from the team, then anonymize and consolidate the feedback before presenting "the team's" recommendations to the boss and discussing his ideas with the team. This protects individuals from feeling "picked on" while it allow individualist people to get some limelight.For a longer term solution, read how the airline industry train their teams to reduce power distance related problems. The ideal is to teach the team to have low power distance (free exchange of information among the team) and high collectivism (recognition and acceptance of team interdependence).https://en.wikipedia.org/wiki/Crew_resource_managementPs. See Todd A. Jacobs' answer for a good analysis of the scrum process related questions you will have to deal with besides the cultural topics I mention above.
https://pm.stackexchange.com/questions/11197| Communicating non-viability of project| I'm a consultant usually brought in by companies doing project management on big projects, setting up operations etc. The last few years I have been dealing mainly with digital and creative agencies.This sector historically has a low level of expertise within software development. The lifespan of agency projects, once released, are often measured in months rather than years, since most projects are in some way marketing related. As such they are not accustomed to the complexity or scope of "real" software development.My problem is as follows: When presented with a new project, which I can rather quickly dismiss as unfeasible (we're talking extremely unrealistic projects), I have trouble communicating why it cannot be done. I argue the technical complexity and the requirements versus the time and price scope. I am however not able to make my points persuasive.Essentially my recommendations get ignored, and the client looks around until they've found a vendor or individual who says "yes it can be done". Both times, the projects crashed and burned. Reason being they were so amazingly unrealistic, that even inexperienced technical project managers would dismiss them right away.What kind of approach or what kind of arguments would you use when presented with something unrealistic, yet highly desired by major stakeholders? Maybe any literature to read on the subject?| I fear my answer will probably not be applicable to your problem because of the fleeting nature of the projects and the capabilities you report in your stakeholders and sponsors.However- In the business I work in we always, without exception, do a Business Case first (and spend a little research money to investigate where key data are not known). The business case, essentially boils down to:a. What are the tangible benefits (over a period of time, e.g. 3-5 years) of doing this thing (i.e how much money will we make, or how much loss will we prevent)b. How much will it cost us over the same periodWe usually look at a number of solutions in the business case that have a range of costs and potential benefits.Then the whole shooting match is reviewed by the people holding the purse strings to see if, in a nutshell, the benefits to the business are worth the costs to the business.Such an artefact would not immediately solve your present issue- it is easy to make a business case look good by notionally increasing the benefits and/or decreasing the costs on paper, but do it a series of times and the person responsible for writing the cheques begins to ask questions when they are continually asked to spend money without realising the promised benefits.In an ideal world you would also have a robust review of the stated benefits, including benefits realisation measuring in place, and the stated costs as part of the review process- but that can vary from org to org...Maybe in your case, do a "post mortem" or "lessons learned" review after each crash and burn, documenting the busienss case and following up with why the money spent was excessive or the stated benefits weren't realised, and make sure that Finance get those reports. You don't personally need to keep saying no, eventually the more finance-oriented people will begin asking questions of the more gung ho people and some degree of reality should start to creep in.Or maybe they just all like being gung ho media types on the white hot bleeding edge of the digital age (as long as it is someone else's money they are spending!)Good luck
https://pm.stackexchange.com/questions/30099| How to influence a scrum team to do something you as a SM feel is beneficial to the team| If you need a scrum team to do something, as a servant leader what is the best way to influence them?I was thinking of talking individually to each and explain why seeing their faces is important for me to do my job ie is it reasonable given the situation to ask scrum team members to turn on their cameras during ceremonies?I am finding it difficult to “read the room” otherwise.| Raise the matter first during a retrospective and find out how the team feel about it. One time I can see when visual feedback might be important is during sprint planning. In planning sessions the SM may need to guide both the PO and the team and will want to know that everyone on the team is comfortable with the sprint goal. There are alternatives to video feedback though. You could create an opinion poll in whatever collaboration software you use.During daily standups the team's preference ought to take precedence over the SM. The development team ought to own and run daily standups collectively whereas the SM's attendance and involvement is discretionary (unless the SM is also a developer of course).
https://pm.stackexchange.com/questions/21805| How to finance non-programming activities when clients don't want to pay for these activities?| On one hand, software development involves a lot of non-programming activities like requirements gathering (including analysis), estimating, planning, testing, tracking work, change request management, and more.On the other hand, our clients don't want to pay for these activities. When a non-programming activity shows up on their invoices, they usually get angry and complain to upper-management. Of course, they always win their cause. Therefore, we (the company) don't get paid.The result of all this is that upper management is pressuring us (programmers and project managers) to not perform any of these non-programming activities. It generates all the problems that are commonly known to result for having a "code & fix" approach to software development.Our poorly tested software is often released with bugs, and of course, clients don't want to pay for us fixing them. Moreover, we often release, just in time, software that don't correspond to what the client's wanted or needed because we never had the chance to invest the time to understand what the client needed. The release is therefore rejected by the client who then complains to upper managment. We then have to make all the requested changes for free.I don't knowhow other companies solve this problemand I don't know where to look at to get the answer. Do they bill their clients for non-programming activities? More importantly,how do they get to finance these non-programming activities?Do they convince their clients to pay for these activities? Do they hide instead, unlike us, the real nature of the work they are doing? Do they charge so high for programming activities that it doesn't matter if non-programming activities don't generate any income? How?I expect agile to be suggested as an answer, but please understand that I will not accept "you must do agile" as an answer, because it would not explain how agile would solve the problem. In a scrum team, for example, you perform a lot of non-programming activies and you still get paid for them. I cannot begin to imagine how our clients will ever accept to pay us for doing sprint retrospectives for example. If you want to answer "agile", please explain how agile solves the problem. For example, how do you finance all the non-programming activites happening during the scrum process?| Stop work immediately and get the work under a contract.  Get a detailed Statement of Work that clearly identifies what is getting delivered, what activities will take place, what finished looks like, how you will invoice, how they will pay, etc.  Your issue is not methods or communications or convincing them.  You have no contract or are not enforcing your contract and they're beating you up to their benefit.  You need to take a seat at the negotiating table and put YOUR requirements on it.  If they don't allow you, walk away and go find another customer who will pay you.
https://pm.stackexchange.com/questions/30523| What to do when management prohibits test swarming by development team?| I'm a product owner on a 10 people Scrum team (too big of a team already) and last week Management came to us stating that developers can no longer participate in testing from the next sprint on, and that they need to focus on development activities or automation only (which they have never done before).Our team consists of 8 devs, 1 tester and 1 business analyst, so it's easy to tell that there is no human capacity to keep up with such code output rate.The point is, we had been working for weeks on moving from timeboxed mini waterfalls to actual Scrum. Given that the team cannot change its structure in the short term, having developers actively participating on testing meant a great advantage for the whole team and we were actually being able to have shippable versions at the end of each sprint.I'm thinking about how to reorganize the user stories on the next sprint with the help of the Scrum Master to try to find a workaround out. But the underlying message is terrible in my opinion: it doesn't matter if we had a balanced number of specialists, if dev team cannot involve on testing and vice versa when needed, there is going to be waste and the velocity will suffer, not to mention the product itself.Management's proposals included intercalating sprints by switching between coding and testing, so you can tell they are not getting the idea at all.What would you do next if being in my shoes?| Any Agile practice, Scrum included, relies on collaboration and transparency for it to work properly. Your management failed at both these things. They are imposing a certain way of working on the Scrum team (in fact, forbidding to work a certain way, which is even worse) without asking input from the team, and without even providing an explanation for the reason.So before deciding on doing anything, you first need to understand the reason behind it. It's obvious that they lack an understanding on what Agile and Scrum are, and given the way they acted, it is a clear sign of a traditional management thinking, of telling people what to do, without considering for a second that they might be clueless. This might also be the Y solution from anXY problem. So first, find out what's going on, what they are trying to do, and why do they think this arrangement will do it.I see in comments on other answers that this is a company transitioning to an Agile approach? The main impediment of Agile adoption is oftenlack of support from management. They are usually the ones deciding on an Agile transformation, and then they are the ones that don't help, or even worse, cause problems. So beware. People often like the status quo, have ingrained habits for things to happen a certain way (their way), like their fancy job titles and their corner offices, and will not be very open minded when it comes to changing things (consciously or unconsciously), especially to Scrum, who doesn't even mention managers.Obviously, whatever solution you eventually chose to organize your work within the team, it must also be accompanied bya large effort in training management to understand the new mindset. Without it, you will be fighting an uphill battle and this will be just the beginning in a long series of "orders" the Scrum team will receive while trying to self-organize.Your Scrum Master needs to step up (as part of theirservice to the organization) and try to explain why the team swarming clears obstructions and increases the flow of work and the team's throughput on delivering, while keeping the work bound by silly job titles only creates bottlenecks on testing (a 1 to 8 testing/dev ratio is a lot) and slows down the work of everyone. Depending on how management receives this communication, you will know if things will get easier or harder as you go ahead with your Agile transition.
https://pm.stackexchange.com/questions/3778| Working with team members| We are a team of 5 guys. I am newest one among the team and a starter (been with them for about a year already)I have two issues here:Whenever I try to voice my ideas/opinions during meetings they are abandoned/ignored. The team is dominated two senior people who just discuss among themselves wok which is to be done while the other two are dormant. That makes the situation very demoralizing.We have the most senior member of the team, who often ends up writing all code himself and has no idea on how to handle pair programming. At the same time our manager always wants us to work in pairs. Whenever it ends up that I need to work with him, he just asks me to work on something else and shows no interest.What should be the best course of action I could take to resolve these issues?| Team dynamics are the result of the culture and environment in which a group of individuals are placed.  In other words, what you are experiencing is the direct result of what the organization has created, nurtured, rewarded, and reinforced.  So while the personalities of the two senior folks are a major contributor, the organization and the boss--knowingly or otherwise--are enabling the behavior and, in some way you may not recognize, find it valuable.Going to your boss is certainly an alternative you have.  Keep in mind, however, that as you talk with him/her, informing him/her about the behavior of these two senior folks, you are also putting him/her on notice of your disagreement with the way the team is being managed.  Conscious or unconscious, (s)he will feel that sting.I think your best alternative, besides finding a new job, is to continue to find ways to add value to the team in its current form.
https://pm.stackexchange.com/questions/22010| How to wake up a team?| I am a Scrum Master and work with a team of 7 developers + PO (also programmer). They are experienced and many of them have been work in this place for couple of years. It is a big company in a transition to SCRUM and I am their first SM (since 2 months). They are also productive, easy to work with, eager to learn and not picky about their tasks (the product is not very exciting). The thing is the "sleepy" atmosphere especially during the meetings. Only the PO is active - he speaks for 90% of time. When I asked him not to speak first (he is willing to change this state) there was silence and it was really hard to end our meetings with any conclusions. The guys are simply fine with everything. How do I wake them up? Or do I let them sleep and take only little actions in search for improvements? I am also working with another team in the same company and the latter is boiling with emotions! How do you think?| There are some clues in your question, whichmightexplain why this is the case, but I will only mention them at the end of my answer, because I would say the most powerful tool at your disposal could be the Sprint Retrospective.I assume if you're doing Scrum, then there is a Sprint Retrospective at the end ofeverysprint. If not, start doing them straight away. It's a mandatory part of Scrum. Set a timebox for the Sprint Retrospective. The Scrum Guide says this event should be timeboxed at a maximum of 3 hours (and usually less for Sprints of less than a month). In the first instance, consider allowing the maximum amount of time, with the understanding that it can finish much sooner once it has achieved its intended results. Read theScrum Guidefor more information on that event.Research techniques on creating asafeenvironment in the retrospective. i.e. one where every member feels they can express their opinion, without fear of reprisals.  At least in the first instance, explain to the entire team how you will treat the retrospective, and how you expect them to treat it. This could be establishing principles of there being "no right or wrong answers", and it being about "improving the environment, rather than apportioning blame"; ask members to be respectful of each other, and give them the chance to ask questions, before proceeding. Whilst it is good that teams can be transparent, if necessary, ask everyone if they will agree to keep the discussions of this particular meeting between just the Scrum Team. And of course, be honest about why you are running the retrospective in this way, whilst using language and terms that are respectful of all members of the team. All members of the Scrum Team (Development Team + Scrum Master + Product Owner) should be present and participate.No-oneoutside of the team should be present, and the meeting should be held where people are confident of not being overheard.One method of Sprint Retrospective is to ask everyone to write down post-it notes about how they experienced the Sprint that is about to end (the post-its could reference an ongoing issue, or one that only affected them in that Sprint). Try to get the team to write at least one post-it of something good, one of something bad, and one of something interesting. Allow each team member to write their own post-its before allowing any discussion about the Sprint. This means everyone should have at least three (preferably more) opinions written down. Ask them to take turns to share one of their post-its (even if someone else already said the same thing). Ensure there is time to discuss the post-its, so that everyone's opinion is heard. Allow disagreements to take place, and only intervene to remind team members about the importance of making progress (i.e. keeping within the timebox), and the importance of being respectful of each other.Subsequently, the team can work together to come up with solutions (perhaps out loud, perhaps initially with post-its) for the issues they've raised.If this doesn't deliver instant results, consider trying it for 1 or 2 more Sprints. If it still doesn't deliver a change, or at least help you identify problems, consider other techniques to encourage team members to share their feelings. Perhaps an anonymous box for team members to drop in notes about things they want to raise, but don't want to mention in a retrospective. I would consider this option less desirable, because it discourages open discussion; but it might just be necessary.Also, make it clear to the entire Scrum Team (and anyone outside the team) that you are someone they can go to in confidence about their ideas/feelings/comments (including criticism of you). Consider organising one-to-one private discussions with each team member if necessary.So, the clues I've taken from your question:PO is a programmer. Maybe this is the issue. It's not explicitly forbidden by Scrum, but it's not common, and represents some significant conflicts of interest that would need to be identified and managed carefully. I would be surprised if a PO can offer more to a team of that size as a programmer than as full-time PO.  The Development Team is responsible for estimates and quality, and forecasting how much work they can deliver. The PO is responsible for optimizing value. The Development Team estimates Product Backlog items, and the PO should use those estimates to prioritize the backlog (along with other considerations, such as other feedback from Development Team about risks/dependencies/etc, and stakeholder concerns). Consider working with the Scrum Team and organization to get a full-time PO (either the current one, or a new person), and observe how things change. Change may not be immediate and if the PO ceases the role within the Development Team, ensure they don't attend the Daily Scrum (unless invited by the Development Team), and don't interfere with estimates, code, definition of "Done", and other domains that are the responsibility of the Development Team.Organization is new to Scrum. Perhaps there's a culture (either current or recent) of "industrial thinking", not treating people with respect, not allowing Development Teams to self-organize, using Scrum in name only, and not buying in to the concept.Not picky about tasks. Even if a product is not inherently interesting, it's alarming that teams don't seem to express an opinion on which to do first. Do they understand the value of what they're doing? Is the PO being a proper PO and understanding the most valuable items in the Product Backlog and communicating that information to the Development Team. Is the opinion of the Development Team heard/respected (not the same as being agreed with) when they do give an opinion? Does the Scrum Team hold a proper Sprint Review (Note: I deliberately didn't call it a demo), where the Development Team and Product Owner engage with stakeholders, so that everyone can understand why the Product Backlog is prioritized the way it is, and so the Development Team can understand what is important to the rest of the organization (and why).Terms like "sleepy" / "wake up". Is this your assessment, or a commonly expressed opinion within the team/organization? Either way, if the Development Team is aware of this perception. That kind of language might be interpreted as disrespectful, and may be demotivating and erode trust.Your assessment that the other team is boiling with emotions. Again are the Development Team(s) aware of this perception? The realization of how they're viewed may affect how they behave. How were the teams formed? Who decided who should be in each team, and why? Perhaps the personalities don't match. Is there opportunity to rearrange the teams? Perhaps combine the two teams together, perhaps create smaller teams, or just shuffle members (once, not regularly) between the "sleepy" and "boiling" teams. Whatever is done with teams, ensure the members of the Development Team know what the priorities of the business are, and trust them to self-organize into new teams of their own preferred structure. This might have a negative effect in the short-term, but perhaps it enables them to work more effectively in the future.
https://pm.stackexchange.com/questions/30559| If a team isn’t broken but isn’t a scrum team what should a SM do?| I have recently joined a new scrum team as the scrum master.They are high performing and stakeholders are happy with their value delivery. Their decisions are swift and their ceremonies are optimal.I have had catch-ups with each individual on the team and there is no obvious issue or challenge. There are no major issues coming out of retrospectives.BUTThey don’t really work as a typical Scrum Team. Their PO is essentially like a well respected team leader. He speaks almost all the time and they rarely disagree with him. They seem to prefer him to lead on all topics. They are mostly silent and in agreement with everything he says. He always asks if people agree and they either remain quiet or confirm agreement. When he is not around they are not able to make decisions but they are able to continue delivering.It’s such a confusing prospect for me as a scrum master because since they deliver at pace, they have not vocalised any issues, stakeholders are happy there appears to be no problem but on the other hand it’s not really what I would call a scrum team.My question here is, if it ain’t broke don’t fix it or what should I do?Update: My gut feeling on why they are silent is that the work they tend to get is very much like “bits and bops”. They are like the devops/software support team. So I think they all work separately on little tiny projects so don’t really feel the need to collaborate much. The PO has a solid hold on the big picture.They also said that Scrum doesn’t really work for them and they want to use Kanban.| There are a couple of points to consider here:First, does the team want help following the Scrum framework. Granted, it can be confusing if they are calling you a Scrum Master and they don't want to follow Scrum, but it isn't uncommon. Scrum isn't the silver bullet. Also, many teams grow past Scrum - leaving behind by-the-book practices for refined techniques specifically optimized for their product and work.Second, you don't only gain benefit from fixing problems. You can also capitalize on strengths and discover new ways of working that are better than the current ones. These might be established practices from outside of Scrum, like pairing or continuous deployment, or they could even be completely new - invented by the team.Lastly, don't let compliance to the Scrum guide be your only measuring stick. Consider what circumstances lead to more or less stress in the team. Which Agile principles do team feel they are strongest or weakest on? What concrete things make them strong or could help them with the ones they find challenging? In the past 5 sprints which delivered the most value? What was different about them and what could the team learn from that? There are a ton of other angles to approach this from.
https://pm.stackexchange.com/questions/22036| My team hates planning poker (and the length of planning in general), is there a more engaging and/or quicker way to plan a sprint?| My team hates how long we spend in planning. We're currently spending about 3 hours for a 2 week sprint. I tell them that is actually less than a by the book sprint planning, but regardless they want to see what else is out there/ Are there either more engaging ways to plan a sprint (something other than sitting around a table playing with cards/shouting out t-shirt sizes), or a quicker way to do it?| This is a concern I've heard multiple times and the trouble with it is that if it takes a long time, it needs to take a long time. What I mean by that is that the goal of estimation is less about the number in the end and more about driving out understanding. Sure, your team might be squabbling over unimportant details (if every story is a fight over a 3 or 5, pick one, move on, don't sweat the small stuff). But usually the long conversations are when someone holds up a 2 and someone else has a 13 because they have very different views of what the backlog item means or how risky it is to implement. These are the conversations that need to happen with the team.That doesn't mean you can't help. Look for patterns in these conversations. Are there personal conflicts that artificially create disagreement? Are there knowledge gaps that lead to the same arguments over and over again? Are there technical pitfalls in the application or outside organizational pressures that make people fearful of touching some features? You can point these out to the team and help them clear them away so they aren't cropping up as often. But ultimately, if the reason it takes a while is because the team needs to uncover important facets of the backlog item, there is no good way to hop over that without it catching up to you as problems in the middle of the sprint (and you'll pay much more time for them then).
https://pm.stackexchange.com/questions/30735| Under what circumstances should outsiders attend a scrum team’s ceremonies?| I work with a team of 5 scrum masters each of which has one or 2 teams.There is one agile coach.The agile coach wants to “observe” all the ceremonies of my team. He wants to do this to “coach” me. He wants to drop into any ceremony when he has time.I am against this because it erodes trust that I am trying to build with my team. It also reduces psychological safety within my team and it also makes it harder to maintain leadership in my team. I also don’t feel it’s of any benefit for my team.Let’s assume he finds something coach worthy I still don’t think ceremonies should be public. He says all agile ceremonies are public.I am also more experienced than him and he has not attempted to build trust with me so he has not built any foundation to coach me.Under what circumstances should outsiders attend a scrum team’s ceremonies?| I also don’t feel it’s of any benefit for my team.You think there is no benefit in a coach? What are you, perfect? "Inspect and adapt" is the core of Scrum and you are flat out rejecting it. It would be good if you could embrace it instead. Let them do their jobs, think about their suggestions and improve your team.Because let's be clear about one thing: there was no stray agile coach that followed you into the building from the bus stop one day when it was cold outside and you left the door open for too long.Your bosses havedecidedto hire a coach.Youwillbe coached.Or you will be out of a job. That's your two options.From a purely Scrum perspective, there is two core values that come to mind here:TransparencyandRespect. For most ceremonies, there is nothing to hide. It's work you do for the company, not your private party. The planning, the dailies, the review, all of them are just meetings for work, not secrets to hide.One exception may be the retrospective, as members have a right to know who gets to know about the contents of that meeting. I have often seen something called the "Vegas Principle" used for retros: what happens in Vegas, stays in Vegas. Meaning: don't talk to people outside the retrospective about what happened in the retrospective. But if the coach attends the retrospective and adheres to the same principle, then it's still open and respectful.Now, sometimes a coachcanbe disruptive. But you have no choice whether there is a coach or not. You can influence the rules by which they play. For example, the coach may not want to announce beforehand which ceremonies they attend, to actually get a valid picture of the current situation, instead of a staged ceremony where everybody knows "this is for the coach". But I think it would be absolutely okay to ask for some respect to not disrupt the meeting and to have even the coach be there on time and don't leave early. So if they attend, they attend like everyone else. No coming late, no leaving early.Your coach should come to a team meeting before they attend any ceremonies to introduce themselves, explain why they are there and what they are going to do, so you don't have to do that the first time they attend a regular ceremony.Under what circumstances should outsiders attend a scrum team’s ceremonies?As needed. And the need for a coach has been established by your boss.We often had people from sister teams attend dailies or plannings to communicate their state or offer help with their product we had to use. Sometimes we were requested for their dailies or planning to make sure they got it right and we could support them adequately. Sometimes a manager would attend, silently, just to see how the people they manage actually work.I have attended other teams dailies just because I worked with someone on a problem in their teams office and the time for the daily came and it would have been super strange to go into the hallway, close the door and stand there until their daily is over. We may be different Scrum teams, but we should all be in the big company team. A daily is just work, no secret sauce you need to protect.If your team is afraid of outsiders silently attending, then either your team needs a stronger self-esteem, or your company is doing something wrong that your team is afraid of performing their jobs publicly.Either way that's a problemthe coachcould address. With your team or with your bosses. They paid a lot of money to them, so the incentive to listen to the coach is higher than the motivation to listen to you. Sounds silly, but that's the way managers think. Use that.Embrace the coaching and use it to improve yourself, your team and maybe get some improvement done on higher levels that your own feedback cannot reach effectively. This is achance, not a nuisance you have to dodge somehow.
https://pm.stackexchange.com/questions/30811| Management wants to start doing "1 on 1"s as "2 on 1"s. Good or bad idea?| I work at a start up, and we've just promoted a few interested and apt senior engineers into managerial roles. Additionally, we've gone on a bit of a hiring spree and need to start doing a better job at managing our people, because now we have actual people to manage.One of the things the company would like to do is implement 1:1s – nothing unusual here: a direct report has a 1 on 1 with his/her manager at a periodic interval. I think this is an important component and am fully onboard with this. However, the kicker is that because of the recent promotions, management would like to start of doing 2 on 1s, where it's direct report, his/her manager, and the manager's manager ("MM"). This is the full hierarchy of the company for all intents and purposes. The theory is that with "MM" (who has been managing everyone for a while now), he can get a better idea of how the 1:1s are going and keep an initial eye out to see what's working/not-working/etc.I'm in the middle here where I have direct reports, and I have a good rapport with them, and I do not necessarily like the fact that 1. 1:1's are becoming 2:1s, and 2. 2:1s are going to be fairly regimented in structure.From an empathetic standpoint, if I were in the direct report's position, I would prefer to keep things more casual and not be in a 2-1 situation. I feel like I would close down and not give my actual feedback.With all that said, it's very much my opinion and intuition that tells me this is strange approach, prone to yielding poor results. I don't have any empirical data on the subject, so it's hard for me to properly address the situation without any potential bias.Does anyone have any research on this – is a 2:1 approach really not that bad? Are regimented 1:1s (or 2:1s) effective?Thanks.| Group Discussions Don't Replace One-on-One CommunicationsWhile there's a place for more leadership involvement, I certainly wouldn'treplaceone-on-ones with larger meetings. Especially in IT, this can be counter-productive for a number of reasons such as:IT often attracts introverts, who may not do well in larger meetings.Company leadership is often (but not universally) poorly-suited to handling the quirky personalities of IT people.Highpower-distancecultures will often lose important feedback through such a process.Senior leadership will either be silently observing (which can have a chilling effect) or actively interceding in the process. In either case, this can undermine communications, as well as reduce the trust in and empowerment of middle managers.Open-door policies, 360-degree reviews, and leadership/management mentoring are often better fits for addressingPeter principleproblems.
https://pm.stackexchange.com/questions/12341| Getting support for a software system rewrite?| We have a web site that was written five years ago by people that didn't know what they were doing.   (I feel justified in saying that because I was one of them.)   The resulting site was (and is) slow, unreliable, frequently crash-prone, and a maintenance nightmare - the smallest change often requires refactoring or rewriting large chunks of code.   Additionally, we are stuck using a javascript library (Dojo 1.4) which is so old that it's not even supported anymore.Now, with five years' experience and a much better grasp of the site's requirements, the team I am part of is in a great position to write a new site from scratch, using current technology and fixing a number of fundamental flaws in the design.Unfortunately, every time I bring up this subject I am told two things by fellow team members:Shut up, we'll handle this piecemeal as things break.If you have any questions, see point 1.The only thing I can deduce is that my fellow team members view this ongoing maintenance nightmare as "job security" - no one else could keep this code running, so they basically have employment for life.There are several problems with this:First, ethically speaking, I hate doing crummy work just to pad my timecard.Second, everyone hates the site as it is - it is a constant source of pain for everyone who uses it.Third and finally, my suspicion is if we don't step up and make the site radically better, we will one day all get fired and people will be brought in who can do this right.What is the best way to advocate or lobby management for a complete rewrite of this system before some disaster strikes?| Like Mark Phillips commented, this is a question of initiating a project.First, understand that when initiating a project, it's all about value. If people generally feel that the system does its job, then you will have your work cut out for you to push the project on technical concerns.If there are functionality sets or flows that cause real business problems, focus on replacing those. A project to replace a problematic "Click to Chat" feature set is going to be a lot easier to get support for than a whole overhaul - especially if it causes tangible business problems, like it takes so long to connect the user with someone that they leave, potentially taking sales with them.If you have one or two of those sorts of things, pick someone with a lot of clout if you don't have the pull in the org and explain how a small project like this will have a real business impact. Keep it as small as is reasonable and as tangible as possible. It'll be a lot easier for those in charge of picking projects to understand and increase your chances of getting it through.Assuming that goes through and you can do a rip and replace on that work, the business will be able to see the value it generates and pitching the next piece will be that much easier.Tackling the technical challenges of working through a redo this way can be difficult, but I've seen teams do it and it beats the heck out of being told no until the day the whole thing falls apart and it becomes a disaster.
https://pm.stackexchange.com/questions/22456| Global project without a charter, manager nor dedicated resources| I am facing a strange situation in one manufacturing company and I need help to figuring out what to do. The company has a very low PM maturity level, especially when it comes to non-manufacturing activities.Global management has recently declared a strategic goal to finally release an internal hardware/software development platform for use in multiple company's manufacturing sites and start training developers to use it. It is being developed on and off for a few years and they now want it completed in 6 months.I am assigned as an architect of the platform - my responsibility is making and enforcing technical decisions because developers in multiple countries are unable to agree themselves.There is no project charter: project is defined by marketing material mostly and developers are to decide what to do and how to do it themselves. That is why I have my role - they can't agree. This also indicates the maturity level of the team.There is no project sponsor: technical department managers (line managers, basically) are expected to spare some resources for common benefit and a strategic goal.There is no project manager: "because project managers are expensive and busy with manufacturing projects". To some extent I try to do manager tasks to keep development going.There are no dedicated resources: developers are allowed to work on the project on their spare time (i.e. when there is a gap between commercial projects).Even "dedicated" resources like me have other higher priority tasks, in particular those that bring direct revenue.This is not the first iteration like this and managers are not quite happy about wasted resources and developers spending 1000s of hours without completing anything. Platform is already in use by skilled developers, but it is in alpha stage where user/developer has to fix issues when build applications on the platform.Previous iterations were "completed" when either deadline came or resources were removed from the project to do something else. Product documentation was simply declared complete and released as is, completion reported to management.I don't know how to approach this. I am not in a position to change situation myself, my expressed concerns are either politely ignored or "we have heard that before". I really wish this to succeed, but am lost in how to go towards success.  Failure will harm me and will not bring the expected value to he company. What options do I have? What else is there to consider?This company has a long success history in manufacturing, is growing and doing great from financial perspective, but development projects are treated as above and usually (if succeed) succeed only due to dedication and heroism of developers.| It sounds like your company understands the need for project and operations excellence as it relates to what they manufacture but seems to have a blind spot for other non-core projects.  As we all know, change occurs with the right sponsor.  You were silent as to who politely ignored you but, if there are higher ranking people above, you need to talk with someone more senior and state your case.  Draw as many comparisons as you can with what they do well with manufacturing to other projects and bring all risks back to a financial impact, both favorable and unfavorable.  Keep climbing the organization until you have the right sponsor.If you hit the top and you still cannot change their thinking, then you have two alternatives: do your work and collet your paycheck and forget about results or find a new job.
https://pm.stackexchange.com/questions/4442| Employee gave themselves very negative self-evaluation - how to handle the situation?| I have an employee who was put under my supervision this year after being a supervisor of another team for a trial period that failed.In addition he is the longest serving employee at the unit. He did a semi-good job this year, completing a number of complex tasks and people seem to get along really well with him and he is always willing to help. However, I do a simple self eval (as part of a official yearly eval to HR) that asks over the last year what projects did you like, what goals did you accomplish, and what did you learn. He put down 3 small projects, he has accomplished no goals, he did not learn anything, and he failed to finish many of the larger projects he was on.I wasn't going to be to negative on him in my official eval, but to me it is like he is asking to be fired. I've never had anyone rate themselves so negatively. The rest of my team were positive in their self-evals, and I'm open to the idea that maybe I'm managing this guy the wrong way. He never asks for help. He does his best to help everyone.  Now it seems unavoidable to come down on him and start being more hands on. How can this be handled without demoralizing the employee even more and without losing a valuable team member that everyone loves?| He is communicating a message to you that has nothing to do with the self appraisal or what he thinks of himself.  You asked him to fill out a form, and he returned it to you with three small, inconsequential items and blanks everywhere else.Markhit it: he's not happy about something and he is letting you know.  It could be as simple as he is not happy in his current role or something more cancerous like your appraisal of him is immaterial and he is barely paying attention.So, I'd advise not to approach it like, 'you don't think you accomplished anything last year?'  Instead, open up a dialogue and find out what is on his mind, bigger picture.  This would be about you asking questions and letting him answer, with most of the talking coming from him.  How are your listening skills?
https://pm.stackexchange.com/questions/31009| What does a Product Owner do if they disagree with the CEO's direction on product strategy?| What can, and should, a Product Owner / Product Manager do if the CEO has mandated that the team builds something which the Product Owner feels is not in the best interests of the customer?Aside from presenting a case and aiming to influence the CEO's decision, should a Product Owner acquiesce if that fails? Or should they keep fighting their case?| The PO is theownerof the product, but that doesn't mean they can do watever they want with the product. At the end of the day, they represent the needs and the wants ofallstakeholders.Inevitably, you might end up in some situation where the PO has a different vision for the product than some of the stakeholders, but, like reasonable people, the PO and the stakeholders can discuss it and come to an agreement on how to proceed. This can only be either as the PO wants it, as the stakeholder wants it, or some other approach that comes up during the discussion.During the discussion, besides arguments people bring to support their view of things, there will be other things interfering with the decision. The product is developed as part of some business need of the company, and the company can have certain business goals, certain budget, certain organizational culture or structure. These might need to be put in balance with doing what you think is good for the product (for ex, it might be good for the product, but bad for some other - more important - company goal).A reasonable CEO will have the whole image in mind and needs to think about the larger context, not just the product of one PO. So if the CEO takes such a decision, the PO should support it, even if they disagree with it. And if the CEO is unreasonable, then you still need to support it, since as a PO you are lower in the company and the CEO is your hierarchical superior and can tell you what to do.So if you haven't managed to convince the CEO to do what you want, then you just follow what you have been instructed to do.
https://pm.stackexchange.com/questions/12617| Why management is more concerned of JIRA hours than of following Scrum values?| As in many other projects, we are also using JIRA to manage tasks and user stories, and Scrum as the Agile methodology. At the end of each day, the ScrumMaster provides the burndown chart to the PMO team.However, the first set of questions that get raised during each weekly meeting with the PMO team, are:-Why is the team not burning hours properly in JIRA - 5 hours per day?If each team member is burning hours (~ 5-6 hours per day) and logging them properly in JIRA, then why is thered line (of Remaining Values) in burndown chart not coming down as close to the Guideline?Who in the team is not logging hours?Why the team has to be reminded each day to log hours in JIRA?Frankly speaking, the whole team is quite fed up with all these silly questions, and all of us wonder whether we are actually following Scrum values, or instead just maintaining JIRA to show PMO that we are all following Scrum and have a near-to-perfect burndown chart.For me, I have always been wondering on three points:-Why the management is more concerned of JIRA burndown chart than of following Scrum values in project development?Why do some members of the team don't like to log hours in JIRA diligently every day?Is there anything that the team can do to make this logging of hours (by each team member) a more easy process, so that the management does not bother us by asking such bad questions?Can anyone of you please clarify my above-mentioned three doubts, so that we all can become a better Scrum team?Thank you all in advance, and I appreciate your time and suggestions to help me!| I can feel the frustration in your post.  As someone who made the transition from a PMO to an Agile role I can understand both sides of the coin.Your question has multiple components which I will take in turn but all of them haveeffective communicationat their core.Why are management more interested in logging hours?This could be a number of things but management absolutely must track hours of work accomplished.  It could one or a combination of the following reasons.The company mustaccount for shareholder valuebeing invested.  Effective delivery is only one way of tracking value, it is also necessary to ensure that the delivery is roughly allied to the amount of predicted hours of effort.External auditingand governance compliance.  If your company is a PLC then the auditing and regulatory burden increases and logged hours are a critical component of that process.  Remember; when someone gets their monthly salary that is someone's shareholder investment being transferred across and that shareholder expects a minimum level of return on investment for paying that salary. It is not unreasonable to simply log hours worked is it?Timesheeting.  If you are attached to a PMO it is likely the development team have multiple project or programme workstreams coming in.  The department is not a free resource, your developers need to be apportioned to a cost centre for the work they do so that projects can be tracked to ensure they are on budget.Resource Demand.  Do not underestimate that the primary way management decide to scale up and down resource is by contrasting planned effort in man days / man hours against a fixed dead-drop timeline.  If the resource demands exceed the deadline they will bring resource in.  Logging hours is a critical part of ensuring that planning is effective and accurate.  You get additional developers and testers if required but logging hours is critical to making that business case.Trust.Right now it appears management have some trust issues regarding the department.  It is possible you are a fledgling Scrum team, the process is new to them, it was not sold in the right way or they need to control the full time resources of the department.  All of these symptoms are a lack of trust.The hard truth is, I would never allow an employee to forego tracking his/her hours if he cannot even manage to track his hours.  Does that make sense?In the military we used to have a saying -"When you can administer yourself, we will give you a rifle.  When you can administer your rifle, we will give you a vehicle, When you can administer a vehicle we will give you subordinates..."If your team cannot evenaccomplishhours tracking then why on earth should they be released from the task?  It's a simple item that takes less than 5 minutes.  I am surprised management has not taken more stringent action already.  If your team want independence they have to earn it.Why are my team not logging hours?This is partially a psychology issue but it also indicates they have not had the value of hours tracking explained to them.  If they have had the value explained and they continue to discount a process that Management feel is valuable then you have adysfunctional team, possibly centred on one or two strong characters who are driving the rest of the group.In that instance you must take action to instil discipline in the team.  A Scrum Master is the master-servant of the team.  Most people focus on the servant part to show humbleness but do not forget the master role.  Impose your will onto the team to ensure they understand exactly what will and will not be tolerated.Communicate to the team thatHours must be logged at the end of each dayYou will consolidate all logs daily and report on those missingConsistent offenders will have it reported on at their annual appraisalConsistent offenders are letting the team down because the sooner they comply the sooner management may trust the team and remove the processIt is always easy to blame the management process rather than do a root cause analysis; in my experience most managers have sound reasoning for the reports and processes they request.  Also, in the future if you need to scale up or challenge planning estimates and you don't have logs supporting your business case then expect the resources to go to a department head who can enforce logging.Good luck, even raising this issue in PM.SE indicates you have some excellent qualities to fix the issue.2019 UpdateThis answer represents a snapshot in time of where I worked and how I approached Agility.  I should say that, nowadays, I absolutely do not support time sheeting and timesheeting itself is symptomatic of a project smell which requires root cause analysis.  It indicates lack of trust in a team or resources split across deliveries.  It is, in short, a terrible way to facilitate software development.In addition,working software is the primary method to demonstrate value.  All other artefacts are smoke and mirrors.I stand by my answer as it shows the journey that we all take towards the Agile values but I no longer support it as advice to the development or project management community.
https://pm.stackexchange.com/questions/12884| How to get a dev team to use TDD and CI?| I'm a software development program manager who has experienced many of the benefits of test-driven development and continuous integration. But some of the dev teams I work with don't follow these practices. It's not my place to tell them how to do their jobs, but how can I encourage them to adopt these practices without overstepping the bounds of my role?| Lead by example. You can't force people to do what they don't believe in, particularly in your role. But if you work the way you believe is right, and if you quietly show results, then you should eventually win people over to your side. Don't force anyone, simply work in the way you believe is right, mention your positive results, and if they are interested then show them more.I first realised the power of TDD when one of my team insisted on doing it for his own work. I thought he was wasting time, but I trusted him enough to let him work the way he thought best. Then one day he showed me dozens of bugs he'd found in our software and quietly corrected. He'd found these because he wanted to check the behaviour of the code he was working with, written tests for it, and found holes. He didn't convert the whole team at that moment, but he did convert me. I'm sure he did it for other people, too... just quietly.On a related note, see this video from Dan North, and in particular story #3, The Coach.http://www.infoq.com/presentations/interactions-career
https://pm.stackexchange.com/questions/23145| Delegating Work and Dealing with Poor Results?| One of my weaknesses as a PM is not being able to delegate and manage work assigned to others. What are ways you can tackle this? Granted I have high expectations of others, but sometimes they just don't meet the basic requirements.Example: I asked someone to do a task for me, and 2 hours before the deadline they present it to me clearly showing no effort was put into it. I had to scramble and re-do it myself. In this scenario, how do you deal with this person? Is there a better way of asking them to do it? How can I enforce it so they do it better next time?| A few suggestions:Don't delegate & disappear until the deadline. Check in with them once or twice, just informally to ask how it's going, do they need any clarification from you, are they having any problems.Be sure everyone is clear on what the priority of the delegated task is, especially if the people you've delegated to have other usual tasks, and possibly other people that are setting their priorities or depending on them.And when things do go wrong, don't think "enforce". Think "ask." Ask them about it (after you've calmed down from having had to scramble to do it yourself, and after putting any thoughts of whatyouthink happened firmly out of your mind), in a non-judgmental, non-authoritarian, curious way.For example, in the situation you describe, I might say something like:So, I appreciate that you turned the thing in on time, and that it had (something else I can remotely find to praise about it), but I was surprised that it didn't include (specific things that you had expected it to include). Was I not clear about that, or ...?Note that I'm leading with the assumption that the fault might have been mine. I will do this even if I am 99.999% sure that it was not, partly because I have learned that communications problems usually have fault on both sides, but mostly because it is the least accusatory framing I can provide, so it is least likely to provoke a defensive, self-justifying response, and most likely to elicit an open, productive response.Hopefully, the response identifies what the other person thought the problem was, and the conversation can then proceed collaboratively to figure out how we can avoid a similar problem next time. Sometimes I will offer a solution (eg, "would it be helpful if I checked in with you halfway thru?") and sometimes (usually not the first time) I will assert a solution I want to try (eg, "OK, well, next time I would like to see your design/prelim draft so we can make sure we're on the same page earlier").Communications problems are SO common. It is SO easy to think that everything made it out of your head and into your words when really only half of it did -- and this is true on both sides. It's often helpful to point that out (eg, "Oh I see, I said X and what I meant was X+Z, but I wasn't explicit about the Z part so you assumed I wanted X+Y") as it can become an area for continuously working towards improvement.It's hard to move from "I asked you to do this thing and I ended up redoing it myself, dammit" to "OK, wellthatdidn't work out how I expected. What do you think happened?" And it can take a few hours or a day or two to get there, especially at first. But I have found it well worth it: both in terms of fostering a collaborative, productive team, and in terms of lowering my stress level. :)Good luck!
https://pm.stackexchange.com/questions/5473| How to communicate with project leaders when they are doing poorly| I have been on multiple projects where the project leaders have not involved themselves in the project enough to even learn what the project is really doing.  Other times the project leaders didn't even schedule progress sessions throughout the project.  One of the worst experiences I had is where I (as a developer) kept the project on track, ended up getting the team to produce an implementation plan and then executed that implementation plan by myself.My question is, how do I hold a project leaders feet to the fire without offending?  I have been bitten in the past for being too honest with my feelings when project leaders drop the ball (like not recording requirements changes and then having to discuss the same things multiple times... or helping write extremely poor requirements in the first place).| The consistent factor across all the projects isyou. Your behavior is currently enabling theirs.You're using negative language to describe what's happening, but I wonder - do the project managers even know that you don't enjoy picking up after them? A lot of project managers delegate responsibility, and if they're ever overworked this may be the right thing to do. Have you told them that you don't enjoy it?Rather than phrasing it as "dropping the ball", I'd ask what balls they're juggling. You might find that requirements and implementation is the least of their worries. Perhaps they're about  to lose their whole budget, or the department is looking at making redundancies, or the main stakeholder who was interested in the project in the first place has left. If they're not busy managing the project, whatarethey doing?I've often found it useful to give feedback to project managers by asking for help. Instead of phrasing it as "Here's what I need from you," you can ask, "How can I help you more effectively, given that XYZ keeps happening?" You could also do this by running weekly or bi-weekly retrospectives, which will bring up common issues the team is facing and avoid the situation where one strong voice overrides the rest.Also consider that you have an opportunity here. If you're backing up the project managers and might enjoy it in different circumstances, maybe you could just ask for more recognition of that.
https://pm.stackexchange.com/questions/33123| Which is the better general guideline, "prefer standardization" or "don't care about standardization"?| In my software development team, we have established some guidelines to help single developers take decisions on their own. Recently, some discussion arose around one of those guidelines. It deals with whether one should generally opt for uniform, consistent approaches or not. Or, put differently, whether the burden of proof should lie with the one wanting to do something differently or with the one trying to establish a standard. Put in a nutshell, these are the two opposing points of view:View A: Use a uniform approach, unless there is a convincing argument that it's disadvantageousView B: Don't care about a uniform approach, unless there is a convincing argument that it's advantageousClearly, this is just a very abstract guideline, and both the cost and benefits of uniformity as well as those of non-uniformity will vary a lot for different situations. Examples of where we see this guideline as applicable are coding standards, API and UI design, development processes and used development tools. I would also guess that this is a matter of scale: The larger a team/organization becomes, the more disadvantages for a single, uniform approach appear. And the longevity of thinking is probably also a factor. For that matter, in our specific case, we talk about roughly 20-25 people in a few closely interacting sub-teams and we are in a business where long time-frames are relevant.From my software engineering background, my gut feelings say "standards are usually good", which leads me to prefer view A. But as I said, others on my team disagree, and some voices in the literature (e.g. Manuel Pais and Matthew Skelton in "Team Topologies") call view A "Monolithic Thinking" and note it as an anti-pattern.Question:Is there evidence (empirical, as hard as possible) that either View A or View B is preferable as a general guideline? Does this apply only for certain contexts/situations (e.g. "view .. was shown to be better in teams up to .. people" or "standardization was shown to be beneficial in area .. but not in area ..")?| Here is a study on the effects of standardization:Process Standardization, Task Variability, and Internal Performance in IT and Business Services OutsourcingThey found that, in non-variable tasks, standardization improved performance quickly after the standard was implemented. In variable tasks, performance degradation was experienced after standardization; however, performance improved thereafter.I suspect most find standard approaches to work create predictability, reduce variability in outcomes, reduce threats, and increase efficiency. And I bet, while we enjoy those benefits, we lose some degree of innovation, agility, experimentation, and risk-taking. In practice, I have seen standard approaches cause trouble because people do not know how to deviate from the approach when it is necessary. Some personality types are severe rule followers and, once the rule is established, there is no breaking it no matter the need or the case in doing so.
https://pm.stackexchange.com/questions/23754| Should a technical person take part of the user stories prioritization process?| As a Tech Lead within a "Scrum" team, I am annoying regarding some laid rules.It is established that only Product Owner, Business Analyst and Scrum Master (and eventually Product Manager) take part of the user stories prioritization process (backlog prioritization).They are sorting US based on story points, without any further software-oriented facts and knowledge.Worth noting that those story points emerged from a quick and probably "blind" macro-estimation process, not a deep one.They judgewhichvaluable US could be delivered andwhenthrough those macro-estimations.I notice that their decision is often based on wrong assumptions and false hypothesis; leading to a sorting readjustment, therefore wasting anybody's time.Do you consider a Tech Lead (or any other qualified developer) should be part of this prioritization process to aid to prioritize based on programming knowledge?Like a guarantor of feasibility.| Product Owner and the Development Team collaborateThe Scrum Guideis very clear on these aspects:Product Owner and the Development Team collaborate on Backlog refinement:Product Backlog refinement is the act of adding detail, estimates, and   order to items in the Product Backlog. This is an ongoing process in   which the Product Owner and the Development Team collaborate on the   details of Product Backlog items.Product Owner's decision is final on ordering the items. However, dev team gets an opportunity to present their point of view.Product Backlog management includes... Ordering the   items in the Product Backlog to best achieve goals and missions;   ...those wanting to change a Product Backlog item’s priority must   address the Product Owner.Dev team's decision is final on estimate. However, Product Owner gets an opportunity to present their point of view.The Development Team is responsible for all estimates. The Product   Owner may influence the Development Team by helping it understand and   select trade-offs, but the people who will perform the work make the   final estimate.However, the Scrum Guide is silent on technical debt.There is no mention of technical debt or anything remotely like it in the Scrum Guide. When the dev team strongly feels that a technical debt needs to be prioritized, otherwise there will be bigger problems down the road ("A stitch in time saves nine"), they are powerless to get that prioritized. If the PO refuses to give enough attention to the views of the dev team on this aspect, I advise my dev teams to include the technical debt in their estimation of related features.So the answer to your question:Do you consider a Tech Lead (or any other qualified developer) should   be part of this prioritization process...isYES, you have a right to participate. The Scrum Guide says so.
https://pm.stackexchange.com/questions/33324| How to approach this: A team member with Good technical skills but weak in other areas| My team consists of 7 people and I am the project manager. A teammate of mine has good technical skills, but he struggles with documenting the results of his work and delivering documents to the next teammate (documenting a single page takes him two or three sprints).I spoke with him and he says that documenting something is hard for him, and he doesn't like to do this so he postpones it to the end of the sprint and rarely does it. I suggested using voice typing or some methods liketemptation bundlingbut nothing changed.I thought this person could be a good lead developer because of his technical skills, but now I'm worried about his negative impact on the team.Do you have any advice for me?| This is a situation most of us as project manager face in real life. The good part of this situation is that the issue and the reason are pretty transparent, and there is no lack of openness within the team. People who are technically strong may lack some other skills like in this case which is documentation.Since the person has informed you about the disinterest in documentation, and that your effort to use voice typing has not given the impact you anticipated, this clearly shows that the person lacks skills to express himself/is highly concerned about his communication skills.Better option, let him work in a pair with a lesser technically skilled person and let that person take care of the documentation part whereby he can focus on his strength and also review the work of the other teammate. Over a period of time osmotic knowledge sharing will happen within the team environment which can benefit both the individuals involved as well as the team as a whole.
https://pm.stackexchange.com/questions/24019| Methods to improve daily scrum / standup| My Team's Daily Scrum needs improvement and I was wondering if anyone has a workshop idea/method on how to improve.The current issues that my team face are:They tend to go off topic, instead of focusing on what I did, what I am going to do and impedimentsThe Product Owner talks and asks them for 'updates' during or directly after the Daily ScrumThey often don't know what they are going to do... i.e. they can't answer the question during the Daily Scrum, so they say they are going to decide after the Daily Scrum what to do.| You have neglected to say whether your team are face to face or working distributed and communicating via Lync etc so for the sake of this answer I will assume distributed.Stage 1: Basic DisciplineTake a hard line with the Product Owner and tell him that you will facilitate the session and ensure that it is productive.  Sharing the duty is confusing to the teamIf the PO requires an update he can speak to developers individually after the stand-up but the ticket tracker (Jira, physical board) should be enough of a steerHave the Board with the tickets visible (on screen or in person) and link the tickets back to the developer so everyone can see it and commit to their teammatesKeep it conversational but focussed (for example)Hi Dave, how was your day yesterday.  Is there anything you can update the team on?  You worked on Ticket 267 right?  How did it go?  Fantastic.  Are you continuing with that today or are you being pulled into anything else?  OK. Good stuff.  Lastly; is there anything that you need from me or the rest of the team?Although lengthy this type of interaction will flow a lot more smoothly once the team get into the habit.Stage 2: Keeping it accessibleRemember that your aim is to create a self-organizing team not chair ceremonies.Have developers nominate the next developer to speak and get them to ask what they worked on yesterdayDon't make people actually stand-up.  People have back problems, injuries, hip replacements and all sorts. One of my team members for 62 and hated standing.  Of course we sat down with a coffee the whole timeEnsure the developers are calling out supportive behaviour (Oh Dave helped you on that did he Karen?  Awesome. Thanks for letting us know.  Great teamwork guys; thanks for doing that Gatekeeping task so quick etc etc)Don't betoostringent about the timebox.  The 15 minute time limit was imposed to stop 40 minute meetings.  It was not designed to aggressively cut people off at 16 minutes and disband.  You already have everyone on the call, simply dismiss those that are not needed and continue it using your judgementAs a ScrumMaster; confirm to your team whatyouwill be doing that day as wellEnsure that at the end or the beginning you open the meeting with a small rapport builder (Hey team - everyone enjoying the great weather?  Anyone do anything great the weekend?  No?  OK let's get started)Make sure you update the team on comms during the stand-up (Hey team, just for everyone's awareness, the back-end guys might be upgrading XYZ today so check your inboxes or Slack for the noticesFinish the meeting with the PO (Hi PO, any big stakeholder messages or changes to inform the team about before we break?)The key part is always to remember that your coders manage the code pipeline; you manage the relationship pipeline.  Forget Scrum and the Stand-up and just talk to your team like they are human beings working on something valuable; because that is exactly what they are.Other hints and tips for building a teamGenuinely care about their diaries; ask how many meetings they have that day.  Are they feeling pressured or burdened.  Ask if you need to get involved to push back on anythingEvery few stand-ups throw in a personal anecdote about you or a team member to build the bond.  (Hey did you know Alice just completed her AWS exam?  That's awesome.  We should pick it up at the Review to tell stakeholders but for now; well done)Use humour to make meetings bearable.  I see so many teams being death marched into a delivery.  Agile is about flexibility but the traditional project management rapport building is not gone.  Really connect with people during your sessionsFocus on building a team identityIf you are face to face then make the ceremony a genuine gathering; tell people to stop work 5 minutes before and go and get a drink/coffee etc ready for the standup (As an aside I also break up my Sprint planning with a 10 minute break uing this pattern as well)Ensure your teams have the psychological safety to speak up (I typically do this by focussing on the shyest member of the team 25% of the time using the sentence "I don't mind what you say, genuinely, just tell us what you think. Be bold."  Once they have reached a level of confidence I shift focus to another team member for a few timeboxes.  This has led to programmes giving me under-confident developers to bring out of their shell
https://pm.stackexchange.com/questions/15374| How to finish FP project when change requests are not finishing| We have got the situation when our FP project is running over the time without visible end date.  The initial agreed scope is accomplished so we would like to release the team. However the customer provides small changes requests which require every team member participation , however they are not fully loaded.  Such partial load influences on financial metrics of the project.Customer does not want to pay monthly fee for 100% reserved team. It's good for them since they have timely service and pay for change requests only. It's not beneficial for us to keep people partly loaded where we can not plan their workload beforehand.How do you resolve such cases ?| You are a party to the contract.  This means you have to protect your party's interests in the agreement, which you are NOT doing now.  You say your customer does not want to pay for a fully loaded team but wants the benefits of a fully loaded team.  All customers would want that.  You answer needs to be: pound sand (not literally).Your price for a small change request is the greater of the actual effort required or the cost of the resource that you are unable to sell elsewhere.  The net result would be a fully loaded team for that change request.  Here's an example:  if a team had to travel for two whole days round trip in order to do work that takes only four hours, do you believe the customer would only pay for the four hours?  No way.  They would be on the hook to pay for the four hours plus the 16 for travel.If you are concerned you will lose the business to an alternative, if there's an alternative willing to lose money, let them.  No contract is worth it if you are not meeting your interests in the agreement.  There are other clients out there; go get them.Your FP formula is: Your costs + Your margin + risk = fixed price.Your costs include unused utilization of your resources.  It is part of the cost burden.EDIT to answer question in comment:  You indicated your original scope at your original FP is finished so there is nothing more to do with that.  Whatever CRs you have already agreed to at whatever price you indicated is a commitment you cannot back out of.  You need to complete that scope and invoice for that price and live with the reduce profit or loss you experience.  For future CRs not yet agreed to, here is your chance to price it building in the extra cost and margin for non-allocated hours for which your resources are not fully loaded.  It does not matter if it is T&M or FP or CP.  What matters is you load your total costs in your price build up.Since this will show an increase in price for your customer, you need to have a sit down and explain the deal.  Since you are a party to the contract, you have the right to explain your position in the deal.  If your customer balks, then let him compete it.  Every other seller will build the price the same way.
https://pm.stackexchange.com/questions/6526| How do you deal with constant interruptions coming from outside the team?| As one of our teams was restructured completely (6 our of 8 new people in the last two months) and their knowledge base is now very weak, I notice constant daily interruptions from them. We share the office space and since most of the knowledge on their project is held by one of my team members, they always pop-over with questions.We did a technical presentation for their team and planned one task battery-type, so we can offer some support during the sprint. We also suggested to them to build a knowledge database with the info they gather, but lately the questions keep on coming even after talking to them.I can't just forbid people to talk, also since they like to be very helpful. How would you handle this?| DuckFirst, introduce the equivalent of astuffed duckin the office. Questions should always be asked to it first. This one depends on the level of trust you have from that other team, and their own technical level. Make sure they don't take it as poking fun at them for not being able to work on their own.Question ticket boardThen, introduce aquestion ticket board. I used this to manage interruptions from team members when I was doingPomodoroand still had to be available to others.Basically, that was simply having yet another post-its board, on which people with questions would write down one or two key words forthemto remember their question, and then put the post-it on some reserved space next to my desk. Then, when I was available, I would take the top post-it, FIFO style, and went to answer it with the asker.This has the following advantages:Transforming interruptions into managed time off the project. Not as good as being rid of them, but probably the best tradeoff.Answering only one (or n, depending on the actual amount) question at a time forces askers to cooperate and self-organize to decide which question should be asked first. This adds a bit to the cost for asking too many questions, while not making asking few questions costly at all.Making the quantity of questions visible for everyone, calling for responsibility from askers, especially if you are in the same room.DocumentationHave askers document the given answers. It seems you already asked them to do so, but all the usefulness of a knowledge base depends on its implementation.Make sure they don't simply write down “question: answer” in a file, no one will ever read it. Have them document or refactor the parts that gave them problems,boyscout-style(I'm assuming a programming project here, but hopefully you can find an equivalent in your domain if it is different).Basically, have them understand that they should bend the material to their understanding, in order to foster a sense of possession and responsibility. This will also have the side effect of increasing the cost of questions to them, which seems to be something you might desire if it has already been some time since the transition started, and you noticed a rise in questions (based on“ lately the questions keep on coming even after talking to them”).
https://pm.stackexchange.com/questions/34070| As a Scrum Master, how to speak to a developer about his delays?| What would be the right approach to have as a Scrum Master to speak to a developer about him being late in the office everyday (we show up between 9:30 and 10 in the morning, it is not a clear rule but a kind of unofficial rule).I am not the boss (and I do not want to be boss), but since 4 sprints now, we clearly see velocity going down, we have 3 developers, so if one of them started to be not engaged, it is impacting the whole team.I know, developers tend to be more free and some of them prefer to come late and leave late, some of them like to work at night etc.. in our case, the person comes at 10:45 and leaves with us (in the best scenarios he leaves 15 minutes after us).I DO NOT TRACK HIS MOVES, but I do track the sprint goals progressions, and what we all promised to deliver to our clients.Some things to take into account:I am a new scrum master in this team (1½ months).This developer is leaving the company in 2 months, but we need to deliver work.My first idea is to speak about that during the next retrospective and do it as a question, my objective will be to have a discussion and understand the mood, motivation, etc.Any suggestions?| Any suggestions ?I'm sure there is an official Scrum answer and a project management answer. This is a common sense workplace answer:Don't bother.That person is out of the door. They are there because of their contractual notice period. If they are still doing 7/8th of their work, you got a good bargain. It could be way worse. Don't push it. You have zero leverage, your team has zero leverage.Whatever their current motivation and/or effort towards your work and team, I guarantee you that discussing it will make it worse. If they are not breaking any of your team's rules, take what you can get as long as you can. You won't get more, not matter what.Please note that answer is very specifically targeted at the "this colleague is leaving and has their last day already set" part. If it were an ongoing problem with a permanent employee, I would agree with the other answers here.
https://pm.stackexchange.com/questions/15508| Is dedicated product owner mandatory for a agile scrum team?| Team setup:We are primarily an IT development team of .Net+Java developers who work respectively on components based on these technology stacks only. About few weeks back our team has been asked to follow agile scrum as an organizational initiative. As part of this my team has started having daily scrum standup calls. We also have planning meetings and retrospective now. We do not have dedicated scrum master and product owner in the team however we do have a ‘traditional manager’. We also do not have Kanban board to regularly update the task status. Our team has one confluence page where all tasks are listed. Mostly(for last planning meeting 16 out of 18) tasks are one liner and do not have subtasks even if they are as long as estimated for 5-10 days effort.Problem(In my view, many team members do not agree to this):What happens in absence of a Product owner isWhen we go to planning meetings we first start give priority to the tasks as a team based on those one liner task descriptions which in some cases are explained (but not documented) by member who has worked on similar tasks earlier. For some other tasks, we say we are still waiting for requirements.As there is no prior analysis of tasks we waste too much time in priority discussion and estimations.As these meetings are run by ‘manager’ we still plan everything based on task-people mapping rather than a general estimate.Question:Whenever I raise above points in meetings, based on my previous experience of agile scrum methodology, I am opposed by almost all team members saying “we will improve in long term, we have just started”.My question is: Is it ok not to have a Product Owner and being dependent on each individual to volunteer to fill details of task(create user stories) on runtime during planning meeting even if it results unclear requirements even after of planning meeting?| The short answer to your question is: No, it is not OK to not have a product owner in Scrum. I'm sure there's a team out there that has done it with some success (there's always the exception to the rule) but it's a critical part of the whole Scrum Team. Scrum is meant to be one framework that you can use to be more Agile. If you look at theAgile Manifestoand the associated12 principles, the product owner is how Scrum addresses many of them. For example, much (not all) of the Customer Collaboration is accomplished through the Product Owner. Also, the 4th Principle is:Business people and developers must work  together daily throughout   the project.I don't see the business involved at all in your question. There are, of course, other ways to be Agile beyond Scrum and, if you were really determined, I'm sure you could account or a lack of Product Owner (though it would probably be more difficult than simply having a PO).One thing you probably have to consider though, as a member of the team, is that if your organization gave you the directive to use Agile and Scrum, but didn't make Product Owner or Scrum Master roles, they may not actually have much interest in doing it. I fully encourage your team to strive to be as Agile as you can inside of the context of your team, but if the organization doesn't really have the desire to be Agile, don't frustrate yourself with it.
https://pm.stackexchange.com/questions/24829| PO likes to organise refinements during the Daily Scrum - therefore hanging the time/place of the daily| So - I'm a SM - my Product Owner likes to organise refinements in the morning. His logic is that such meetings at the beginning of the day don't collide with a thought process when a developer is in the middle of something during the day. This makes sense for me.However, such meetings sometimes collide with the Daily Scrum. Not often enough to actually change the daily time (or place), but often enough for me, because many times people tend to forget about this and miss one or another meeting.I confronted the PO about this, and my argument about reducing the complexity, was deflected with "people>process".How to tackle this situation?| Bring it up in the Retrospective.While your Product Owner's initial axiom is correct from an Agile standpoint, I would argue that his logic following from it is flawed. Here is how I interpret your situation:There is a problem with the processes/tools.We do not know whether or not there is a problem with the people/interactions. We also do not know if there would be a problem if those interactions changed.Therefore, meet in the Retrospective to clarify that second point.From theAgile Manifesto:Individuals and interactions over processes and tools [...] That is, while there is value in the items on the right, we value the items on the left more.If problem is detrimental to interactions,doaddress the problem. If addressing the problem would be detrimental to interactions,do notaddress the problem. If addressing the problem would be irrelevant to interactions, thendoaddress the problem.After all; thereisvalue to the items on the right. The only time those goals should not be pursued is when doing so would beactively harmfulto the goals of the items on the left.Bring it up in the Retrospective, then react accordingly. This would also be a great place to brainstorm possiblesolutions, if it is determined to be a problem that should be addressed.
https://pm.stackexchange.com/questions/15778| How to manage a situation when one team member doesn't want to participate in retrospectives?| Team works together for couple of months. They are somewhere between norming and performing phase. All team members are enthusiastic about their work and the product they work on. One of team members says that he doesn't benefit from retrospectives. He has been on many of them (between 30-50) in different teams and came up to a conclusion, that he prefers to do developer's related work instead.At the same time he is collaborative - helps others, respects team norms, actively participates in other meetings, etc. He is a good engineer as well. Team wouldn't like to loose him; in other words a solution with laying him off the team is not acceptable.| It sounds like it would be a good time to have a 'Retrospective of Retrospectives'. Start with a reminder of the purpose of having a retrospective and what the team is trying to get out of them.  Review how the team has had retrospectives in the past, what went well, what can be improved etc.  It may be the format of the meetings that is the problem, and others might have similar feelings if given a better chance to express them.The only time I have seen a similar situation is where the retrospectives were always raising the same organisational problems, and as a team we were unable to improve the situation.  If this is the case, unfortunately I can't help - I left the organisation!
https://pm.stackexchange.com/questions/24884| Agile - How to increase engagement of team members in the planning meeting?| Acting as a team lead I feel the engagement in our sprint planning session is low.Some people are very comfortable to talk and share ideas/knowledge in order to help the team to define tasks for our stories, but some people (usually more then half of the team) simply left the meeting without even speak out once.The team have about 10 members and they are working under the Disciplined Agile Delivery guide.| It could be many things and it's unlikely that the 5+ out of 10 have the same reason for not speaking.  With such a small team you can get to know their personalities and how they behave outside the meeting. This will help guide you to a solution.Lack of Motivation / Team Spirit- There could be a lack of team spirit or maybe your team isn't motivated.If the lack of motivation is macro (the team is affected all the time, not just during this meeting), it will also be the hardest to solve. Causes can be wide ranging, but consider adding side projects, reward systems and acknowledgements.If the lack of motivation is micro (only related to this meeting) you may need to 'shock the system' by scrapping your meeting. Don't just reschedule the same recurring meeting in Outlook. Cancel it. Create a new one. Change the day, call it something else and change how you run it. Oh, and keep it short.Intimidation/Inadequacy- If you have team members that are loud/aggressive/opinionated (not even in a negative way) others may not speak up.Create a process where everybody gets a turn. Go Round-Robin or Alphabetical or simply call out names.You can also pre-meet with a smaller group before meeting with the full group. You can then "contribute on their behalf" by referencing back to the smaller group meeting. "I talked with Bob earlier and...".Shyness- If outside of this meeting these team members do not talk casually with the group they may simply be shy.Before the meeting, give a specific task to a specific member. This will give them something specific to contribute and make them the 'expert' for answering questions. This works good when you already know the answer because you can guide them as they answer questions. For example:"We need some options for logging exceptions. Take 30-min and look into X, Y and Z and see if you think they'd work. See how much they cost and if we can log errors to a central location.".Then, during the meeting you can ask them direct questions:"Do any of those allow central logging? Are any of them expensive?"
https://pm.stackexchange.com/questions/24958| How do I begin scoping a project I have little knowledge of? [closed]| Closed.This question isoff-topic. It is not currently accepting answers.This question does not appear to be about the practice or profession of project management within the scope defined in thehelp center.Closed5 years ago.Improve this questionI have no experience in scoping things. The projects I've worked on since I've started have been scoped and I just do what is asked in the stories and features. My current task is scoping an upcoming project. This is a 16 year old, 500k+ line app.How do I begin scoping a project I have little knowledge of? I do not have much experience in the multiple apps it will affect. I'm overwhelmed and would just like a general process/tips on how to effectively scope something without missing major parts.I have one expert engineer on our team but he really is busy and very begrudgingly responds when asked things. I try to keep my questions to 1 every 3 days, so I group them. When I asked how to scope this, or in general where to start he just said open the code base and determine the hours for the project.| You need to clarify expectations of you. Both from the senior dev, and, more importantly, from your (presumably shared) boss.I have one expert engineer on our team but he really is busy and very begrudgingly responds when asked things. [...] When I asked how to scope this [he told me a way that's almost guaranteed to fail].You should speak with your boss, and clarify which of the following is true:The senior dev is expected to spend more time than he currently is mentoring you.It's also possible that you're reading more into the senior dev's reluctance than he intends to convey.You should consider talking to the senior dev first.You'reexpectedto fail. They want you to go out, flounder, fail, and learn, so that you do better next time.You're expected to succeed without sufficient guidance. In this case, I would suggest polishing up your resume so that you're ready to leave (ideally before things hit fans).
https://pm.stackexchange.com/questions/24969| When is it appropriate for a Scrum Master to raise low performance of team members to management?| I am the ScrumMaster of an engineering team. My opinion is that 2 of the team members are not performing at a level which I would expect. This opinion is formed with the following information:Daily stand-ups: they are generally not progressing through tasks and getting involved in sprint work like the others are.They are very pessimistic and constantly telling the other team members that it will be impossible to deliver on their sprint commitments.They truly find almost everything a joke and the constant failure to deliver on sprint commitments a failureThe other team members are active and productive, constantly raising their views, speaking up, picking up new work and keeping the team moving forwardThey don't appear to be interacting, pairing and being productive for most of the day.My question is, when (if ever) is it appropriate for a Scrum Master to bring these views to the attention of management or do I just continue trying to get the team to evolve and deal with this on their own?| It is appropriate for the Scrum Master to raise this issue with managementonlyif they have been asked to do so by the team.If you speak with management without first being asked to by the team then you run the risk of:Being seen as a 'spy' for management in the teamLosing the trust of this particular team member and possibly other team members as wellHaving management see you as a source of information on individual performance in the Scrum teamAs a Scrum Master I would typically wait until this issue is raised at a retrospective. If the issue is never raised at a retrospective then I would ask myself:Is this really a problem? Or am I just perceiving it as one?Does the team feel confident enough to speak out about this kind of matter at retrospectives?If the second option seemed most likely then I would speak with the team about the way self-organising teams solve their own problems and about how best to use retrospectives to do this.
https://pm.stackexchange.com/questions/34494| Agile team missing commitments regularly and complaining about no trust| I am on the product side and have an agile team that has missed every sprint commitment through the first 4 by between 40 and 60% measured by points.  The team continues to say, that it is OK and that the stories were mostly done and they'll just split and move stories forward.  We've already cut scope beyond what I think is really going to be possible.  At this point we only have 4 sprints left to achieve a minimal product and by every calculation I make that is impossible. Our team is widely distributed with multiple vendors.  I have asked for root causes of the problems and the team is pushing back hard saying that management needs to trust the team.The team keeps just telling me this is how agile works and that I just need to continue to adjust scope and we will deliver whatever we deliver at the end.How do we handle missed commitments in agile?| TL;DRMissed estimates are not an opportunity for blame, but rather an opportunity to inspect your process and adapt it to fit the requirements of your organization. The Product Owner, the Scrum Master, and the Development Team must all work together to learn from the failed sprints.MisconceptionsIt seems like the entire Scrum Team is working under some misconceptions. Let's see if we can't clear some of them up.[The] team...has missed every sprint commitment through the first 4 by between 40 and 60% measured by points.Nope. Based on what you're saying, the team has missed the first fourSprint Goalsby 100%. A user story is either done or not-done, and a sprint goal is either met or not met. There are no shades of gray.The team continues to say, that it is OK and that the stories were mostly done and they'll just split and move stories forward.Nope. As the Product Owner, it isyourjob to review the Product Backlog after each sprint and determine how (or even if) missed stories should be re-prioritized, and what stories should be placed at the top of the Product Backlog for the next sprint. In other words, nothing is "carried forward" unless you place it back at the top of the backlog.I have asked for root causes of the problems and the team is pushing back hard saying that management needs to trust the team.Nope. Blaming the team is not constructive, but asking the team to inspect the estimation or delivery process when there's clearly a process problem is extremely reasonable. In fact, it is part of your responsibility as the Product Owner to engage the Scrum Master and the Development Team in the various Scrum meetings to identify and remove roadblocks to successful project delivery.Root CausesI don't know what the root cause is here, but you need to involve the Scrum Master and the rest of the Scrum Team to find out. Some possibilities include:The Scrum Team is doing a poor job of estimating story sizes, and taking on more than can fit into a sprint.The Scrum Team as a whole may not be articulating a Sprint Goal that is both achievable and clearly defines what stories are essential to the current sprint.Retrospectives or other forms of inspect-and-adapt are not being performed to identifywhythe process is not working.The process is not respecting the time-boxed nature of the sprint or the Scrum framework.Transparency of the process is essential to the success of any agile implementation. The team isnotentitled to tell the Product Owner to mind his own business when stories accepted into a sprint are routinely incomplete at the end of each sprint.Closer Collaboration RequiredBased on what you havenotsaid, I'd wager good money that part of the problem is that you either do not have a dedicated Scrum Master, or you do not have a Scrum Master who is able to provide the education, feedback, coaching, and process adaptation necessary for a successful Scrum implementation within your organization.Even if that isn't the case, I certainly think you need to collaborate more effectively with the Scrum Master. Whatever deficiencies your team may or may not have, the relationship between the Product Owner and the Scrum Master is one of the most important aspects of the Scrum framework. Don't neglect it!
https://pm.stackexchange.com/questions/25064| What should a UI designer know and how to deliver this knowledge to him?| I manage a few development teams at the moment. Each team develops different projects for different clients.Right now I'm trying to let team leads work with clients directly without me, but the problem is that none of them has good experience designing UI. I do. We have a designer, who I'm trying to teach how to create UI the way I do. The problem is that she is neither into business nor into development, so her designs are quite typical: as beautiful as useless and/or difficult to implement.So, what do I do with designs? It consumes a significant portion of my time each week...Let's summarize:The designer creates interfaces that are difficult to develop. Okay, I've handled to her my own sketch design system and introduced to main UI frameworks that we use. She is getting better at this.The designer isn't into business. She doesn't know when it makes sense to spend money on more complex things and when we should just make it simple and improve when needed. Okay, I may be able to put this responsibility on the Product Owner.The designer doesn't know all the intricacies of a product, PO's vision and user feedback. What do I do about it? If I'll ask her to consume all this information, then she'll be spending more time learning the product, than actually designing it.| To be blunt about the answer, it sounds like the designer has a lot of crutches. If you want them to step own design (I'll assume you do or you wouldn't have hired a designer), you need to take those away. Now, before I get into the ones I see in your description, I should add that if you take them all away at once, you may just overwhelm them - you have to use your judgement on how quickly they can be self-sufficient or, better yet, discuss it with them and let them tell you.First, it is not ok for a designer to not understand how those designs are implemented in an application. Painters have to understand the intricacies of paint and canvas, the graphic designer has to understand how to design for applications. You mention PO, so I'm guessing your teams are practicing Scrum. If so, the designer is contributing to the product and is therefor a development team member. They should be in there each day making the product happen. There are many ways for people to share knowledge, but I've never seen one as good as pairing or group programming. This will not only let the designer feel when the designs are hard to implement, but will also help them learn the medium they are working in.Second, the team is solving a need for the business. No member of the Scrum team should be apathetic as to the needs of the business. They are only making an application to solve those needs. I don't know to what degree your team (including the designer) directly interact with the users and business, but I know when I was on a development team, having to own that solution when interacting with customers really changed my perspective and made me consider the business much more.With the designer, there's an extra thing that can really drive this home - rapid prototyping. In rapid prototyping (which can be as easy as building paper mock-ups), the team quickly puts designs in front of real users to start interacting with. This can let them get honest feedback before they get too attached to their chosen implementation.Thirdly, you may need to look at your own actions and try to see if you are accidentally introducing a crutch. When we make decisions or own a piece of the work for the team, they have a safety net. If they don't do it, they know you will. For this, I often point people to David Marquet'sLadder of Leadership. Working your way up this is a great way to shift ownership over to them and get those hours of your week back.
https://pm.stackexchange.com/questions/25184| How to deal with a team that fails to complete a task?| I had been in a situation where details about the task and the target to be followed have been explained to the team. However, in spite of multiple follow-ups, they fail to complete the defined tasks in the given timeline.They come up with reasons such as 'I was occupied with personal works', 'I was not well', etc.However, at the end, I will be responsible to answer to the client for the missed deadline. How to deal with this situation with the client and convince him?| There is a not a single answer to this questions. Its imperative to understand how a team should perform so that you can spot dysfunction and respond appropriately. You need to understand the dysfunction to address the problem.One resource that comes to mind is the book "the 5 dysfunctions of a team".While what you mention initially sounds like "avoidance of accountability" and "Lack of committment" this may come from a deadline that is ridiculous or other requirements that are overbearing but because there's an "absence of trust" the team can't talk about the issues and things end up derailing.I suggest you refocus yourself as aleader of people(regardless of your title) which is much more than a manager (of anything, people, projects, deliverables, clients, etc). It is how well you are able to lead that affects the performance of the team and acceptance of the client.Driving the team through control will fail and backfire as you'll invite the bottom four items in the pyramid. Servant Leadership will serve you better. (think agile, read about scrum master principles etc). Anything from John Maxwell on leadership is a good read.Another resource I'd suggest is "Extreme Ownership - How Navy Seals Lead and Win". It highlights that given two teams - one high performing and one low performing - swapping leaders shows that performance follows the leader (chapter 2 - No Bad Teams, Only Bad Leaders).
https://pm.stackexchange.com/questions/16278| Difficulties meeting client face-to-face| I am a remote project manager for company XYZ. For most of our past projects, we have no issues with managing the client's feedback; as always technology (emails, video calls etc.) plays a big part in bridging the geographical distance when it comes to communication.However some less IT-savvy clients almost always insist to have face-to-face meet-ups for project review. The in-house account manager will then have to go down but most of the time he/she does not possess the technical knowledge to handle some of the client's requests.I believe that in a conventional organisation structure this is where the PM will go down with the AM for such meetings. But for my case how can my company handle such a problem?| One of the keys to a successful meeting is having the right people in the room. That seems obvious but it's amazing how often it doesn't happen and you find yourself saying 'that's a question for Jane from the dev team' etc.Before the client meetings take place determine an agenda that covers everything that both parties are likely to need to discuss - a PM should definitely feed in to this because you will have questions too no doubt. From this agenda you can work out who needs to be present to cover off all of the points.Ideally all the relevant parties that you have identified will then be present for the face-to-face meeting. If they can't be (you don't sayhowremote you are) then the representative from your organisation should bring the appropriate equipment to dial the right people in to the call. Even the mostludditeoperation should be able to handle this - at worst you can be on speakerphone on a mobile. If it's a long meeting then the representative might only need to call certain people for particular agenda items.If getting this kind of thing set up is proving difficult then you need to communicate the value (to both teams) of up-front planning and having the right people in the right places. The alternative is duplicated meetings, wasted travel time, project delays etc etc.
https://pm.stackexchange.com/questions/8337| How can I manage team distractions like chit-chat?| I work with a team of developers who are talented but often distract each other with chit-chat. They can waste hours of the day with these 20-30 minute, non-project related jam sessions. Since I am PM on many of their projects I get frustrated with the lack of focus but I'm not necessarily in the position (nor want to be) to micro-manage them or reprimand them. Currently I just kindly interrupt their chat with questions about progress on specific items. This helps them get back on track, sometimes.Ideally the developers would have expectations that would require them to stay focused and manage their own work. I get a lot of resistance from attempting to setup benchmarks due to the nature of the current projects and management structure.  Even when I ask how long it might take to complete items (which I can complete in a very accurate time frame) I get negative feedback which indicates a desire to suppress accountability. Which incidentally facilitates a chit-chat filled work day.So while I encourage the business management team to give me tools to establish clearer expectations, does anyone have a simple or clever way to keep people from overdoing the symptomatic chit-chat?| Conversation is NotInherentlyDisruptiveI work with a team of developers who are talented but often distract each other with chit-chat.You say they are "talented but distracted." What makes you think they are talented? Why do you think they are distracted? What is your metric for determining that the team or the process is operating at a sub-optimal level?You haven't really made a case for any of those things, except insofar as we're supposed to agreeab initiothat "chit-chat" (which has a rather pejorative connotation) is disruptive to the project. How have you determined that the team's communications style is preventing your project from succeeding?Self-Managed Teams and the 100% Utilization FallacyIdeally the developers would have expectations that would require them to stay focused and manager (sic) their own work.While I agree that an ideal team is self-managing, I have no knowledge of your hiring practices, corporate culture, or organizational incentives for teams to be self-managing. However, the fact that you appear to be in a role where you are tasked with managing a team thatisn'tself-managing argues that expecting such may not be reasonable without changes to your organization or process.In addition, "staying focused" is often management-speak for "looking busy." As above, unless you can make the case that your team is failing to perform, it really does sound like how they behave is more important than what results they produce.In fact, by making "how" an issue, you're acting contrary to the very principle of self-management you seem to want. Even if the team is truly disengaged, your time would be better spent figuring out how to engage them rather than on ways to make themlookengaged.Developers are often odd ducks. Some developers work best in catacomb-like silence or working at 2:00am; others thrive on cross-talk and team engagement in the office. Regardless of work style, though, all developers need thinking time to be productive---more clicks on the keyboard (e.g. higher utilization) doesnotlead to more throughput or higher-quality code."Accountability" and Project ProcessEven when I ask how long it might take to complete items (which I can complete in a very accurate time frame) I get negative feedback which indicates a desire to suppress accountability.Again, your conclusion isn't based on information in evidence. There may be other reasons your development team doesn't want to give hard deadlines."Accountability" is a buzzword for a way to shift blame.If your organizational culture likes to affix blame, and projects are often late or otherwise doomed to failure, whyshouldthe team want to be held accountable?Commandments from on high aren't commitments.If the team isn't part of the estimation or scheduling process, then they are being "held accountable" for delivery dates that they didn't sign up for.  Ask yourself honestly whether developer estimates are solicited and honored as a project baseline, or whether project deadlines are set outside the team.Estimates aren't commitments.If a developer tells you something will probably take three days, but the job takes five, what happens in your organization? Is someone to blame? Does the developer get punished or denigrated for the mis-estimate? If so, why should they do anything other than slog onwards at whatever pace they feel is sustainable?Commitments aren't guarantees.Developers are rarely stupid. If they know something will take two weeks (due to complexity, process overhead, or organizational obstacles) and you think it will take two days, what's their incentive for giving you a different deadline? If the organization routinely cuts their estimates, and then holds them accountable, where is their incentive? If they give honest estimates, and fail to meet voluntary commitments through external impediments, does the organization expect a money-back guarantee in the form of unpaid overtime instead of trying to resolve the impediment?Even if we assume that your conclusion that the team wants to avoid accountability is true, you haven't dug deeply enough intowhy. There's clearly an organizational or process issue at work here, and solving the perceived problem isn't really addressing the root cause---or buying you anything ifyouare ultimately being "held accountable" for a project that is failing.What Next?Take an honest look at your organization, your project management process, and the members of your team. Try to be objective, and see if the incentives actually align with the interests of the developers. If not, start there!Holding a Scrum-like retrospective might help, too. If the real problem you want to solve is getting honest estimates from the development team, the only people who can tell you how to get them are the members of the team. Of course, you will need to earn their trust (if honest communication hasn't been the norm), and there are no silver bullets. Still, it's one of the best tools out there: ask the people with the actual answers!There are always other things you can inspect-and-adapt. Still, you need to start somewhere, and holding honest and open dialogs is almost always the very best place to do that.
https://pm.stackexchange.com/questions/25498| Daily Scrum development member taking too much time| A team member is taking too much time at Daily Scrums. What is the best way to resolve this issue as a Scrum Master?Can I intervene at the Scrum?| According tothe Scrum Guide:The Scrum Master teaches the Development Team to keep the Daily Scrum within the 15-minute time-box.One of the responsibilities of the Scrum Master is also:Facilitating Scrum events as requested or neededSo - yes. It is the responsibility of the Scrum Master to teach the Development Team techniques for an effective Daily Scrum and to keep it (and other events) to the timebox. You would do this by coaching both the team and the individual in the purpose of the Daily Scrum.However, before getting involved, I'd ask a few questions:Is the team achieving the purpose of the Daily Scrum within the timebox?Does the individual in question or the other members of the team see the problem?If the team can see a problem, do they have any ideas for solutions? If so, can these solutions be enacted? If not, why don't they see an issue?A Sprint Retrospective is a good opportunity to have this discussion with the team. Although if you are running longer Sprints or it's a very common issue that's impacting the team's performance, it's OK to have the conversation sooner.
https://pm.stackexchange.com/questions/8387| How can we combine time sheet in project server with scrum?| Our developers work withVSTSusing a scrum methodology and also with project server. Developers are required to enter their work hours in Project Server by time-sheets. However, they are not happy to complete their time sheets.How can we convince them that both are important? Or should we stop using time-sheets? We need the time-sheet data for data analysis that we have them with Cube in Project Server.| TL;DRIf the time reporting requirements are imposed externally (e.g. through contractual client requirements), then you need to communicate those reasons effectively to your team. If they are imposed internally by your own organization, then you need to examine your process carefully before deciding on your approach.Determine Value for the ProcessHowever, [the developers] are not happy to complete their time sheets. How can we convince them that both are important? Or should we stop using time-sheets?On some projects, and in some organizations, labor costing needs to be calculated. This almost never has direct value to the people performing the actual work, though---it's a tracking metric for budgeting purposes or for management reporting.This doesn't seem like it's the case for your project, though. The very fact that you ask if you should stop using time-sheets indicates that it is an optional metric. What exactly is the point of tracking something no one wants to report, and no one cares about if it isn't reported? That's called make-work!Other Ways to Report HoursIf all your staff are on salary, then the time-sheets are irrelevant. All you really need to know is whether stuff is getting done, not whether Fred charged 7.25 hours to Project X and 12.5 hours to Project Y---unless your organization forces you to track that way.Perhaps you can simply say something like:We had X people working full time on the features delivered this iteration.This milestone took the efforts of the entire team over the past 30 days.The trade-off is that you can calculate labor costs at a macro level in seconds, but you can't get at the granular details. Perhaps this is sufficient for your purposes.Alternatively, if all your people are hourly contractors, they need to give you an invoice or statement of hours anyway. Why not just use that, instead of requiring additional book-keeping? Again, the trade-off is simplicity vs. granularity.Unless you're doing complex accounting for matrixed teams who are simultaneously charging against multiple projects, why make the time reporting any more complicated than it needs to be? Just track your labor burn-rate against your project's budget and call it good.Possible X/Y ProblemWhile a project manager with budget-tracking responsibility needs to track labor rates on a project, how you track it and the level of detail you track depend on what you're solving for. Before doing anything else, you need to figure out why you need this information, and how you plan to use it.It has been my personal experience that this level of granularity is often used as a proxy (or worse, as a stand-in) for measuring productivity on a project. More hours charged to a project doesn't equate to faster delivery, nor do fewer hours intrinsically equate to process efficiencies.For example, a spike in hours might be a project smell indicating hidden process problems, increased complexity, or a higher defect rate. Then again, maybe not. As a metric, tracking hours onlydirectlycorrelates to money spent on labor; by itself, it tells you nothing about the status of a project's deliverables.Think carefully aboutwhyyou want or need to track hours the way you do. If you can't come up with a good reason for it other than "just because," neither can your development team.
https://pm.stackexchange.com/questions/26296| Should the Product Owner dictate what info the UI needs to display?| I hope someone can help me understand one part of the role of the Product Owner (PO).In my company, we have a PO that is responsible for the Product Backlogs of all our products. I work as a UX designer. The PO specifies features and requirements to the Teams.Very often, the PO suggests, in detail, how a user interface of our software should be, such as what type of information is to be displayed in the user interface (e.g. "I'd like to see a date in list" or "I'd like to see so and so in this view"). Often the PO has asked the customer, or knows already, but the product UI ends up being quite cluttered and complex.I am now introducing user testing to encourage user-centered design and advocate making better design decisions based on user involvement.My question is: to what extent should the PO describe the requirements of a UI? Should we (the developers and designers) look to the PO to decide and say what the information in the UI should be?| My question is, to what extent should the PO describe the requirements of a UI?To the extent that the designers know what to design and the programmers know what to program. In your example, "as a user I want to see a list of dates so I can..." seems to be a good user story. Who else would know what the purpose of that user interface is and what data the users need at that point.Should we (the developers and designers) look to the PO to decide and say what the information in the UI should be?Yes. Now the Product Owner might not be a technical person. That means you have to provide feedback on how hard it is to do what the PO requests so the PO can adjust the story accordingly. And you might want to bring in the experience of your job and maybe say "but studies have shown comparing dates is easier done in a grid than a list" or "but the design guidelines of the mobile device say it should never be blinking. Maybe we can use bold font instead?".But in the end, the decisionwhatdata to display is a clear cut Product Owner responsibility.Howit is displayed is the job of the dev team. Ideally, the whole Scrum team talks about this in theBacklog Refinement Meeting.
https://pm.stackexchange.com/questions/17456| Alternatives to individual standing up in the "stand-up meeting"?| I'm experiencing persisting pain in the back, and it's medically proved that it's present and that it will never improve but only degrade. I can stand for 5-10 minutes before the pain starts to be unbearable. My whole team is totally aware of the situation.Needless to say then that a stand-up meeting that is longer than 5 minutes (which happens rather often) is like a suffering to me and soon turns into a torture. Yet when I'm looking for a chair, my team (both the PM and my colleagues) insists I keep standing up, and the social pressure makes it hard for me to sit.I've never read any book nor followed any scrum training so I don't know the first thing about it (I'm practicing it following the current, one would say). Therefore I'm asking you what does agile/scrum suggest in my case?| Hope some of these work for you and you start getting relief – and respect. I'll tell you my experience first and how I made the best of it, and then I have a game plan for you to do first thing tomorrow.TL;DR: Skip to the Last Section - Game PlanMy Very Similar Situation: 5-Minutes in Stand-Up HellMy last company was amazing, I joined a small startup of 12 always going for the newest proven agile process. So of course when I started (about 5 years ago), stand-ups were IN.Same thing as you – once I hit 5 minutes exactly, I cannot physically stand anymore. Those 5 minutes ruin my entire day, making any position, even seated at my desk (for the next 12 hours) unbearable.The actions I took to get through the stand-up (and improve my quality of life in general) were:1.Taking care of myself andgetting proper back treatment:I see an amazing group of doctors for physical therapy, pain management, injections, etc.2. On my first day,I told my supervisor (and then all my colleagues) the facts:Just a heads-up for stand-up meetings so that I don't come off as unprofessional or uninterested in our morning brainstorm and update sessions: I have a back problem that prevents me from standing for more than 5 minutes.(People rarely think that's a real thing, so sometimes we both laugh and I say, "no, really though."I do a, b, and c to manage my pain and stay healthy. In order to maintain the progress I make, I won't be standing in stand-up meetings, but I will DEFINITELY be a top participator. Just wanted you to know why. Thanks for your understanding!3. In the meetings themselves: I made it a point to do everything I could to be:Prepared and On-Time: Obviously everyone should be. But being in an outsider-type position already, this is key. Up-to-date on all current releases and major issues, and prepared with concise and pertinent updates to give.Present and Respectful: Made sure to be an active listener and participator, whether or not I had had coffee yet.Positive and Source to Pump up Team: Humor and sarcasm are my go-to defense mechanisms anyway, so I let those fly when appropriate, but mostly do my best to bring in positive energy.Physical Positive Energy Source: Along with that note, I always say up straight, right in the middle of things. It's very important not to be outside the circle, sitting 3 feet behind everyone. You can't be shy about loudly pulling a chair across the room. Plus, once you do it a few times and everyone understands, everyone joins in including you in one way or another. Switching up the location, offering me a stool, or saving me the window ledge. I'd also bounce on my yoga ball or balance on a desk.As a team everyone worked to make the stand-ups more efficient and fun.We were always tweaking them – constantly making process and content changes, often switched up the location. We also introduced a sort of "pass the totem" exercise with toys and awards around the office. (And yes, the awards were also toys).I know I was lucky to work for such a great start-up that kept its culture as it grew exponentially. It sounds like one of two things is happening with you.Your team is not so great, and you are not so lucky.Time to make a change.You haven't beenextremely direct, honest, and demandingof theworking conditions you NEEDto function.If there's a chance you maybe mumbled, or said "I have trouble standing for 10 or 20 minutes," or (the most likely)you keep letting them tell you to stand,thenthis is on you.And that sucks. Especially since you probably did none of those things, yet you are being treated this way. And it sucks more for women, and you need to speak twice as loud with not even a trace of what could be construed as "emotion" or "bossiness" or the ever-loved "bitchiness."So here's my game plan for youAvoid the daggers and social pressure and bullshit that occur when you hit your limit and desperately search for a chair. Get to stand-up 5 minutes early tomorrow. Find a chair and place it right in the normal area. Happily greet people as they roll in.Have a one-on-one with your supervisortelling him your version of what I said in my #2 above. You physically cannot stand, it's no reflection on how you feel about your team or your level of involvement. Tell him being pressured to stand doesn't just make you feel disrespected and less likely to get involved during the meeting, but the pain literally ruins your entire day and thereforeproductivity decreases for the whole work day. Describe all the ways that you will bring a, b, c (akin to my #3 list) to every meeting.If after conversations with him and your other colleagues, you don't find yourself in a haven like I described,it's time to update that résumé. (And possibly sue HR, although I have no knowledge on how that process would go).Good luck and I wish you as much pain relief as possible!P.S.: Do they not get that Agile and Scrum are all about constantly making changes to become more efficient – and NEVER sticking to hard and fast rules for the sake of "that's how it's always been"? A tad ironic that they really have a problem with body position for 5 minutes of all things.Agile and Rigidity do not work.
https://pm.stackexchange.com/questions/17489| How to make a retrospective focus on certain issues which I have already identified| My team has certain issues which I have already determined, namely:They are not pairing enoughTheir cycle time is very highThey break timeboxed tasksThe team is not splitting QA work equally, they assume the QA guy needs to do it allGenerally the team is working quite slowly.How can I have a retrospective to bring this to the surface but not hurt any feelings i.e. the retrospective needs to address the high cycle time essentially and these issues.| Remember that the goal of an agile team is to be self organising. To achieve this they have to have the opportunity to identify their own faults and come up with their own solutions.It can be very tempting to step in and guide the retrospective. But this runs the risk of removing the responsibility from the team to fix their own problems, which can be counterproductive. There is nothing wrong with suggesting solutions, but you want the team to spot the problems.As a Scrum Master, when I identify problems I will typically try and find some way of highlighting them. For example, if the team is splitting stories across time-boxed sprints I would start to track this and make the results visible. Usually the team starts to address the problem once they recognise it.Reading through your list, it surprises me that none of these items have been mentioned in the retrospective. For example, has the tester not commented on the the way the QA work is being divided up? Has nobody mentioned that they are breaking tasks across the time box?Perhaps the format of retrospective you are using does not encourage team members to speak out? This is one of the reasons a common approach to retrospectives is to have the team members write their feedback independently at the start of the retrospective. Then the team as a whole discusses each item in turn. This ensures that everybody gets a voice.
https://pm.stackexchange.com/questions/8696| project work with difficult client| My company takes in projects from a variety of clients in the region I am in.  One of these clients is a firm that kind of competes with us on some things, but in other ways we cooperate.  The relationship there is complex.  Anyway, I am managing a project where our development group configures and dumps a bunch of stuff onto their server for them.  It's actually pretty drab work.  It should also be noted that there is a pretty tight timeline on this particular project.  We have about 2 weeks from getting the project to deployment.Before we get the project, I collect the requirements, document the scope in a statement of work, and get it signed by all involved.  A week goes by and we start executing the project according to the agreed upon scope.  So now we have one week left.  We have a meeting this morning and lo-and-behold - he starts trying to add a bunch of features.What else can I do to ensure that we get as much of the requirements as possible up front?  My business unit really isn't in a position to reject work; we could definitely use the business.  I should also add that the other guy is pretty new to the job, and comes across as such.  He also might have a small-man problem, in that he might be trying to show us all that he's large and in-charge of the project (although this is immaterial to the question).So here's the question:How do you handle people who obliviously try to add and change scope at the worst possible time in the project life cycle?| I agree with CodeGnome's well-founded comments about change control procedures. However the scenario you described and your question could occur regardless of how effective your change control procedures are. For now let's assume you have good controls in place but are still concerned about "how do you handle people who obviously try to add and change scope at the worst possible time in the project life cycle?"There are several issues in play here.Is the project at risk due to a lack of accurate requirements?By asking "what else we can do to ensure that we get as much of the requirements as possible up front?" you suggest that maybe these are valid requirements that were missed.  So here are some things to think about:You had the right process in place (engage, document, and sign-off). Did you produce the right document? In a two week “configure and dump” project should there be Requirements and a Statement of Work or an actual Specification? If the Statement of Work was viewed as a specification by everyone than the situation is different than if you are working with a less definitive set of requirements mapped to deliverables.The most obvious next place you might look is whether the process involved the right people? Compare the source of the original requirements to theactualsource of the requirements that are arising now (this may take some detective work). Compare the people who signed off on the project to the people behind these new issues. One of the most common problems I see with requirements gathering is involvement of the wrong people within the customer's organization. Requirements are relayed by someone in IT who heard them from a manager who heard them from a programmer or an end-user. Then someone with no real understanding of the requirements signs the specification.Even if requirements were missed, are they important enough that their exclusion places the project at risk? One thing is for certain: adding requirements at this stage in a two week project will definitely place the project at risk. With a two week “configure and dump” deliverable this is not a question of staying with a sprint. Either the deadline mattered or it didn't. Either these requirements are critical to success or they are not.Sometimes the client has a valid point in saying “you guys are the experts and should have known while we don’t even understand what questions to ask.” That does not seem to be the case here. The client is also expert in the field and competes with you for business. Frankly it sounds like you should have been given a specification as opposed to having to document the requirements.If requirements were missed it might provide an opportunity for process improvement while still meeting the deliverable date by sticking to the original requirements.Why is this person causing disruption?You started to voice a question but pulled back: "What is the motivation of this person who is causing the disruption?" You mentioned that he is new, and that he might have issues with establishing his control.  I think understanding his motivation has everything to do with handling the situation. Does this come from a fear (or knowledge) that he made the mistake? Is he really just trying to establish his control? Most of the time I see this type of disruption coming from someone who is unsure of the stance that they are taking and almost asking for push back that reassures them you know what you are doing.How does a project manager effectively control disruption?I am sure that it is this human factor of understanding the stakeholders in a project that makes the difference between success and failure. A computer could replace the project manager if consideration to the human factors was not important. Understanding why someone is disruptive (be it change requests or something else) is the best chance you have at maintaining control. Ultimately the other person will benefit from your insight.
https://softwareengineering.stackexchange.com/questions/107523| Managing software projects - advice needed| I work for a large government department as part of an IT team that manages and develops websites as well as stand alone web applications.We’re running in to problems somewhere in the SDLC that don’t rear their ugly head until time and budget are starting to run out.We try to be “Agile” (software specifications are not as thorough as possible, clients have direct access to the developers any time they want) and we are also in a reasonably peculiar position in that we are not allowed to make profit from the services we provide. We only service the divisions within our government department, and can only charge for the time and effort we actually put in to a project. So if we deliver a project that we have over-quoted on, we will only invoice for the actual time spent.Our software specifications are not as thorough as they could be, but they always include at a minimum:Wireframe mockups for every form viewA data dictionary of all field inputsDescriptions of any business rules that affect the systemDescriptions of the outputsI’m new to software management, but I’ve overseen enough software projects now to know that as soon as users start observing demos of the system, they start making a huge amount of requests like “Can we add a few more fields to this report.. can we redesign the look of this interface.. can we send an email at this part of the workflow.. can we take this button off this view.. can we make this function redirect to a different screen.. can we change some text on this screen… can we create a special account where someone can log in and get access to X… this report takes too long to run can it be optimised.. can we remove this step in the workflow… there’s got to be a better image we can put here…” etc etc etc.Some changes are tiny and can be implemented reasonably quickly.. but there could be up to 50-100 or so of such requests during the course of the SDLC. Other change requests are what clients claim they “just assumed would be part of the system” even if not explicitly spelled out in the spec.We are having a lot of difficulty managing this process. With no experienced software project managers in our team, we need to come up with a better way to both internally identify whether work being requested is “out of spec”,  and be able to communicate this to a client in such a manner that they can understand why what they are asking for is “extra” work.We need a way to track this work and be transparent with it.In the spirit of Agile development where we are not spec'ing software systems in to the ground and back again before development begins, and bearing in mind that clients have access to any developer any time they want it, I am looking for some tips and pointers from experienced software project managers on how to handle this sort of "scope creep" problem, in tracking it, being transparent with it, and communicating it to clients such that they understand it.Happy to clarify anything as needed.I really appreciate anyone who takes the time to offer some advice.Thanks.| The thing to remember is that the product originally requested is very rarely the product the customer actually wants. 80% of it will never be used and the other 20% of it will be used differently.Changing requirements as the project goes on almost always allows the customer to end up with the product they needed, rather than the product they wanted. This is good. For you and for them.But they do need to understand that each new requirement will cost them an old requirement (or delay the project) and they should always go through a Product Owner, who is managing both the long-term plan and the current sprint (which should not be changing unless it really has to).Get a backlog of high-level stories and point-score them -- break these down only as they come close to the top of the pile. Also, start a burn-down chart. Put all this stuff in a place visible to the customer; if that means an electronic copy, fair enough, but if they regularly visit your office then cover the walls with whiteboards and put the info there, where everyone can see it and be driven by it.This will serve to teach them about cause and effect. When they can see work is being checked off but the burn-down chart is not moving in the right direction, it is very easy to explain to them why. And if it isn't then it is your team who needs to question their estimates.More often than not, such projects are driven by deadlines rather than features, so the customer can look at the features they've asked for and start thinking "hold on, this feature isn't that important, we should lose it to make sure we hit the deadline."Finally, teach them that the sprint should be sacrosanct. Once they've requested something be delivered in this sprint, the cost of changing their mind should be greater than changing their minds about the future plan. Add a 3-point job to the current sprint and you should remove a 5-point job from it.
https://softwareengineering.stackexchange.com/questions/109551| How do I convince my fellow devs to WANT to add comments to source code commits?| I know that Subversion (what we're using at work) can be configured to require comments on commits, however I'm not in a position of power to simply turn this on.  I know thatmyreason for commenting my commits is because it is useful, if only as a memory-jogger, to quickly understand the reason behind the commit.  However, this doesn't seem to be enough to combat the two responses I always get:It takes too long and I just want to get my changes into the repo.It's easy enough to just look at the diffs.I even show them the value of simply putting in a JIRA issue ID and how it automatically gets tied to the issue, but still no dice with them.Worst of all, the person whocanmake the call is in the same camp: doesn't want to bother and is fine with looking at diffs.I know it's the right thing to do, but how can I make them see the light?  Even if I can't convince my fellow devs, how can I convince management that it's the right thing to do for the business?| Focus on "Why". Its all very well looking at the diffs and seeing that someone changed the logical flow of a section of code or something like that, but why did they change it? The why is usually in the associated ticket (JIRA for you).They may wonder why the "Why" is important but in 2 years time when you have caught some bug that is a knock on effect of that change, knowing why it was done is incredibly important for not only fixing your new bug, but making sure you don't cause the old bug to re-emerge.There is also the auditing reason. Binding commits and ticket id's make it really easy to say ok, we're pushing out Version 2, this fixes defect 23, 25, 26 and 27 but there are no commits against defect 24 so it is still outstanding.
https://softwareengineering.stackexchange.com/questions/111290| How do I convince my boss to use REST over SOAP? [duplicate]| This question already has answers here:What are the deciding factors in choosing to expose a web service as a SOAP or REST service?(7 answers)Closed11 years ago.We need to create an API to our system. How do I convince my boss that REST is a better option than SOAP (or XML-RPC)?I say REST is...easier to implement and maintainnot much new to learn -- plain old HTTPlot of people have chosen it Yahoo ~ Facebook ~ Twitterwill be lot quicker to codeMy boss says SOAP is...richer and more expressiveit's all standard XML (SOAP, WSDL, UDDI) -- and so will be easier to consumewell standardized than RESTGoogle uses a lot of SOAPit is important to adhere to SOAP standards than to create a custom XML schema in REST| From a guy who's used both SOAPandREST extensively...BOSS says SOAP is...richer and more expressiveAnytime someone says a product is "rich" I want to become violently ill. I can't think of a more cliche comment to make about a technology or platform. Basically you're saying "I think this product is great,but I don't have any actual facts to back it up." I don't know what he means by "expressive" so I can't really comment on it...it's all standard XML (SOAP, WSDL, UDDI) -- and so will be easier to   consumeThis is patently false. SOAP can be finicky, especially when you get into things like complex types and authentication headers. This is especially true when you start doing cross-language communication - getting PHP to properly consume and communicate with a .NET SOAP service that was using complex types and authentication was an exercise in keyboard-snapping horror that makes me wake up in a cold sweat to this day. REST is definitely easier to consume - you just provide the URL and done! You have your data! There are some drawbacks to this, depending on your needs, but for many web services this all that's needed.well standardized than RESTIt is "standardized" by the fact that it has a schema. That's it. Aside from that, you'restillgoing to have to work withsomebody else's data, which is never a picnic no matter what communication protocol you use. And REST has a standard -its called HTTP. It works pretty well.Google uses a lot of SOAPTheyusedto use SOAP (they may for some products still, but not many). The majority of their web services are solidly REST-based. Here's a link showing thatthey abandoned a SOAP servicein favor of REST.it is important to adhere to SOAP standards than to create a custom   XML schema in RESTThis sounds like one of those comments made by superiors with limited understanding of the actual technology at hand. There will only be one part of the SOAP packet that is standardized - the message header, and the body wrapper. Everything in between is your own XML. You still have to create your own message. The message itself is not conforming to specific standard. It is still a serialized object or group of objects.As a closing note, SOAP versus REST is a big topic, one without a concrete answer and you'll probably get different answers depending on who you talk to. In fact, Ican't say for certainthat in your particular case that RESTWILLbe better but I can say that your bosses arguments are weak and are indicative of a lack of understanding about the distinction between the two. I've used both technologies and my hard and fast conclusion is this: there is no hard and fast conclusion and, like so many other tech decisions, it depends on the needs of organization. The best solution, truly, is thoughtful research, an open discussion between the people working on the project to find thebestsolution, and an honest look at your needs.Here a few links to existing discussions that may be beneficial.https://stackoverflow.com/questions/3285704/should-a-netflix-or-twitter-style-web-service-use-rest-or-soaphttp://www.prescod.net/rest/rest_vs_soap_overview/https://stackoverflow.com/questions/209905/rest-and-soap
https://softwareengineering.stackexchange.com/questions/112451| Should a developer argue against unnecessary or harmful features?| What is a good attitude from developers when discussing new features, and namely, non critical/questionable features?Say you are developing some sort of Java like language, and the boss says: "We need pointers so that developers could fiddle with object memory directly!"Should the developer shoot down the idea because it adds unimaginable complexity and security vulnerabilities, or should he do what's asked?This may not be a good example, but what about things that are more in a gray area, like adding buttons that break workflow, or goes against internal structure of the program, etc.?What is the optimal "can do" vs. "can't do" distribution for a regular programmer?EDIT: The question is not about a bad boss :DI was more interested how do people approach new problems that add a noticeable amount of problems while maybe being marginally useful.Should the general attitude be:yes we'll do it, screw the complexitymaybeno, the general rework, and implications don't justify the changeWhat should be the reaction of a good developer?| Best thing is to have a meeting andlay out the pros and consas a group, and based on that discuss the best solution. If you have a team, get them to agree on solution. Once a team agrees on something, managers and "bosses" tend to go with the solution.If your boss still does not agree, then you've done all you can do: you've gotten your team and managers together and covered the pros and cons and despite that your boss chose a potentially inferior solution.The key to this is discussing the pros and cons as a group. By doing so you are discussing what the best solution is with your team, and at the same time are pointing out your boss's decision (before he makes it) without the political backlash of going around after the fact telling people why you think your bosses decision was the wrong one.This is a tender situation involving work politics, but it can be handled amicably.
https://softwareengineering.stackexchange.com/questions/336351| How can I promote and encourage high quality code?| I work as an iOS developer in a small outsourcing company in a team of 4 people. We work on a project that started a couple of years before I and two other developers joined the company. Before that the project was mostly being done by one person.When I started working on the project it was a complete mess. There was a lot of code repetition. I saw the same 500 of code  coped to 20 different files with minor variations. Additionally, it wasn't exactly well organized: all UI creation code was mixed in the view controllers together with the logic.I tried my best to refactor things here and there, eliminate redundant pieces of code, improve project's file structure and so on. It felt like the previous developer didn't really care about all these things or didn't have the experience. There was a time when I worked alone on a pretty big feature for a couple of months. Due to the nature of this feature I had to touch a lot of code across the whole app, so I did attempt to make some improvements.When other developers joined the project, I noticed that they use a different coding style (sometimes acompletelydifferent style) and often don't use modern language features like property accessors (this is relatively new in Objective-C). Sometimes they would invent their own bicycles instead of using similar features of the framework, or transfer concepts from other programming languages or patters they learned into our code base. Oftentimes they can't name methods or variables properly because of bad English (Objective-C is a language where you make long names).Sometimes I think if it wasn't for the IDE I think they would write all code with no indentation or formatting at all.Basically, I hate the code they write. It's badly formatted/organized, and sometimes is radically different from the rest of the project. I feel very upset when they add their spaghetti to my piece of art and it affects my mood at work and my productivity.It feels more and more like they can't be bothered to learn or don't care: they just do what's required from them and go home. I tried to give them a few tips when I had an opportunity (e.g. commented their PR or commits on GitHub). I once asked nicely to follow the coding style and formatting of the majority of existing code (sadly we don't have a formal coding style document). But it didn't work...How can I address this situation without just focusing on 'bad company culture', 'inexperienced graduates', etc. and actually start to improve the situation.| Teach and Practice what you preach.You know this stuff is important.  You know the downside when it isn't done right.Now the challenge is to convince others.  This will not be done through a single conversation, a meeting, hallway conversations, tips or within a Pull Request.This needs:Public acknowledge by management that these items are importantLinters so that people can get together, hash out and agree on style and then let computers do the policingLead developers who fully buy-in and are willing to teach othersMeetings, demos, lunch and learns, etc to teach these approachesPeople being measured on the quality items you mention during their reviewsDocumented and published standardsPull Requests having many reviewersPull Requests not being merged until code quality is highFrequent code pairingGroup code reviews for complex PR'sIn word it requiresLeadershipThe good news is that all these activities are generally recognized as good practices so when you go to promote them or get buy-in from management you should have a good chance success and should be able to defend doing the right thing.  Management might still not buy in however, that's another topic and question.
https://softwareengineering.stackexchange.com/questions/11349| What should we do to make Morning Standup meetting better and effective| Here in my office, we made it a practice to come before 9 AM (in any condition as decided by management) and start with a Standup Meeting. Here we start with discussing with issues of previous day, any updates from manager (by leads) and the work plan for today.This meeting may sound good and process oriented , but some times if there is a show down then it ruins the morning mood or if there is a difference in opinion then again it is not a good thing to start with.So, HR and Management decides that initially we will discuss personal matters  for 10 to 15mins and then we will jump to technical and official discussion.For 15 minutes everyday, are you serious , I don't get a topic to discuss for 15mins every day with my lead who is much older than me and never discussed anything in personal till now and you want to start with it just like that!!! So it is back to square one. Every one (Amazingly in all the teams) is discussing again technical aspects only in the morning /stand up meeting.So here it comes, today I have a lunch with management and the topic for discussion is:How to make Nice Day(Morning/Standup) meetings effective?| In my experience, the best way to improve standups is to follow the rules exactly.  A lot of agile practices can be bent, but if you're having trouble, a good first step is to return to the prescribed way of doing it:Stick to 15 minutes for the entire meeting.  People get bored easily, especially at mandatory, team-wide, daily meetings.Have each person say what they did yesterday, what they're doing today, and anything blocking them.  Nothing else.  This keeps it on topic and to the point.Have a team lead or senior developer (not management) lead the meeting, and be agressive about keeping things on topic as well as telling people to take discussions offline as they become too in-depth.
https://softwareengineering.stackexchange.com/questions/215939| Participants in Agile retrospective| Who should be the participants in retrospective? Will it be only the team members OR should the Product manager, all the stakeholders and dependent teams also participate.I am of the opinion that only the team should meet to discuss in retrospectives, else all team members will not open up. But one of the managers insist that all the stake holders should also be included.| Who should be the participants in retrospective? Will it be only the   team members OR should the Product manager, all the stake holders,   dependent teams also participate.The purpose of the retrospective is for the scrum team to evaluatetheirperformance during the sprint. In this meeting they can discuss:What went well during the sprint?What went wrong during the sprint?What the team could do differently to improve?The project stakeholders and product manager should not be involved as they were not part of the Scrum team on a day to day basis. The retrospective is for the scrum participants.In my experience, I have found that stakeholders and product managers are not concerned about technical matters, development practices, hardware issues etc. which the development team encountered during the sprint. Their main concern is that the Scrum teams are producing the correct product, and they find this out during the product demos.As for other dependent teams, they too should not participate in the retrospective either as they did not directly participate. However, a member/members of the Scrum team should, along with the Scrum master, definitely regularly participate in Scrum of Scrums with other dependent development teams to ensure that other teams are aware of progress, and so that knowledge can be shared.
https://softwareengineering.stackexchange.com/questions/219070| How do I get people to stop bikeshedding (focusing on trivialities)?| I have been tasked with teaching other teams a new codebase, but I keep running into an issue. Whenever I go to actually walk through the code with people, we don't get very far before the entire exercise devolves into abikeshedding(members of an organisation giving disproportionate weight to trivial issues) exercise. Since they don't know the codebase, but think they need to help improve it, they focus on the things theycanunderstand:Why is that named that?(2 minutes to explain why it's named that, 10+ minutes debating a new name)Why is that an abstract base class rather than an interface?(2 minutes to explain, 10+ minutes debating the relative merits of this decision)...and so on. Now, don't get me wrong - good names and good, consistent design are important, but we never get to discussing what the code actuallydoesor how the system is designed in any meaningful way. I've done some meeting refereeing to get people out of these tangents, but they're gone - distracted by what the code will/should be when their pet triviality is fixed, and they miss the bigger picture.So we try again later (or with a different part of the codebase) and since people didn't get enough knowledge to overcome the bikeshedding effect, it repeats.I've tried smaller groups, bigger groups, code, whiteboarding, visio diagrams, giant walls of text, letting them just argue it to death, cutting arguments short immediately... some help more than others, but nothingworks. Hell, I even tried having other people from my team explain it because I thought it might be that I'm just bad at explaining things.So how do you educate other programmers enough that they stop fixating on trivialities and can meaningfully contribute to the design?| I think the problem is the task: "I have been tasked with teaching other teams a new codebase".You have been given the wrong job, or maybe misinterpreted the job you've been given.By presenting at the code level, you invite code level thinking.Start at the system level and present the design and the design choices that were made. Don't allow extended discussion: you are not reviewing it. Do allow questions: you do want them to understand the system. If people "would have done it differently", fine. Maybe agree. Or not. But move on. It's the way it is right now.When you get to the code level, you will have already got them primed with the system terminology. The names (I assume) will make sense. Same as above: no extended discussion, questions for understanding. Move on.Now set some class problems to work through. How can we make enhancement X? Choose something non-trivial that "goes with the flow" of the system design, and work through what you would change. They should be getting the rationale of the system now. Choose another enhancement that could break the system if done wrong, and show how it can be done right. That should be anAh Hamoment for them. Some might even beat you to it!It's a tough gig, especially after the false start you've had. Sounds like you've invested a lot of time and effort already, and maybe there is a bit of a me versus them feeling. 'Fess up, and start again. We assume that they are smart people. Give them the challenge of thinking at the higher level. And break up the groups that already exist by selecting different cross sections of teams for the new sessions.
https://softwareengineering.stackexchange.com/questions/117261| Is there a way to combat Sales perpetually overcommitting? [closed]| Closed.This question isoff-topic. It is not currently accepting answers.Questions seekingcareer or education adviceare off topic here. They are only meaningful to the asker and do not generate lasting value for the broader community. Furthermore, in most cases, any answer is going to be a subjective opinion that may not take into account all the nuances of a (your) particular circumstance.Closed9 years ago.Improve this questionI seem to be repeatedly stuck in a situation where release dates are set not based on anything technical, but because someone in Sales has committed to a customer by then.  Based on discussions with friends in development at other companies, the same thing seems to happen."Here is the committed feature set and here is the committed release date", and it's difficult to argue because at this point there is money riding on it, and that trumps everything.In general, is there a way to push back on this?If not for this release, what about in future?  The problem I have is that the only way I see one way of doing so, and that's by doing the best I can, but release the software 'as is', so to speak.I don't want to release bug-ridden software since it's my name attached, but doing 80 hour weeks for months at a time just vindicates the arbitrarily set release date.edit: for the record, I'm not doing 80 hour weeks now, just that comes to mind as what would be required to cover the expected feature set by the release date.| Stop doing the 80 hour weeks.This is positive reinforcement. Because they are getting the product on time with expected costs, they are going to continue doing it, regardless of what it does to you.If they cannot budget time properly, then that's management's fault. Not yours.Let them miss a few deadlines.
https://softwareengineering.stackexchange.com/questions/120152| What resources about business should an internal IT department programmer be familiar with [closed]| Closed.This question isoff-topic. It is not currently accepting answers.Questions seekingcareer or education adviceare off topic here. They are only meaningful to the asker and do not generate lasting value for the broader community. Furthermore, in most cases, any answer is going to be a subjective opinion that may not take into account all the nuances of a (your) particular circumstance.Closed10 years ago.Improve this questionI am developer / analyst in an internal IT department at a medium sized business. I have to deal with business people all the time and many of the things I create can have profound impacts on the business. I am starting to regret not taking any business classes in college because I don't understand the first thing about running a business so I don't always understand what people are wanting, the best I can do is "think through it".Does anyone have suggested methods of learning this stuff, maybe some resources. And please don't just say to ask people who work here. I have tried that before and I get no where.| The people you work withareyour best resource for understanding their business needs. Businesses get and keep a competive advantage by doing things differently than their competitors, you won't find that informtion in books. Perhaps the problem is how you ask them or what you ask them.First, many developers come across as arrogant idiots who think everyone else is stupid. This attitude tends to make people less than cooperative about helping you learn. So first things first, check your attitude and your body language and your tone of voice when talking to the users to get requirements.Next, find the person who has the most stake in the product you are tasked with developing. Have him or her give you a Power Point presentation on the business needs the application will meet. Tell him that you need a better understanding of what they do in order to help them do it better. This is not in the terms of the requirements but just in terms of an understanding of what the jobs of the users who will be using the system are. Ask if there are regulartory requirements they have to follow. Ask to get a copy of them or a link to them if it is too much to print out.Ask about industry trends; subscribe to reading lists about your industry (I read the news in my industry, it helps me make suggestions for possible application changes that can keep us ahead of the competition).If the product contains data that will need to be audited, talk to some auditors about what they need to see and more importantly why they need to see things that way. Learn something about IT auditing, it is an interesting field that will serve you well in developing business applications. Pay particular attention to the concept and practice of internal controls. These are critical in any financial application.Spend some time observing the actual users right now as they work. Take notes. You will see many things that no one ever thinks to tell you in a meeting. Don't just talk to managers about what needs to be done. Talk to the actual users where-ever possible. Invariably they will perceive the application differently than managers will. It has to work for them though in order for the managers to see the data they want to see. Ask them what problems they have with the current solution. Again  they will tell you things the managers would never think to tell you.Getting back to the managers, ask about reporting needs. Business applications tend to have a data entry need and reporting need. You aren't done until both have been discussed. It does no good to put data into a database if it can't be gotten back out in the way the managers need to see it.When they tell you something needs to happen that you don't understand, ask for further details.  Ask what problem they hope to address with this change. Often you will find that they are suggesting  a solution that won't completely solve their problem. In fact always ask for further details, it is a rare user who will tell you everything you need to know without extensive questioning.Pay attention to edge cases when you talk to them. If they say something needs a managers approval for instance, ask what needs to happen if the manager doesn't approve.Ask for reading material or websites that talk about the professional needs of the users. Ask for copies of any corporate regulatiosn that affect the application, any laws or government regulations that affect the application and any paper forms that data entry people will be entering data from (It's amazing how much easier it is to enter data when the form and the paper form have the fields in the same order, I was entering voter application data once and the form was firstname  lastname and the data entry weas last name first name, imagine how many errors that creates.).Talk about what information the user needs at his or her fingertips at all times to do a good job. Do the tasks need to be done in a set order or can they skip around?Finally, sketch out prototypes and take them back to the stakeholders and discuss again. Often people can't visualize very well, help them see how the program will work before you spend any time building it. Do this on paper as a very rough sketch, so they don't think that just because you have a pretty page built that the application is finished. Users think the Interface is the whole application, if it looks finished, it is finished in their minds.Start building a list of questions to ask that show you are thinking beyond the data entry. Ask about security of the data, how private is the data and who should have access to see or change it. Think about how the application will work over time not just what needs to be there for launch. Do you need admin pages to keep the drop down lists up-to-date as the items to pick from change?
https://softwareengineering.stackexchange.com/questions/224389| Questions about the issue of getting stuck in a problem, and making snail's pace progress [closed]| Closed. This question isopinion-based. It is not currently accepting answers.Want to improve this question?Update the question so it can be answered with facts and citations byediting this post.Closed9 years ago.Improve this questionLet me describe my background.I am currently a software developer co-op working at an architecture firm that has a large focus on research and development, mainly in mathematical modeling and physics simulations in better aid architecture design.I am one of the three main software developers. Realistically, we're all people that specialize in different topics, for example, one developer is an architect that's been programming and doing mathematical models since he was in high school (he's like 30 years old), and the other architect also has a Masters in data analytics. We all specialize in different things, making us part of a very multi-disciplinary group of nine people in total.Currently I am working on a project that handles Grasshopper 3D and Rhino 3D programming, making use of the Grasshopper SDK. I really enjoy what I am doing and appreciate the learning opportunity, however, with that said, the nature of Grasshopper programming has been difficult for me.I don't think I am that poor programming-wise, however, since most of my projects involve extending functionality beyond what the default Grasshopper SDK does, there are often times I have to spend a good couple hours or even days to understand a problem and then apply code to it. The very nature of this "functionality beyond what the default Grasshopper SDK provides" means that finding a solution to a problem isn't as simple as Googling, because of the relatively rare resources available, whether it's documentation or help threads online.The nature of getting stuck on an issue and the only remedy to said problem has been slowly chipping away at my confidence, and I evidently see that I am slowing down in shipping out components (that's what Grasshopper 3D "tools" are called).I've already made a good impression in the first couple months of my co-op in being known as efficient, quick, and comprehensive, however, in my three month review, once I began this task of working on Grasshopper programming, my advisors have noticed that my progress has not been as quick, and they mentioned that they are wondering what/where better to put me to work on that will bring out my full potential.I like the idea of working on another project, but I do not wish to do so until I've finished the current one I am on, which day by day I feel like I am making snail's pace progress because of some issues I am stuck with where finding help is a problem in itself.I dislike making a bad impression on my colleagues (and on my school as well, since I am a co-op employee), as I really believe I have the potential to do great. However, this issue of getting stuck on something, making small progresses, then getting stuck again, is simply chipping away my confidence.What are some things I can do? I feel like once I am stuck on a problem, I find myself closing up, unable to voice it, as if asking for help is a sign of incompetency.| You must ask for help when you are stuck, regardless of how it makes you feel. You are using an SDK that is dragging down your productivity; it is not your fault. You cannot be considered incompetent. It is always easier to work on stand-alone code that does not depend on third party libraries, or only uses well designed, mature libraries. Your best choice in this case is is to ask for help, and publicly complain about deficiencies in the library.
https://softwareengineering.stackexchange.com/questions/122324| How to properly shield a Product Owner from outside?| Update:We are a very small team (3 people) and thus I (Scrum Master) and the Product Owner are also developers doing some coding.We are aware of this situation and we are actively trying to recruit some new talents. But it's hard!Meanwhile... we need to adapt... so my question:The Product Owner complains about having too much outside noise (mainly stakeholders feature requests), and he can't focus on the sprint realisation.We agree that we should try to educate people on our process implications (sprint durations and product backlog), to reduce the noise.But as a Scrum Master, how am I supposed to shield a PO from outside? Isn't he supposed to be in contact with the management and business?Also, if people outside don't want to waste too much time learning agile, what is the best way to educate them?| I feel that assigning the role of PO to a developer is usually the wrong choice. As you noted, the PO is supposed to communicate a lot with external parties, precisely to shield the development team from interruptions, to filter and enhance incoming feature/bug requests (again, via extended discussion with users / stakeholders) and to prioritize stories.So apart from this role requiring lots of communication, IMHO prioritization should not normally be the task of a developer.Of course, if your team is very small, someone may need to do it nevertheless, but than (s)he should understand the requirements for this role and not complain too much after accepting it :-)
https://softwareengineering.stackexchange.com/questions/123059| Boss is skeptical of using a version control system for new project, should I anyway?| Seehttps://softwareengineering.stackexchange.com/questions/109817/superior-refusing-to-use-subversionMy question is similar, but here are the main differences in my scenario:We are starting a new project from scratch, using PHP and web tech. There would be no down time in development as we would be adopting it from the beginning, if I have my way.My dev team consists of me, and my boss. We are the "IT" Department of a relatively small firm.The web app will replace a legacy application with absolutely no source control. Due to variations in geographical legal requirements, the decision was made (before I was hired) to fork the app into 7 completely separate directories for each version. Different developers did different things in different places at different times after that. Patching changes across them, well, I think it could be done better, I guess that's why I'm posting.My boss's proposal, directly pasted from an email:Updates should be submitted as packages in the SUBMISSIONS folder.  The package should contain all relevant files as well as an   ‘UPDATE.NFO’ file that contains a description of the update, a list of   all new files included (with descriptions), and a list of all modified   files with modification details.Update packages should focus on an individual element and not stray from its intended purpose.  Code should be designed to be modular and   reusable whenever possible.All submitted packages should be installed in each developer’s test environment soon after submission.  Each developer is to review the   new addition and voice any concerns over its installation to the   production environment.  A standard package update should be held for   a minimum of 3 business days for this review process before being   loaded into the production environment.  High priority updates/fixes   can skip this requirement.The reason source control was invented is to make all that automatic, right? I suggested subversion, because that's what I used in college. Boss doesn't like subversion because "It makes a mess of the code" (i.e. uses binary magic and is not plainly readable). We did try it one time, but I think trying to use it on windows made weird lower/uppercase errors and we couldn't check out our files. I don't know whether it's only subversion, or all source control products that are objectionable.So, what kind of argument should I make to my boss? Or is he right, and there could be a danger of losing all our work from some weird bug?Or am I wrong altogether? Is source control really necessary in my situation? This is our main business-critical software we're talking about, so it will end up huge no doubt. But there's only 2 developers (now).Additionally, If I can't convince him, would there be any point to me using it only for myself? I am speaking as someone with very limited experience actually using svn; all I really know is checkout and commit. What are the features of source control (may include other products than svn) that would aid in my individual development effort?Please no "get another job" comments. That's not helpful to the debate.| Don't ask him. Don't tell him.Show him.Install svn, or git, or whatever you like on some extra machine. Practice using it yourself until you feel comfortable not just using it, but explaining it. If you're going to make him comfortable with your new system, you'll need to be more than comfortable with it yourself. You'll need to be able to help him recover easily when he screws up a merge or checks something into the wrong place.When you're ready, show him exactly what you're talking about. Show him that it doesn't "make a mess" of anything. Point out that it doesn't just let you retrieve any previous version of your code with ease, it also makes it possible to know exactly what changed between any two versions.Point out that if anything ever happens to the server (serious bug, virus, hacker, disk crash...)you'll both look like herosif you can instantly reconstruct the necessary version. Point out, too, that you'll look twice as good if you're able to produceanyversion on demand. Search your old e-mail and compile a list of problems you've had over the past year that you could have avoided with version control.Give him a cheat sheet that willmake it easy for himto use your version control system.Finally,suggest some optionsbutleave the decision to him. Should you set up your own server, or use one ofthe many hosted services? Should you use svn, git, or something else? Should you migrate all seven projects to the system, or try it with one or two at first?
https://softwareengineering.stackexchange.com/questions/231156| Scrum: how to integrate work done by an overachieving developer out of band?| We have a "typical" SCRUM team and we commit to work for a sprint, and also maintain a backlog. Recently we have run into a problem of trying to integrate/handle the work of an overachieving developer doing out of band work (choosing to work outside of the normal working hours/sprint).To give an example, if the team takes in 50 points of work, let's say that they will complete all that work within the SCRUM framework by the end of the sprint and they and the company is happy. One of the team members decides to work on their own, on a backlog item, on their own free time. They do not check in this work, but instead save it (we use TFS and it is in a shelveset).How to handle this? A few of the problems ..During the next sprint this team members says the programming work is 99% done and just needs code review and testing. How do you deal with this in the SCRUM and agile methodology?Other developers complain about not being involved in design decisions related to these stories, since the work was done out of band.Our product owner is tempted to pull in this "free" work and the overachieving members is likely doing this on purpose in order to get more features into the product that the team otherwise would not be able to accomplish in the sprint(s). There is a view that this is breaking the "process". Obviously QA, UI and documentation work still need to be done on this work.I see a lot of discussion about not forcing a SCRUM team to work overtime, but what about a member of the team working above and beyond the expectations put forth during planning and execution of sprints? I would hesitate to reign this person in and say you cannot work extra (cautioning on burn out of course), but at the same time it seems to be causing some issues with certain members of the team (but not all).How to integrate work done by an overachieving member into the SCRUM and agile process for software development?| Alright, so someone's enthusiastically writing great code that needs to be done, just not in order.  With all due emphasis:LET THEMIt's causing some complications in your scrum sprints.  Does it really matter in the grand scheme of things?  If he's accomplishing what he's supposed to, then let him go on and build great things for you.I know several amazing programmers who have left companies because they did not let the programmers outside of the constraints of an artificial system like Scrum (I myself left my last job after being treated like nothing more than glorified QA).  If there are complaints from other developers about input (perfectly valid complaints, I may add), it may be best to introduce a "20% time" program to let him (and others) do what they do best with minimal interference.Instead of future stories (that may require input from others), let the developer experiment with new tech or features.  You may find a great new opportunity that never would have been explored otherwise.  I'm sure this developer has a few things they'd like to try out if you just let them.
https://softwareengineering.stackexchange.com/questions/31020| How to persuade programmers to follow the basic rules| There are several rules I must keep asking programmers to follow very often. They write code and, if it works, job is just done, for them. Most basic rules might be:Commiting changesNot writing Model issues in View or ControllersAvoid hardcodingCan you tell me about your experience? How do you manage this?| To be able to follow the basic rules, they need to know what the rules are and they need to agree with them.The way to handle this is tojointly create a coding guideline documentwhich everyone can agree with. Don't try forcing this on them, it will backfire if you do.So get the team together and start working on a common definition of your basic rules!Do it as a workshop where all voices are heard. Timebox it to avoid endless discussions. You are trying to bringing several minds together, so you may want to set the stage with a positive note that you all should be respectful and keep an open mind (code writing is personal...).These guidelines should be alive changed whenever the team feels there is something that should be added or clarified.
https://softwareengineering.stackexchange.com/questions/232520| Communicating with Vendors| We are a small software team (as far as programmers go) and have a team of vendors on the other side of the world that program for us. We own the product, and simply dictate to them some of the tasks to work on. I am one of the lead programmers and also the project manager of this particular project, so I am a programming and fulfilling requirements as well as outlining them.I am having difficulties communicating with the vendors exactly what is expected of them. Let me start by saying we are fairly new at this and I don't have a lot of experience leading a team of vendors, especially when it is difficult to communicate verbally in English, and they work during my night and then I come into the code they pushed while I was asleep. Problem is, I end up spending a lot of my day just checking what they did, and fixing bugs and cases they didn't think of. They're not thinkers, they do exactly what I tell them, and nothing more or less. Most of the time, I feel like it would just be easier to do it myself.My question is how do most teams like this communicate? Right now we have weekly telephone meetings and I email them nightly the progress I made, as well as what is expected of them. When I think "how to communicate with other programmers" the answer seems to be UML. That's what it is. I certainly am very familiar with UML, learned it in school, but have never really used it on the job. It's just not something we do, in fact generally the requirements for a task are in my manager's head. I can get those into a spreadsheet or a flowchart, but never an official diagram.Is UML something teams like this actually use? In all reality, I feel like I learned a lot in school that no one actually does. If so, which diagrams are the most useful/used? From my knowledge, in this project where we are revamping something that exists in the system already from the ground up, I feel like the following would be a good approach:Create a quick ER diagram containing any added/updated/used entities in the project.Create adetaileduse case model, clearly defining and numbering each use case.Create a sequence diagram for the complex use cases (as well as their alternate flows) to show exactly what is expected each step of the way.I feel like this would be a good start. We don't really do a good job of capturing requirements currently, we kind of just start coding based on something we drew up on a whiteboard. Obviously this needs to change as well, to avoid getting a week into a project and realize that we forgot something.What are your suggestions/experience? Unfortunately we're sort of flying blind and just don't have anyone experienced enough in these situations to go to. I want the project to be a success, but I can't keep having the vendors (understandably) making mistakes because I assume they know X or Y. How can I utilize them more effectively?| Having been in your situation on a few occasions, I've found that UML diagrams and the like are not a good way to go. They tend to be overly complex, and much more difficult to communicate about - now your audience not only has to understand what you said in english, they also have to be familiar with UML diagrams and know how to apply them to the work they're doing.The goal is not to come up with what you consider to be cleaner/more concise/more accurate ways to write down your instructions, but to make sure that your instructions are more easy to understand/follow for a non-english speaking audience, that is the product of a different educational system. With that in mind - UML diagrams will only help if your target audience is capable of understanding them better than spoken/written english.The following approaches/ideas have worked for me:You're stuck being a project manager. You might have to accept this means an entirely different set of skills, work, etc... that you'll find yourself using - a different job description from being a software developer. You might also have to accept (and explain to any overlords you may be reporting to) that this is a time consuming job - you can avoid having to rewrite their code, but there's other work you'll have to do instead, which will impact your job as a software developerMake sure that you're regularly speaking with the people actually writing your code - try to eliminate the intermediary level(s) of management.This might mean going for a more involved micro-management approach (say, daily agile-style standups, where you do video chats with the dev teams in groups of less than 7, and have them each report on what they've done today, what they're stuck on, what they'll do tomorrow). Or it might mean trying to get the lead developers to show up to your weekly meetings, and getting them involved in the discussion about what code they've written/they're about to write. Maybe you can put them on your chat contact list, and, when you code-review their work, ask them directly about code they've written; cultivate a friendly relationship.The goal is to open up communication channels more - so that the people who are actually writing the code understand that (a) you're holding them to a higher standard, (b) you actually care about them, and the work that they're doing and (c) making yourself available more easily/quickly for any questions they have when they interpret your instructions.Learn to speak "their" version of english. More frequent communication should help with this - expose yourself to as many different people on the otherside, all speaking about things that you're intimately familiar with, and try to pay attention to/pick up idioms, expressions, etc... that they are using - and then to use them when describing your requirements.Add unit testing to your list of requirements. Have them write a unit test framework, and write unit tests for each story - it's often easier to send over an extra unit test and ask that it be green, than to explain what you want; maybe not everyone involved speaks english, but everyone involved should, theoretically, speak code.Make sure that you include UAT with each story description, not just requirements. Use a standard pattern - "As a {user description} i want to do {some action} which results in {specific description of result}". Ask them to provide you with tests that show the code actually does what you asked it to do - again, it may be faster/easier to modify tests and send them back, than to re-explain yourselfMost outsourcing outfits are extrinsically motivated; they're in it for the money. For development work, especially if it requires any creativity, that's a major downfall. Either split the work up so that anything you send to them is the kind of work that's easy for people who are only in it for the money to do (work that doesn't take creative thinking is ideal), or get them to be more intrinsically motivated.For that last bit - the low hanging fruit include switching to video chat for all your communication; learning about things like holidays, birthdays, etc... and mentioning them on calls; making it a point to highlight particularly well done work individually, and with a bit of delay - and highlighting bugs/issues as soon as they're discovered, and with a can-do-team-approach tone of voice ("here's a bug - can we get this fixed?" vs. "who wrote this? sam? dude, your code here was awesome!"), etc... If you do manage to get to know the devs, it should help - find out what they each like about the work you're sending, and see if you can help them to do the bits they like.
https://softwareengineering.stackexchange.com/questions/129967| How to avoid "DO YOU HAZ TEH CODEZ" situations?| I have a strange situation at work, where a colleague of mine often asks me and other co-workers for working code.I would like to help him, but this constant request of trivial snippets interrupts my thoughts and sometimes makes it hard to concentrate.Plus, I have the impression (...) that this requests are generated by lack of competence, more than by laziness. In fact, he often asks things pretending to know the answer, since when I solve the problem he usually says things like "Sure", "Yes, that's what I thought", giving me the impression that my answer isn't worth it.How can I solve this embarrassing situation?Should I show more explicitly in front of other colleagues his lack of knowledge (by saying things like: "do it yourself if you can, please") or continue giving him what he wants?I think that he should aggregate all his questions in one, so that I can give him a portion of my time and he can work all by himself on his things.There is no hierarchy in the team, I must say we both have a similar seniority of five years, more or less. For the same reason I believe I cannot report to management, since trivial questions are often ignored.I discussed with other two members and they agree with me: in fact he often ask things cycling through colleagues.| My response would be to say "I'm a little busy right now, can you email me and I'll deal with it later". Chances are some of his questions are legitimate, by forcing him to email you it doesn't interrupt your flow and he is unlikely to bother detailing the problem in an email if its trivial. You then also have a record to show to management if his questions still stay at an unreasonable level.
https://softwareengineering.stackexchange.com/questions/35715| If most of team can't follow the architecture, what do you do?| I'm working on a greenfields project with two other developers. We're all contractors, and myself and one other just started working on the project while the orginal one has been doing most of the basic framework coding. In the past month, my fellow programmer and I have been just frustrated by the design descisions done by our co-worker.Here's a little background information:The application at face value appeared to be your standard n-layered web application using C# on the 3.5 framework. We have a data layer, business layer and a web interface. But as we got deeper into the project we found some very interesting things that have caused us some troubles. There is a custom data access sqlHelper type base which only accepts dictionary key/valued entries and returns only data tables. There are no entity objects, but there are some massive objects which do everything and then are tossed into session for persitance.The general idea is that the pages (.aspx) don't do anything, while the controls (.ascx) do everything. The general flow is that  a client clicks on a button, which goes to a user control base which passes a process request to the 'BLL' class which goes to the page processor, which then goes to a getControlProcessor, which at last actually processes the request. The request itself is made up of a dictionary which is passing a string valued method name, stored procedure name, a control name and possibly a value. All switching of the processing is done by comparing the string values of the control names and method names.Pages are linked together via a common header control that uses a combination of javascript and tables to create a hyperlink effect. And as I found out yesterday, a simple hyperlink between one page and another does not work because of the need to have quite a bit of information in session to determine which control to display on a page.My fellow programmer and I both believe that this is a strange and uncommon approach to web application development. Both of us have been in this business for over five years and neither of us have seen this approach.My question is this, how would we approach our co-worker and voice our concerns and what should we do if he does not want to accept the criteic? We both do not want to insult the work that has been done, but feel that going forward will create a nightmare for development.Thanks for your comments.| I would spend some time with the people that did the job and ask enough questions to understand why.Seek First to Understand, then to be understood.If you come into their thing too quickly, they will feel attacked and they will try to protect themselves and their comfortable status quo.By asking enough non aggressive questions, you will show interest in their work andestablish the base of a good cooperationto improve the whole thing. It's necessary for most people to be understood in order to unblock their instinctive protections.Asking those question will also help you understand what they did and maybe you are resisting a new way of doing things.Sometimes, it's impossible to collaborate, and this will be a pretty good indication that you should remove yourself from the team.
https://softwareengineering.stackexchange.com/questions/130906| What you should do if your junior did not adopt your suggestion? [closed]| Closed.This question isoff-topic. It is not currently accepting answers.Want to improve this question?Update the questionso it'son-topicfor Software Engineering Stack Exchange.Closed12 years ago.Improve this questionI am leading a team of 3-4 junior developers. My job-- besides writing code-- is to provide supervision and guidance for the juniors.But, I fully understand how much developers cherish autonomy in their work, and I don't want to destroy their intrinsic motivation by spoon-feeding them with my thoughts and my algorithms; I want them to explore the problem in their own ways, and think about it themselves and only come to me when they are really facing insurmountable issues.When they do come to me, sometimes I would have to propose a completely different algorithm to solve the problem because their algorithm isn't robust enough ( remember, I am the senior and I have seen more than them). Of course I would explain this in a nice manner so as not to hurt their feelings, and I would gently outline how my solution is vastly superior than theirs, no condescending tone or condemning words.But still, they are sometimes reluctant to accept my suggestion, partly because they have invested so much in their own algorithm, or partly because of the fear that using a new method would entail more learning time and make them appear to the management as if they are going nowhere. But deep in my heart I know very well that my algorithm is much better than theirs and they should just adopt it.What should I do if they didn't adopt my suggestion? Should I just ask them to follow my way, or should I just let them have their heads banged on the wall many many more times and wait for them to come back to me? Doing the former makes me into a dictator, but doing the later would cost us precious development time and incur bug fixing cost. I am really in a dilemma here.| Help them to understandwhythey should make your suggested change. And listen to them if they have a good reason not to make the change. Have a discussion, and come to an agreement on the basis of what is the best thing to do.This approach is important for the following reasons:You want them to be making the change because of solid business/technical reasons. It's important to be clear on what these are (any remember thatyoucould also be wrong, so be humble....).You really want to convey the reasoning behind your suggestion - that way the recipient will learn to solve similar problems themselves in the future. You'll also have a better relationship if your juniors feel that they are learning some good insights from you.You won't be respected if you use your seniority and can't demonstrate that you actually have good reasons.Yourboss would presumably like to be confident that you are using your juniors' time effectively on things that create real value, not just "doing it my way" for the sake of it.If you are smart, you can also get them to come to the answer just byasking questions. Done right, your junior will come to the correct conclusion themselves (and therefore be much more willing to implement it). Example questions:Your code assumes access to the production database. How could we change that so that it will still work and can be correctly tested by JUnit in a disconnected development environment? (potential answer: ah! we should use dependency injection....)What will happen if an attacker deliberately sent some cleverly constructed SQL in your online data entry form? (potential answer: ah! perhaps we shouldn't construct SQL statements by concatenating unverified text from the internets)EDIT: If you succeed in persuading your junior that the right thing to do is to follow your suggestion, but they arestillreluctant than here is some additional advice:Explorewhythey are reluctant. It is possible that they need to come to a personal realisation that it doesn't matter if you throw code out, provided you get the result. Or it could be that they feel under time pressure because of some deadline. You need to know, otherwise you can't help them.....You can make the point that they can treat the change as a way to improve their refactoring skills. Once refactoring skills are good enough, you should be able to re-purpose even a fairly large and complex code base relatively quickly.You should emphasise that everything will be in source control, so they can always revert back to an old version if needed.
https://softwareengineering.stackexchange.com/questions/351054| How to handle project manager getting upset when tasks spend multiple days in development?| Our process is that developers create subtasks for user stories to track their work on that particular user story on the scrum board.Good so far.However, we have a de facto project manager attempting to "do agile" and take on the scrum master role. During the daily standup, he gets visibly upset when a subtask sits in the "In Development" column for longer than a day or two. He claims that developers should create subtasks that are equivalent to 4-8 hours of development time. This way, there should be subtasks moving across the board every time.As a developer, I feel like trying to arbitrarily divide my work into 4-8 hour chunks and create a separate task for each just so he feels better when he looks at the scrum board:makes no sensewastes development timecreates unnecessary paperwork/busy work that bogs down the processAs a developer, what's a solid way to handle this?| Four points....Per Schwaber and Beedle, a Scrum task shouldtakeroughly4 to 16 hours. Some complicated tasks can take longer if the team can't find a better way to break it down. So while your colleague is partly right, he is also partly wrong. Maybe buy him a copy ofthis bookand ask him to read it (nicely).The task breakdown (including estimated hours) should be reviewed during the sprint kickoff, and the scrum master should be present and aware of the hours associated with each task. If he has a problem with the length of a particular task, he should speak up then, and not later. Make sure to call his attention to the estimates during the kickoff.Perception of progress should be managed by two things-- objectively, via burndown rate, and subjectively via demos. Not by watching tasks move across the board.  If your sprints are longer than 2 weeks, it might make sense to schedule more demos, possibly weekly. If he can see progress via some other means, maybe he won't obsess so much over counting tasks.Even if the task isn't completed, completed/remaining hours should be updated on a daily basis. So if your manager looks at total remaining hours instead of total remaining tasks, maybe that will be satisfactory.
https://softwareengineering.stackexchange.com/questions/39461| Dealing with awful estimates| A recent project I worked on was proven to be severely underestimated by the architect.  The estimate was out by at least 500%.Unfortunately I was brought onto the project after the estimate had been signed off with the customer.  As senior dev, I quickly realised that the functional and technical spec. contained some huge gaps and uncertanties.As a result I felt compelled to call an emergency meeting with the business and technical directors to let them know the reality.  As first and foremost a developer, I found this a very stressful and difficult situation.  The "business" accused IT of being incompetent and being the messenger I received a few "bullets".The customer threatened to cancel the account, however to date the project is still unfinished and I am no longer directly involved with it.The architect was a nice guy socially, but based on this episode was either simply incompetent or there were large sales/business pressures influencing his estimate.So, as programmers, what is your experience of this sort of situation and how would you advise dealing with it?| Long reply, but hey, I’ve got a summary on the end, so just skip to summary if you can’t be bothered reading the entire thing!As a developer I had to deal with the situation literally every other project, but it's not until I moved into project management that I learned how to deal with it effectively. For me dealing effectively is about two things: managing expectations and understanding how estimation works.Start with a premise that it is unethical to provide an estimate, commit to an estimate or give any other indication of estimate accuracy without being able to carry some due diligence first. Other people rely on your professional ability to predict an amount of work required, giving a false indication will hurt them and their business.But you have to give something, in real life you dragged into an impromptu meeting or a late project and your superior will probably make it clear they expect you to come up with some figure straight away or comment on the estimate they provided. This is where expectations management comes into play.Explain that it would be wrong of you to give any figure or any indication without understanding the problem and working the numbers out for yourself. Say that their figures might be quite correct, you just don’t know before you went through the estimation exercise yourself. And even though you might have a good picture of what is needed there and when, say that you still need some time to work the numbers out. There is only one estimate they might expect you to give: when you going to be able to provide an estimate. By all means do provide that figure.As a developer never take responsibility for (or give indication that can be interpreted as acceptance of) other people estimates without being able to review them first. As a project manager it is a totally different matter, because then you actually have some control over the estimation process: the way an estimate is derived and reviewed and you have to rely on other people to get the actual work done and you need to make sure they are committed.Never even comment on estimates without being able to do the due diligence. This is ethical. A lawyer or a doctor will make it absolutely clear they cannot give any advice unless a client (or patient) plays by their rules and goes through an assessment procedure first. You similarly have a right to satisfy your questions before giving professional opinion.The second part is about how estimation works. I suggest researching various approaches to doing estimates and how estimation process works, including industries other than software development (manufacturing, financial markets, construction). This will give you idea what can be reasonably expected from you by your boss or client and, strangely, will help making more accurate predictions about the amount of work. It will improve your ability to defend your estimates and you will need to defend the figures every time they are different from the ones provided by an architect or a sales person.Normally, the way it works, is that your estimate is first scanned for odd looking or relatively large items. Hence be prepared to defend anything with “non-standard” name. Also split larger tasks so that all tasks have same order of magnitude, i.e. if most tasks take 2 days and one single task is 10 days be prepared to get drilled.Be clear about what is included in each task, its best to split dev and unit testing instead of just having dev and having someone assume that it includes documentation as well. Obviously this way you’ll need to produce a fairly fine grained estimate.Next the drilling comes. Since it is quite difficult to review a long work breakdown your client or boss is likely to adopt a different strategy: concentrate on a random bit they might know something about and drill down until they manage to discredit the entire estimate or will be satisfied with your answers. The credibility of entire estimate might depend on a random sample! Hence once again, you need time to prepare it carefully, include only relevant bits, exclude any extras or move them to a “nice to haves” section and think through how you going to defend the figures.Obviously you can be either consistent in your approach, i.e. estimating on the basis of features, number of screens etc or have a mix of approaches, but in any case  be prepared to defend why you selected a certain way of estimation. Be also prepared to explain why your figures are different from whoever else’s attempt at predicting the amount of work required.Learn the obvious signs of weak estimates:Filled with general run-of-the-mill tasks, copied from template (good estimates are specific to the task at hand).Coarse grained estimates (i.e. tasks longer than couple of days).Estimates done on early stage of a project or by someone who might not have actual knowledge of the requirements or work involved.Estimates compiled by people other than actual doersVague estimates (not clear what is included and, equally important, excluded).Substantial difference in the order of task magnitudes.Practise in evaluating other people estimates and drilling the figures without actual knowledge of implementation detail. This will help to back your claim for some extra time when pressed with the request to confirm someone else’s estimate when you have no hard evidence.To summarise:Do not commit to an awful or any estimate for that matter, before you had an opportunity to do due diligence.Make it clear on the outset, don’t let anyone assume it is any other way and interpret your silence as a sign of agreement.Know how various estimation methods work, their practical application and merits, including these outside software development.Be prepared to defend your estimate.Learn how to evaluate other people estimates so you don’t have to commit yourself to vastly inaccurate figures.
https://softwareengineering.stackexchange.com/questions/39461| Dealing with awful estimates| A recent project I worked on was proven to be severely underestimated by the architect.  The estimate was out by at least 500%.Unfortunately I was brought onto the project after the estimate had been signed off with the customer.  As senior dev, I quickly realised that the functional and technical spec. contained some huge gaps and uncertanties.As a result I felt compelled to call an emergency meeting with the business and technical directors to let them know the reality.  As first and foremost a developer, I found this a very stressful and difficult situation.  The "business" accused IT of being incompetent and being the messenger I received a few "bullets".The customer threatened to cancel the account, however to date the project is still unfinished and I am no longer directly involved with it.The architect was a nice guy socially, but based on this episode was either simply incompetent or there were large sales/business pressures influencing his estimate.So, as programmers, what is your experience of this sort of situation and how would you advise dealing with it?| Long reply, but hey, I’ve got a summary on the end, so just skip to summary if you can’t be bothered reading the entire thing!As a developer I had to deal with the situation literally every other project, but it's not until I moved into project management that I learned how to deal with it effectively. For me dealing effectively is about two things: managing expectations and understanding how estimation works.Start with a premise that it is unethical to provide an estimate, commit to an estimate or give any other indication of estimate accuracy without being able to carry some due diligence first. Other people rely on your professional ability to predict an amount of work required, giving a false indication will hurt them and their business.But you have to give something, in real life you dragged into an impromptu meeting or a late project and your superior will probably make it clear they expect you to come up with some figure straight away or comment on the estimate they provided. This is where expectations management comes into play.Explain that it would be wrong of you to give any figure or any indication without understanding the problem and working the numbers out for yourself. Say that their figures might be quite correct, you just don’t know before you went through the estimation exercise yourself. And even though you might have a good picture of what is needed there and when, say that you still need some time to work the numbers out. There is only one estimate they might expect you to give: when you going to be able to provide an estimate. By all means do provide that figure.As a developer never take responsibility for (or give indication that can be interpreted as acceptance of) other people estimates without being able to review them first. As a project manager it is a totally different matter, because then you actually have some control over the estimation process: the way an estimate is derived and reviewed and you have to rely on other people to get the actual work done and you need to make sure they are committed.Never even comment on estimates without being able to do the due diligence. This is ethical. A lawyer or a doctor will make it absolutely clear they cannot give any advice unless a client (or patient) plays by their rules and goes through an assessment procedure first. You similarly have a right to satisfy your questions before giving professional opinion.The second part is about how estimation works. I suggest researching various approaches to doing estimates and how estimation process works, including industries other than software development (manufacturing, financial markets, construction). This will give you idea what can be reasonably expected from you by your boss or client and, strangely, will help making more accurate predictions about the amount of work. It will improve your ability to defend your estimates and you will need to defend the figures every time they are different from the ones provided by an architect or a sales person.Normally, the way it works, is that your estimate is first scanned for odd looking or relatively large items. Hence be prepared to defend anything with “non-standard” name. Also split larger tasks so that all tasks have same order of magnitude, i.e. if most tasks take 2 days and one single task is 10 days be prepared to get drilled.Be clear about what is included in each task, its best to split dev and unit testing instead of just having dev and having someone assume that it includes documentation as well. Obviously this way you’ll need to produce a fairly fine grained estimate.Next the drilling comes. Since it is quite difficult to review a long work breakdown your client or boss is likely to adopt a different strategy: concentrate on a random bit they might know something about and drill down until they manage to discredit the entire estimate or will be satisfied with your answers. The credibility of entire estimate might depend on a random sample! Hence once again, you need time to prepare it carefully, include only relevant bits, exclude any extras or move them to a “nice to haves” section and think through how you going to defend the figures.Obviously you can be either consistent in your approach, i.e. estimating on the basis of features, number of screens etc or have a mix of approaches, but in any case  be prepared to defend why you selected a certain way of estimation. Be also prepared to explain why your figures are different from whoever else’s attempt at predicting the amount of work required.Learn the obvious signs of weak estimates:Filled with general run-of-the-mill tasks, copied from template (good estimates are specific to the task at hand).Coarse grained estimates (i.e. tasks longer than couple of days).Estimates done on early stage of a project or by someone who might not have actual knowledge of the requirements or work involved.Estimates compiled by people other than actual doersVague estimates (not clear what is included and, equally important, excluded).Substantial difference in the order of task magnitudes.Practise in evaluating other people estimates and drilling the figures without actual knowledge of implementation detail. This will help to back your claim for some extra time when pressed with the request to confirm someone else’s estimate when you have no hard evidence.To summarise:Do not commit to an awful or any estimate for that matter, before you had an opportunity to do due diligence.Make it clear on the outset, don’t let anyone assume it is any other way and interpret your silence as a sign of agreement.Know how various estimation methods work, their practical application and merits, including these outside software development.Be prepared to defend your estimate.Learn how to evaluate other people estimates so you don’t have to commit yourself to vastly inaccurate figures.
https://softwareengineering.stackexchange.com/questions/134182| How should standards and process improvements be introduced to an organization without them?| I've been tasked with improving the software development process through the implementation of process improvements, of which we will most likely be usingCMMI for Development, Version 1.3as a guideline and adopting the best practices in whole or in part. What is the best way to introduce standards and process improvements so that the degree of push back and resistance from developers is minimized?| A couple thoughts from the school of hard knocks:1) Most process improvement initiatives spend 80% of their time on process design and 20% on education and socialization.  Flip these percentages.  A mediocre standard that's followed beats a perfect one that isn't.2) Identify clear reasons why you're asking people to change how they work.  What's the business case?  Ideally it benefits every team individually.  Sometimes it's just systemic improvement.  Either way, make the case visible.3) Simplify, then standardize, not the other way around.4) You can't fully delegate this to a PMO.  Direct managers need to be bought in, and the head of the business unit will need to break ties when complaints come in.5) Find friendly early adopters.  People will complain about how much time it all takes.  You need someone you can point to and say, "it only took them 15 minutes"6) For metrics, push hard for quantitative over qualitative.  Otherwise you have projects that are Green until a day before Go Live, when everything slips by a month.7) Emphasize techniques over tools.  Good planning is more important than MS Project.8) Put in a level of process relative to the needs.  Every restaurant needs process, but Nobu and the French Laundry need a different kind than McDonalds.  Same with software firms.Good luck!
https://softwareengineering.stackexchange.com/questions/41019| How do I (tactfully) tell my project manager or lead developer that the project's codebase needs serious work?| I just joined a (relatively) small development team that's been working on a project for several months, if not a year. As with most developer joining a project, I spent my first couple of days reviewing the project's codebase.The project (a medium- to large-sized ASP.NET WebForms internal line of business application) is, for lack of a more descriptive term, a disaster. There are three immediately noticeable problems with the coding standards:The standard is very loose.It describes more of what not to do (don't use Hungarian notation, etc..) than whattodo.The standard isn't always followed.There are inconsistencies with the code formattingeverywhere.The standard doesn't follow Microsoft's style guidelines.In my opinion, there's no value in deviating from the guidelines that were set forth by the developer of the framework and the largest contributor to the language specification.As for point 3, perhaps it bothers me more because I've taken the time to get myMCPDwith a focus on web applications (specifically, ASP.NET). I'm also the only Microsoft Certified Professional on the team. Because of what I learned in all of my schooling, self-teaching, and on-the-job learning (including my preparation for the certification exams) I've also spotted several instances in the project's code where things are simply not done in the best way.I've only been on this team for a week, but I see so many issues with their codebase that I imagine I'll be spending more time fighting with what's already written to do things in "their way" than I would if I were working on a project that, for example, followed more widely accepted coding standards, architecture patterns, and best practices. This brings me to my question:Should I (and if so, how do I) propose to my project manager and team lead that the project needs to be majorly renovated?I don't want to walk into their office, waving my MCTS and MCPD certificates around, saying that their project's codebase is crap. But I also don't want to have to stay silent and have to write kludgey code atoptheirkludgey code, because I actually want to write quality software and I want the end product to be stable and easily maintainable.| You could spend your time arguing your case; or you could spend your time cleaning up as you go along.Pick upClean CodeandAgile Software Development Principles, Patterns, and Practicesand apply what you learn there as you work on the system. Eventually, people will notice (for better, or worse).EditAlso check outWorking Effectively with Legacy Code
https://softwareengineering.stackexchange.com/questions/355686| How do I deal with a counterproductive scrum team?| Backstory:I have been working as part of this team for the past three years and in this time we have had three different Scrum Master who have all run things differently.Because of this change in Scrum Masters and their way of running the show, it has left my team numb to the idea of Scrum because the principles haven't been enforced consistently and one of the Scrum Masters was a person who do not believe in agile development and just kept events and artifacts as a novice to comply with company decisions.Now my team members are annoyed and bored when we do Scrum events and one person in particular is very verbal about this.Present:Two months ago the company appointed me Scrum Master of my team because of my dedication to working agile and its principles.I'm suffering greatly under the atmospheric pressure of my team members unwillingness to do Scrum.As mentioned they are annoyed about the entire process which makes it very difficult for me because they are not engaging in the necessary conversations needed to make Planning, Retrospective, and Daily Scrum effective.To them, Planning is just a waste of time, because we just move overflow into the new Sprint and don't complete the work anyways, so why bother.During Retrospective I can just feel that they want to say "Stop doing Scrum". One person does, but the others are silent and I have to deal with this every time.Daily Scrum is again just a waste of time for them because none of them bothers to talk and plan the day. They just state "I worked on task X yesterday and will work on that again today." And most of the time they just joke around until I get more stern.I have been very large when it comes to how they spent their time during these events. But I'm dying on the inside because I have a passion for this and they don't care anymore.Today the person who's always against me told me to stop saying "They said this is what they committed to for this Sprint" because, in his words, "We never complete a Sprint. We just move in tasks and take in new ones in the next Sprint to fill up a quota. We do KanBan in reality. So stop saying that."I understand why he says this, but he doesn't seem to realize that this is how it is because him and everybody else on the team don't care. They just do work instead of dealing with impediments. They complain about the impediments, but don't do anything about them. And when I try to help they just shrug it off.They used to give a damn, but over the past two years their willingness has declined to more or less rock bottom.How can I make them see that joking around and wasting time during these meetings costs the company a lot of money?| You may have heard a lot of statistics about failed software projects and came to the conclusion that the failure is not of a technical nature. Technological problems can be solved via hundreds of technical solutions, but solving problems in your workplace atmosphere by using Scrum is not going to work.My suggestion here is to completely stop looking at this as a technical issue. It's not about Scrum, it's not about daily standups, sprints, retrospectives or anything else like that. You need to get in touch with your team and find an effective way of working that satisfies them as well as you and your superiors.If they think dailies are a bad idea, you should not tell them to do dailies and try to punch your reasoning into them. Think for yourself what it is that dailies offer to you. Check with your team whether they value those advantages as well. Find out why they do not share your understanding - as in understanding their point of view, not as in convincing them of anything. Then check whether dailies actually help your team, or if you can achieve more with some other mechanism. The funny thing about Scrum masters is that they are servants to their team - you may well serve them best by abolishing Scrum altogether.In summary, stop focusing on Scrum and instead get back to the basics of agility. You may want to start right at the beginning with theagile manifesto: Value individuals and interactions over processes and tools.
https://softwareengineering.stackexchange.com/questions/138416| How to Mentor a Junior Developer| Locked. This question and its answers arelockedbecause the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.This title is a little broad but I may need to give a little background before I can ask my question properly.I know that similar questions have beenaskedherealready. But in my case I'm not asking if Ishouldbe mentoring someone or if the person is agood fitfor being a software developer. That is not my place to judge. I have not been asked outright, but it is apparent that myself and other fellow senior developers are to mentor the new developers that start here. I have no problem with this whatsoever and, in many cases, it lends me a fresh perspective on things and I end up learning in the process. Also, I remember how beneficial it was in the beginning of my career when someone would take some time to teach me something.When I say "new developer" they could be anywhere from fresh out of college to having a year or two of experience.Recently we've had people start here who seem to have an attitude toward development/programming which is different from my own and hard for me to reconcile; they extract just enough information to get the task done but not really learn from it. I find myself going over and over the same issues with them. I understand that part of this could be a personality thing, but I feel it's my job to do my best and push them out of the nest while they're under my wing, so to speak.How can I impart just enough information so that they will learn but not give so much as to solve the problem for them?Or perhaps:What's the proper response to questions that are designed to take the path of least resistance and, in essence, force them to learn instead of take the easy way out?These questions are probably more general teaching questions and don't have that much to do specifically with software development.Note: I do not get a say in what tasks they are working on. Management doles the task out and it could be anything from a very simple bug fix to starting an entire application by themselves. While this is not ideal by any means and obviously presents its own gauntlet of challenges, I feel it's a topic best left for another question. So the best I can do is help them with the problem at hand and try to help them break it down into simpler problems and also check their commit logs and point out mistakes that they made.My main objectives are to:Help them out and give them the tools they need to start becoming more self-reliant.Steer them in the right direction and break bad development habits early on.Lessen the amount of time I spend with them (the personality type described above tends to need much more one-on-one time and does not do well over IM or email. While that's generally fine, I can't always stop what I'm working on, break my stride, and help them debug an error on a moments notice; I have my own projects that need to get done).| There was once a question around here that contained this kind of information, and the piece that stuck with me the most wasdon't touch their keyboardIn short, tell your juniorhowto accomplish what they are trying to do, but do not do it for them.But in addition to that, here are some other tips:Encourage Google (or any other search tool). If you know the answer can be found online easily, tell them to look it up instead of telling them the answer.Ultimately you want to teach them how to teach themselves, and not have them become dependent on you.Make yourself available to answer questions. If you are ever not available or do not wish to be interrupted, make it clear to them that they should hold their questions until a specified time.Do code reviews regularly to tell them what they are doing right/wrong. Use this as an opportunity to point out best practicesBegin early with best practices. It's better to take extra time to teach them the right way, than to try and change their methods later on.Get them started early with planning/documentating what they are going to be doing instead of letting them begin by writing code.Be open to learning from them. They probably spend more time than you learning, and it's possible that they learn something that you didn't know.Help them learn from their mistakes. There are going to be mistakes, so be sure you show them that mistakes are part of learning, and that they should use them as an opportunity to learn.(From RuneFS below)Instead of telling them how to do something, try to help them figure it out themself. This will help improve their ability to logically work through a problem, and increases their learning ability(From RuneFS below)Instead of telling them what they did wrong, tell them of ways they can improve it. Be sure to includewhyyour way is better than theirs. This will boost their confidence instead of weaken it. Of course, if they aren't listening to you then don't be afraid to just tell them to do it the right way :)
https://softwareengineering.stackexchange.com/questions/251122| What is the best way for a programmer to handle being code reviewed?| I am fairly new to code review, but I have been coding for years during my PhD - which doesn't always make you a good programmer!If the reviewer changes your code and goes through it with you line-by-line, what do you do if you disagree?  Sometimes you made choice X and the reviewer changes it to Y, and you had Y in your mind but decided not to do it because of the disadvantages, but the reviewer asserts that those disadvantages are not important. Should you verbalise your disagreement, or just not and listen to them?Its difficult if you are not good at accepting criticism, and if the reviewer is a more senior person in the organisation.  It would not be good to come across as too defensive.| True, coming across as defensive is not helpful; but then - neither is being criticised, so if you feel this is happening you really should vocalise your concerns that the code review is not helping you write better code within the organisation.The reviewer has a responsibility to review code for real non-compliance and defects, not use it as a means to write your code the way they would have done. This means the review is there to review how you did something, and point out any areas that you made a mistake (something the best of us do) or didn't understand the framework or standards or "historical reasons" some code is written the way it is where you are.So if there are multiple ways of doing something, there needs to be a good reason why your code is changed to an alternative way, otherwise its simply non-constructive churn that won't help you.Also, remember that the reviewer isn't perfect either. They may have an idea that Y is the way to do it, and haven't realised that X is better. You should explain the reasons why you did it in way X. The reviewer might agree with you, or he might tell you why Y is a better solution - there may be other factors that you don't know that he does.In short, reviews are a way to get team members to communicate about their code changes. So talk to the reviewer about it.IF it helps, talk in an impartial way, as if you were not even the author of the code being reviewed. The code belongs to the company or team after all, and the team will have to maintain it. You just happened to be the guy who wrote it, that's not as important a factor as many believe.
https://softwareengineering.stackexchange.com/questions/368658| How do you cope with a team who tends to underestimate time needed to complete tasks?| How do you cope with a team who tends to underestimate time needed to complete tasks and haven't been improving the accuracy of their estimates?Details: I work in a scrum team (7 engineers) in a FANG company, at the end of every sprint, we vote to estimate how many hours we need to spend on each user story for next sprint. Then we assign these stories to each one of us according to our available capacity.I've been here for a year and we have a very persistent problem: almost everybody can't finish planned work in almost every sprint. We have huge carryovers in every sprint.I tend to vote for larger estimates, but my teammates almost never learn from their past mistakes and persistently vote low in these estimations.I'm the kind of person who just want work for 40 hours/week, chill and avoid burnout. I believe in 'underestimate and over-deliver'. I know some of my teammates work long hours all the time. Our scrum master works extra hours almost everyday yet she still vote very low all the time. She's been around for quite a while so we respect her opinions.They might each have different incentives, like to impress the management or conform with the others? Maybe they want fast promotion? I don't know and I don't care. I try to cope with it by taking a strong lead in my own project and voice my concerns in planning meetings. But sometimes I get assigned to user stories that are estimated by the team. And they usually have ridiculous expectations, like launching a new small production service from scratch in a week. Remember it's a big company which has a lot of internal processes, and a teammate have told me it takes at least 3 weeks to launch a bare born service. I was on vacation when this estimation happened.Also I would look bad if I have big carryover points too often.My manager is kind of a people pleaser and tend to accept ridiculous deadlines from other team or upper management. Thankfully my manager listens to me.Sorry for the long rant. I actually like my team and manager, so I don't want leave. I know we are doing agile all wrong but they don't change, and don't seem to care about working long hours.| You do have sprint retrospectives, right? That is the time to question: "How do we explain we did not burn down much? Again?" There may be excuses that won't make much sense to you. Just take note. Do this after each sprint. A time will come at which no one can argue any longer with the explanation you regard as obvious.In any planning session you could ask "What is different now, what makes us believe this time we will meet this low estimate? Or do we not really believe it ourselves? Whom do we think we are kidding this time?" You are going to be real popular .On the practical side, others may just not foresee the things they may or most surely will have to deal with. You may be able to point out these things.Then we assign these stories to each one of us according to our   available capacityThis is not very Scrum-like. Team members typically pick and choose their own issues from the set selected for the sprint.First and foremost, this is the team's problem, not your personal one. The team comes out unreliable every time. So technically it is not a matter of you dealing with the team, you are part of the team. If it doesn't feel that way, perhaps it's not worth your while.
https://softwareengineering.stackexchange.com/questions/70888| Stopping endless technical discussions and making a decision| I always come across people who like to bang on for ages over the smallest "technical things".Don't get me wrong, I'm a geek programmer who loves what I do, but you know the type of conversation.Mac is so much better than WindowsDon't use a For Each loop, use a While loopDon't buy an Intel based PC, get an AMD based one.We should use one IoC container over another.All these "things" have valid pro's and con's for both sides, and you'll never get a "correct" answer, and the person will never concede the point. (of course there will be some where there is an answer, maybe :).My question (I'm getting there!!) is: In a software team, how do you cut through these long discussions without inhibiting innovation, so that a decision can be made and you can get on to solving the real business problems.| Problem 1.  Some people don't like to lose.  If they're not calling the shots, they're going to debate until they call the shots through attrition.Problem 2.  Nothing's really at stake, so debating is tolerated.Nothing's at stake?  Yes.  Most of the decisions have almost zero dollar impact.  The fact that it comes down to "bang on for ages" means that both choices are effectively identical.What to do?Realize that nothing's at stake.Realize that in 2 or 3 years, the whole subject will be reopened because something outside the organization changed.Toss a coin.  Seriously.  Just pick something and move on.  Some folks will see the silliness in debating.  Some folks will then debate the nature of the coin being tossed.  If folks can't be satisfied with a coin toss, they have ego problems and need to learn that (a) nothing's at stake and (b) the decision will be changed in a few years.If they can't figure out that nothing's at stake, they need to write out the dollar value of both sides of the argument.  At some point, someone may see that more man-hours are being spent on analysis than the actual decision is worth.  A coin toss produces equal value for a lower cost.
https://softwareengineering.stackexchange.com/questions/263249| How to solicit new product recommendations from existing clients?| My company is working on developing a new product that is similar (but larger in scope) than our existing, primary application. It will incorporate most of the functionality of our current application (except where that functionality isn't currently being used) and eventually supplant it.Our initial thought was to solicit product suggestions and feedback on mock-ups from certain members of our current clientele who have made multiple feature suggestions in the past. This seemed good in theory, as we could get a larger perspective from our projected user base as well as getting buy-in from those customers who might have had feature requests they previously made indefinitely postponed.In practice what we're getting is a lot of silence. We have meetings with this group every two weeks to get their feedback and suggestions. However, they rarely - if ever - have anything to add. We've tried emailing out to them a few weeks in advance, asking for their suggestions on a certain feature that we intend to design and mock-up for them onxdate, and no suggestions come back to us. When we ask for feedback on existing mock-ups during the meetings, the response is always along the lines of "Oh, that looks good...I'll get back to you if I think of any problems." This leaves us extremely anxious.TLDR:The concern is that while our design may look great to us and our business team, our customer base won't like it (there are many areas it is radically different, based on things we implemented poorly the first time around). Can anyone offer any suggestions on ways we can better solicit feedback?Edit:Please note that I'm not asking how to proceedwithout client involvement. Rather, I'm looking for suggestions on how to convince people that it's in their best interest to be more involved.| You will probably get lots of more feedback as soon as your new product is on-line and people start using it. Especially, when you replace your existing application, so your clients are not able to use the old one any more. So work towards that goal - give your clients a version of the new product at hand with access to the same feature-scope they had in the old application (hopefully you have prepared your new application for such a scenario?) Not just mock-ups - they have toworkwith that thing. If your new product is not ready for that step, try to make some working parts of it available to your client and replace the older parts with these new ones. Or make something like a "beta" program, where volunteers can try out your new applicationfor free(!).
https://softwareengineering.stackexchange.com/questions/263825| How to communicate software design efficiently between developers? [duplicate]| This question already has answers here:How to share problem solving knowledge in a multiteam group?(4 answers)Closed9 years ago.Recently I've come to understand that a serious problem at my workplace is the lack of communication between developers. It's odd, because we're a totally open sort of organization. Everyone can go to everyone and ask whatever they need and communication is hardly regulated at all. And yet it doesn't happen by itself...The kind of lack that I feel most keenly myself is between me (the architect of the system, more or less) and the rest of the developers (which usually work on a piece of required functionality, not the framework). Whenever I create some component or a naming convention or whatever... there's no way I can make it known to all the people who might need to know this. At most I tell it in person to the fellow who asked me for it, but that's about it.As a result, wheels get reinvented, there are hardly any conventions in the code (mostly evolved from copy-pasting), occasional cargo-cult coding, etc. I try to clean it up whenever I get the opportunity, but with workload being as large as it is, there are rarely such chances. :(I'm not really sure how to solve this. I could try and document all the stuff that has been created (probably would take at least a week - difficult to budget that much time) in our internal wiki, but who ever reads such places regularly for news? And how would you find if something that you need has already been implemented somewhere?What do other people do to avoid this pitfall? What methods have shown themselves as efficient?| I use two things - my voice and a whiteboard.I mean, as much as developers hate meetings, youdoneed to work as a team. Standups are a great time to talk about new stuff you're doing in code (and to ask if something already exists). For big things, the sprint planning meeting is a good time for the entire team to provide input to the design, so everyone knows what is going on. And the sprint demo meeting is a good time to go into short detail about how the design has changed since the beginning of the sprint. In my experience, a whiteboard is the best tool for communicating that design amongst developers. Too few are proficient enough at reading code, and nobody reads (quickly obsolete) documentation.And for particularly big/complex/subtle things, you'll likely need to have a dedicated meeting to disseminate that info.Code reviews can help be a last line of defense against duplicated effort or misuse/mis-modification of code. But they catch thingsafterall of the work is done. By having good teamwork, you prevent the wasted work from being done altogether.Don't use agile/scrum? First, my condolences. Second, the premise still holds. You need to talk as a team -dailyfor little things. And you need to coordinate the bigger things periodically so that you work as a team.
https://softwareengineering.stackexchange.com/questions/75854| How do I convince my team to use smaller classes/methods?| Disclaimer: I'm a newcomer (this is my third day of work), and most of my teammates are more experienced than me.When I look at our code, I see some code smells and bad engineering practices, like the following:Somewhat inconsistent naming guidelinesProperties not marked as readonly when possibleLarge classes - I noticed a utility class that consisted of hundreds of extension methods (for many types). It was more than 2500 lines long!Large methods - I'm trying to refactor a method which is 150 lines long.The latter two seem to be a real problem. I want to convince my teammates to use smaller classes and methods. But should I do that? If yes, then how?My team got a mentor from the main team (we're a satellite team). Should I go to him first?UPDATE: Since some responses asked about the project, please know that it's a working project. And IMHO, huge classes/methods of that size are always bad.Anyways, I never want to piss my team off. That's why I asked - Should I do that, and if yes, then how I do that gently?UPDATE: I decided to do something based on accepted answer: because I'm newcomer, so I see everything in "fresh eyes" I will take note on all code smells that I found (position, why it bad, how can we do it better,...), but at the moment, I just try hard to  gather respects from my team: write "better code", know people, know why did we do that... When the time is right, I will try to ask my team about some new code-policies (naming guidelines, smaller classes, smaller methods,...), and if possible, refactor some old code. It should work, IMHO.Thank you.| You have the benefit of viewing the code with fresh eyes.Take notes to document what you discover of bad practices. Then, as you're getting settled with the team, pull out your notes at an opportune moment, like when it's time for refactoring.
https://softwareengineering.stackexchange.com/questions/77516| Are naming convention guidelines worth caring about?| I name my variables using the .Net conventions:camelCase for variables and fields (I tend to use _camelCase for private fields in a class)PascalCase for methods, properties and classesThe only place I deviate is on constants and Enums where I actually prefer the Java SCREAMING_CAPS style.My company's codebase is littered with the pseudo-Hungarian notation style from VB6 and VBScript, if not full-blown Hungarian i.e.s or str for Stringsi or int for Intsd for decimal (or sometimes double)o or obj for any kind of objectI cringe whenever I see that code style used in someone else's code (even in greenfield code, not just the legacy cruft), and I refuse to use that style myself.  I've brought up standardizing on the .Net naming conventions in the past and it's just ignored - the people who write in Hungarian notation continue to do so, those of us who don't like me continue to use our own style; I'm a little afraid that if wedostandardize (which I keep pushing for, but nobody else seems to care), it'll be on Hungarian notation and not the recommended way and then I'll be forced to write code like that.Am I making a mountain out of a molehill in regards to this?  Should I not care if the code is littered with redundant identifiers and not descriptive names, and continue to use my own way and push for that to become the standard?| The only thing you should care about is that you're working in a team where people don't care about cleaning up things a bit. That is very sad.Do what you do, continue to use the modern style and invite people (but not force them) to adopt it as well. It will take time of course. After some time you will see whether it's going anywhere and what you might be doing next.P.S. How about arranging a meeting on this issue and invite everyone involved. Then you will get their full attention, denote the problem and present your approach. It will give them something to think about. Perhaps from your local attempts they're not taking you very seriously.
https://softwareengineering.stackexchange.com/questions/80676| What's your suggestion if the company didn't recognize my contribution towards a big project? [closed]| Closed. This question isopinion-based. It is not currently accepting answers.Want to improve this question?Update the question so it can be answered with facts and citations byediting this post.Closed8 years ago.Improve this questionI am an entry level developer with 1 year of experience. I have worked on a large scale project which I have played around 80% of the project work, those 5 months were terrible to me - late nights spent working, even Sundays.i have worked on whole Process Model , doing some of my colleagues work ,DB Design ,client feedback all this but the point is some of my work been owned by my Team Lead & hope now realize why i mention 80% of work is done by me!Now the project is completed, and the client seems completely satisfied with the work.But, I haven't found the company to give any sort of encouragement / appreciation. My seniors who where not involved in the project were given praise, leave, bonuses, etc. Also I was rejected permission to attend an important family function - that makes me ask "what's the credit I have now"?I have been wondering, is being honest/dedicated to the job what resulted in this situation?I have currently gotten 3 offers with good package - I've been thinking to move on to any of the companies now. What's your suggestion at this point of time?| Taking what you said at face value, and assuming that the seniors didn't spend their nights and weekends fixing or rewriting the code that you wrote ;-) ......there is no reason to stay where your work goes unrecognized and unrewarded.Caveat: do not take career advice from strangers on the Internet.
https://softwareengineering.stackexchange.com/questions/164552| How to communicate within a company what is being Continually Deployed| I work for a small development company, 20 people total in the entire company, 3 in actual development, and we've adopted CD for our commits to trunk, and it works great, from a code management and up-time side.  However - we're getting flak from our support staff and marketing department that they don't feel that they're getting enough lead time on new features and notifications on bug fixes that could change behavior.  Part of why we love the CD system is for us in development, it's fast, we fix the bug, add the quick feature, close the Bugz and move on with our day to the next item.All members of our company are now on HipChat at all times, and when a deployment occurs, a message is sent to a room that all company members are in, letting them know what was just deployed (it just shows the commit messages from tip back to the last recorded deployment).  We in development are also attempting to make sure that when we're making a change that modifies the UI or a public facing behavior, we post a screenshot to the All Company room and explain what the behavior change is, seeking pushback or concerns.  Often, the response is silence.  Sometimes, it's a few minor questions, but nothing that need stop the deployment from happening.What I'm wondering is how do other users of the CD method deal with notifications of new features and changes to areas of the company that are not development - and eventually on to customers in the world?Thanks,Francis| The best way to keep everyone in the loop is to have a set production deployment day/time on a reoccurring basis. Then you can send out a notification to all affected employees a list of all changes that will be implemented with the next deployment. This should be sent out well in advance of the changes being deployed (I would say at least an 8hr notice for non break-fixes), and preferably at the same time every cycle so all users know when they have to look for upcoming changes. Asking users to be continually aware of a chat-room message or up to date on their email at all times every day is unreasonable.On a side note it sounds like there is not staging/QA step in your process, if this is true you should add one, otherwise you are sitting on a time bomb.
https://softwareengineering.stackexchange.com/questions/165944| User Acceptance Testing Defect Classification when developing for an outside client| I am involved in a large development project in which we (a very small start up) are developing for an outside client (a very large company).We recently received their first output from UAT testing of a fairly small iteration, which listed 12 'defects', triaged into three categories : Low, Medium and High.The issue we have is around whether everything in this list should be recorded as a 'defect' - some of the issues they found would be better described as refinements, or even 'nice-to-haves', and some we think are not defects at all.They client's QA lead says that it is standard for them to label every issues they identify as a defect, however, we are a bit uncomfortable about this. Whilst the relationship is good, we don't see a huge problem with this, but we are concerned that, if the relationship suffers in the future, these lists of 'defects' could prove costly for us.We don't want to come across as being difficult, or taking things too personally here, and we are happy to make all of the changes identified, however we are a bit concerned especially as there is a uneven power balance at play in our relationship.Are we being paranoid here? Or could we be setting ourselves up for problems down the line by agreeing to this classification?| You can say "Reported Customer Issue" or anything else if it makes people happy.  I'm going to say "Bug" because it has such a grand history and is the industry standard term.  In a brand new bug list, you might expect to fix near 100%.  But the more bugs that are added to the list, the fewer you expect to fix.  In fact, most bug tracking tools let you close bugs for various reasons: duplicate, feature-request, unable-to-reproduce, on-hold, additional-feedback-needed, etc.The important thing is to capture the feedback and the actions taken on that feedback.  We make it very clear to our customers that we get to choose what bugs we fix and what features we implement.  We do it on the basis of what we think will make the most clients most happy, but it's our choice.Be respectful in providing feedback on these bugs.  If you aren't going to fix something, tell them why.  Sometimes it's OK to say that you aren't ready to commit to a particular solution to a given bug.  Or that a bug is out of scope for this release (or this product).  Or that a bug in how the system works might be "fixed" through improved documentation (such as tweaking the UI or documentation so that users don't do what caused the bug).  Obviously, if you fix some bugs, your client will be more open to your not fixing others.If the customer has major problems using your software, no bug naming system will make them happy.  If they love your software, the name won't matter either.  Make great software, be respectful to your client and don't get hung up on bug categories.
https://softwareengineering.stackexchange.com/questions/166043| How to explain why design choices are good? [closed]| Closed. This question needs to be morefocused. It is not currently accepting answers.Want to improve this question?Update the question so it focuses on one problem only byediting this post.Closed9 years ago.Improve this questionAs I've become a better developer, I find that much of my design skill comes more from intuition than mechanical analysis. This is great. It lets me read code and get a feel for it quicker. It lets me translate designs between languages and abstractions much easier. And it lets me get stuff done faster.The downside is that I find it harder to explain to teammates (and worse, management) why a particular design is advantageous; especially teammates that are behind the times on best practices. "This design is more testable!" or "You should favor composition over inheritance." go right over their heads, and lead into the rabbit hole of me trying to clue everyone in to the last decade of software engineering advances.I'll get better at it with practice of course, but in the mean time it involves a lot of wasted time and/or bad design (that will lead to wasted time fixing it later). How can I better explain why a certain design is superior, when the benefits aren't completely obvious to the audience?| This may not directly answer your question, but it might lead you in an interesting direction.I think what you need to do is more related tosellingthem on the idea thanexplainingit to them. Sales is all about understanding what the customer's problem is and then showing them how your product (or development method, whatever) will benefitthem.Each person has different needs, so those things that benefit one person and gets them excited may very well leave another person cold.For your CEO time-to-market may be the key, for your manager it might be more predictable schedules, for your programming colleagues it might be faster coding (or easier testing / documentation / debugging / whatever), and for your company's customers it might be ... ?Sales does not happen automagically -- you have to make a concerted effort to understand theother person'spoint of view, and then figure out how to map your ideas into their Happy Place™. Once they know howtheywill personally benefit from this new thing, they often ask, "How much will it cost and how soon can we do it?" Once you hear those magic words you know you have done your sales job well.
https://softwareengineering.stackexchange.com/questions/168116| Is it a bug or a task when something doesn't work, yet, in development process| We usually have this dilemma in our team.  Sometimes, in order to implement a task or a story we find out that the system must be in a specific state.  For example, a specific system configuration has to be made beforehand.The task / story can be completed and it is working as specified on it with the proper configuration in place.  Note that the configuration is not directly related with the task.Next, we have to create a new ... ??? ... something for the process of generating that configuration file.  This is where the problems appear.  Some say that it is abugothers say it is ataskor an extrafeature.So, where is the limit between bugs and tasks in the development phase?  Should we even consider something a bug if all the tasks are working as stated in their definitions?  Can a thing be considered a bug because one compares it to the current (unstable) state of the system?Short example:A feature requires configuring a communication service for a specific operation.In the process of the implementation the team discovers that the service requires the hostnames of the pears to be resolvable to an IP address.The team adds the hostnames to the DNS server (or hosts files) and continues implementing the required feature.After the initial feature is working, a question is risen. Should the sysadmin configure the DNS or hosts file or should our application do it automatically?An automatic solution is possible. So a decision is made to implement it.... here start the discussions ... is this a bug or an extra feature / task?PS: I know that I mixed feature / task / story in the question.  It is intentional.  I am interested in separating bugs from the rest.  Doesn't matter whatthe restmeans in a particular case.| I would call this a task. If I understand you correctly, it is meant to enable a new feature, so it is not a bug fix - otherwiseeverythingshould be called a bug.If the change made by this makes a meaningful difference to end users (independent of the main feature it is meant to support / enable), you may consider calling it a (sub)feature.All in all, no need to agonize too much on terminology, the main point is to get it done :-)
https://softwareengineering.stackexchange.com/questions/383052| Should we be documenting our Scrum Retrospective feedback before the Retrospective meeting?| Our Scrum master wants us to document our feedback for the iteration before our Retrospective. Her argument is that she wants us to have time to document our feedback. Another guy on the thinks that we should be documenting our feedback during the meeting or right before the meeting.I'm a college hire so I'm still learning how best to do this. Is there a proper way we should be handling our Retrospective feedback?| There's no prescribed way to document Retrospective feedback, but there are some things to consider.The most important thing to consider is that the team needs to be able to be open and honest. If you are using an electronic tool and requiring people to complete retrospective notes before a meeting, then it is likely that the authorship of those notes may be tied to individual people. The people involved may be more likely to not be completely open and honest if they know that others from outside the team can see what they are writing.That said, it is important to be prepared for the retrospective to make sure the time is well used. Perhaps allowing the team to add notes to an electronic tool is a good way to do that. But it needs to be balanced with the free, open, and honest communication between team members. I would think that it is unreasonable to have a "finished" retrospective page before the meeting and not be editing it during the meeting.From my perspective, the most recent team that I worked with used Confluence for retrospective notes. The retrospective page was posted early in the Sprint and the team could optionally add notes to talk about so they wouldn't forget things. However, at the retrospective itself, I (as the Scrum Master for the team) was making additional notes and edits so further discussion couldn't be tied to individual people. The only expectation was that the team come prepared to have the discussion, and it seemed to go over well with the team.The team should be empowered to choose their way of working to the extent possible based on the constraints of the organization. Your Scrum Master should not be dictating the way your team works, but coaching you on effective techniques and enabling you to do the work that needs to happen.Focus on the problem and try to come up with good solutions, as a team.
https://softwareengineering.stackexchange.com/questions/176157| How would you react if someone told you your code is a mess?| Want to improve this post?Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.I am a good programmer, or so I thought before. I always love to program. And I want to learn many things about programming to make me a better programmer. I studied programming for 1 year and now I am working as a programmer for almost 2 years. So in short, I have almost 3 years programming experience.Our team is composed of 5 programmers, and 4 of us are new, 1 has more than 3 year experience. We've been working for a program for almost a year now and nobody ever review my code and I was given a page to work with. We never had a code review and we are all new so we don't know what is a clean code looks like. I think programmers learn by themselves?We deployed our program to the program without thorough testing. Now it is tight and we need an approval and code review first before we make changes with the code. For the first time, someone reviews my code and he says it is a mess.I feel so sad and hurt. I really love programming and making them say something like that really hurts me. I really want to improve myself. But it seems like I'm not a genius programmer like in the movies. Can you give me advise on how to be better? Have you ever experience something criticizing your code and you feel really hurt? What do you do on those events.| The truth is that probably in 2 years when you will see your current code you will agree that it was a mess. Learning programming is a never ending process and there will always be someone who is better at it than you.So if person who said that your code is a mess is not just mean and it is not another case of "I would do it better" disease common among programmers you should ask him/her what exactly is wrong with your code and how can you improve it.
https://softwareengineering.stackexchange.com/questions/177174| How to tell whether your programmers are under-performing? [closed]| Closed. This question isopinion-based. It is not currently accepting answers.Closed8 years ago.Locked. This question and its answers arelockedbecause the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.I am a team lead with 5+ developers. I have a developer (let's call himA) who is a good programmer, who writes good clean, easy to understand code. However he is somewhat difficult to manage, and sometimes I wonder whether he is really under-performing or not.Our company requires the developers to indicate the work progress in the bug tracker we use, not so much as to monitor the programmers but to keep the stakeholders apprised of the progress. The thing is,Aonly updates a task progress when it is done ( maybe 3 weeks after it is first worked on) and this leaves everyone wondering what is going on in the middle of the development week. He wouldn't change his habit despite repeated probing. ( It's OK, developers hate paperwork, I do, too)Recent 2-3 months he on leave quite often due to various events-- either he is sick, or have to attend a lot of personal events etc. ( It's OK, bad things happen in a string. It's just a coincidence)We define sprints, or roadmaps for each month. And in the beginning of the sprint, we will  discuss the amount of work each of the developers have to do in a sprint and thedevelopers get to set the amount of time they need for each task. He usually won't be able to complete all of them. (It's OK, the developers are regularly missing deadlines not due to their fault).I am based in Singapore. Not sure if that matters. Yeah, Asians are known to be reticent, but does that matter?If only one or two of the above events happen, I won't feel thatAis under-performing, but they all happen together. So I have thefeelingthatAis under-performing and maybe-- God forbid--- slacking off.This is just a feeling based on my years of experience as programmer. But I could be wrong.It is notoriously hard to measure the work of a programmer, given that not all two tasks are alike, and there lacks a standard objective to measure the commitment of a programmer to your company. It is downright impossible to tell whether the programmer is doing his job or slacking off. All you can do, is to trust them-- yeah, trusting and giving them autonomy is the best way for programmers to work, I know that,so don't start a lecture on why you need to trust your programmers, thank you every much-- but if they abuse your trust, can you know?Outcome:I've a straight talk with him regarding my perception on his performance. He was indignant when I suggested that I had the feeling that he wasn't performing at his best level. He felt that this was a completely unfair feeling. I then replied that this was my feeling and I didn't know whether my feeling was right or not. He would have none of this and ended the discussion immediately.Before he left he said that he "would try to give more to the company" in a very cold tone. I was taken aback by his reaction. I am sure that I offended him in some ways. Not too sure whether that was the right thing to do for me to be so frank with him, though.My question is: How can you tell whether your programmers are under-performing? Surely there are experience team leads who know better than me on this?Extra notes:I hate micromanaging. So all that we have for our software process is Sprint ( where tasks get prioritized and assigned, and at the end of the month, a review of the amount of work done). Developers would require to update the tasks as they go along everyday.There is no standup meeting, or anything of the sort. Mainly because we have the freedom to work from home and everyone cherishes this freedom.Although I am the one who sets the deadline, but the developers will provide the estimate for each tasks and I will decide-- based on the estimate-- the tasks that go into a particular sprint. If they can't finish the tasks at the end of the sprint, I will push them to the next. So theoretically one can just do only 1 or 2 tasks during the whole sprint and then push the remaining 99 tasks to the next sprint and still he will be fine as long as justifies this-- in the form of daily work progress updates| This should be a surprisingly easy problem to solve.Have a second meeting with him. Tell him that you accept that it's probably your perception of reality that is at fault. Then qualify that with "however, if that is the case then we need to work together to improve my perception." Finallychallenge himto solve that problem, so he doesn't feel micro-managed.This exact thing happened to me a long time ago. For me, the issue was that I dislike the possibility that anyone might think I'm seeking extra credit for simply doing my job. And that was fair enough, butthere has to be a regular feedback loop between any member of staff and their line-manager.If there isn't then you get these problems.Regular, planned, 1:1s are a great idea. And, as people have pointed out, standups do not need to be orthogonal to working from home. But they must involve the three questions: What did you do yesterday? What are you planning to do today? And the one most people forget ... What (if anything) is holding you up?That said, youshouldtry to discourage situations where team members never work together. I've worked in that situation before and it seeded distrust within the team and outside it. Have a regular day that you all come into the office. Have a regular meeting where people can voice some ideas on improving processes or whatever.Don't make it a line-reporting event. Make it an opportunity to just talk. You'll be surprised what you learn. If possible, turn that into a social event, go for a couple of drinks on work time as a bonding exercise.
https://softwareengineering.stackexchange.com/questions/95065| When to confront a good project leader or boss| Our project head is a genius software architect, a gentle and considerate person in general, a geek by nature and delicate by voice. But, at times, we (my teammates and I) differ in opinions -- especially of software architecture issues, system design issues, UI issues, etc., with our leader.When and how (if ever) should we express the difference in opinions?| Suppose you think your boss is wrong. You have three optionsdo what he says and end up frustrated thinking that you do something stupid - not very good long termtell him he's an idiot - he'll either ignore it or you get communication problems - gets you nothing or hurts you.tell him that you havespecific concernsabout the ideas he proposes andexplain those concerns- any good boss will explain his position and then you can get to a decision that is good for the business. It's quite likely you'll see that his idea is better than yours and you've been ignoring something very important.Always think of the outcome. In most cases you don't want to be right for the sake of being right, you just have to do good job. The third option helps achieve that.
https://softwareengineering.stackexchange.com/questions/101849| How much should Developers interact with Clients? [closed]| Closed. This question needs to be morefocused. It is not currently accepting answers.Want to improve this question?Update the question so it focuses on one problem only byediting this post.Closed10 years ago.Improve this questionA philosophical discussion has come up in my department that I'd like p.se's opinion on. We're a 6 person development department inside a 60 person IT shop. All other departments are growing FAST, and ours has been the same size (and not fully booked at that size) for a few years.My manager, and old-school mainframe guy, contends that developers should never ever have ANY client contact. That all interaction with the client should be mitigated by a Project Management layer. He asserts that this allows a coder the focus they need in order to CODE, and protects the business's relationship with the client from the autism-spectrum tendencies of Joe Average Code Monkey. (My words, not his.)His boss, the owner of the company, told him this morning that every single person in the company needs to think of themselves as an extension of the sales department, and needs to be listening all the time for upsell opportunities. To this end, he thinks clients ought to have more or less full access to developers directly, in part so that devs have the opportunity to hear sales opportunities.I'm somewhere in the middle, myself. I think it's nice to shield devs from clients to some extent, but in practice that will never be total. And yes, every single job in the company includes sales, but that doesn't necessarily mean that everyone has the same opportunity for it.EDIT: We're not an agile shop. Some of us (cough) would like to head that direction, but for now assume this is a traditional fixed-bid-contract shop.EDIT2: The autism joke wasn't funny. Got it. Entirely possible that autism jokes never are. That said: there are developers who have a capacity to represent themselves and their employers well and developers who don't (currently) have that capacity. My manager has a real concern about how the company would be represented if all developers were structurally empowered to be company representatives.It's also getting increasingly clear from reading your responses that the real push-and-pull here is between waterfall and agile.| Personally I would not work anywhere that I didn't have the opportunity for direct client contact. Trying to resolve an issue with the requirements when you have to go through layers of PMs and BAs is painful and the message never gets through clearly. I want this access to improve the product so that it actually reflects the clients needs and not the interpretation of those needs by someone who doesn't know the right questions to ask.It may be relevant in my answer that I do database ETL work and often a 5-10 minute conversation with the client's IT person can resolve a long-standing issue with imports or exports. Sometimes our IT people need to talk to their IT people. This is especially true if this is a delta import or one that goes two ways. I have to understand their database structure and needs as well as my database's needs. Direcly talking is the only way to get this information.However, I do not want the client to routinely be given my email and phone as some of them will call directly when they should not. I only need to to talk to them when there is an issue we can't resolve any other way. And you have to be able to set boundaries so they don't try to take advantage of the access to get work from you that they aren't paying for. I always refer any new requests outside the bounds of the issue we are supposed to be discussing to the sales side.Even when directly talking to the client, I rarely, if ever, see an additional sales opportunity, my brain just doesn't work that way.
https://softwareengineering.stackexchange.com/questions/188418| How to represent calculated deadline is reasonable?| As a Lead Programmer my responsibilities include calculating the deadlines of the projects.To do this I have discussion with related team players and calculate a deadline estimation. Sometimes, I got a scared voice from CTO saying that the estimated deadline is too much. Then I have to shorten the deadline. With a shorter deadline, programmers have to work with extra pressure.How can I represent (points) to the CTO that the calculated deadline is reasonable?| One time-proven way is the scientific method, one could even say a data driven method :)Ask a Question (When are we done?)Do Background Research (What needs to be done? Divide et impera).Construct a Hypothesis (Calculate the time of completion, deadline).Test Your Hypothesis by Doing an Experiment. (Do multiple sprints, so you get real data from past sprints and estimations. The truth is in the data).Analyze Your Data and Draw a Conclusion. (How accurate were we? Make adjustments. Learn. Repeat. Iterate.)Communicate Your Results. (Tell your client/boss/CTO)Multiple iterations is the key, so you get the real data to build on!Source:Steps of the Scientific Method
https://softwareengineering.stackexchange.com/questions/193804| How do I take responsibility for my code when colleague makes unnecessary improvements without notice?| One of my teammates is a jack of all trades in our IT shop and I respect his insight.However, sometimes he reviews my code (he's second in command to our team leader, so that's expected) without a heads up. So sometimes he reviews my changes before they complete the end goal and makes changes right away... and has even broken my work once.Other times, he has made unnecessary improvements to some of my code that is 3+ months old.This annoys me for a few reasons:I am not always given a chance to fix my mistakesHe has not taken the time to ask me what I was trying to accomplish when he is confused, which could affect his testing or changesI don't always think his code is readableDeadlines are not an issue and his current workload doesn't require any work in my projects other than reviewing my code changes.Anyways, I have told him in the past to please keep me posted if he sees something in my work that he wants to change so that I could take ownership of my code (maybe I should have said "shortcomings") and he's not been responsive.I fear that I may come off as aggressive when I ask him to explain his changes to me.He's just a quiet person who keeps to himself, but his actions continue. I don't want to banish him from making code changes (not like I could), because we are a team--but I want to do my part to help our team.Added clarifications:We share 1 development branch. I do not wait until all my changes complete a single task because I risk losing some significant work--so I make sure my changes build and do not break anything.My concern is that my teammate doesn't explain the reason or purpose behind his changes. I don't think he should need my blessing, but if we disagree on an approach I thought it would be best to discuss the pros and cons and make a decision once we both understand what is going on.I have not discussed this with our team lead yet as I would prefer to resolve personal disagreements without getting management involved unless it is necessary. Since my concern seemed more of personal issue than a threat to our work, I chose to not bother the team lead. I am working on code review process ideas--to help promote the benefits of more organized code reviews without making it all about my pet peeves.| You and most of the answerers approach this as a communication issue between two colleagues, but I don't really think it is. What you describe sounds more like a horriblybroken code review processthan anything else.First, you mention that your colleague is second in command and it's expected that he'll review your code. That's just wrong. By definition, peer code reviews are not hierarchical, and they are certainly not just about finding defects. They can also provide learning experiences (for everyone involved), an opportunity for social interaction, and prove a valuable tool for building collective code ownership. You should also review his code from time to time, learn from him and correct him when he's wrong (no one gets it righteverytime).Furthermore, you mention that your colleague makes changes right away. That's also wrong, but of course you already know it; you wouldn't have asked this question if his gung ho approach wasn't a problem. However I think you are looking for a solution in the wrong place. To be perfectly honest, your colleague reminds me a bit of... me, and what worked for me in similar situations was a well-defined and solid review process and a set of awesome tools. You don't really want to stop your colleague from reviewing your code, and asking him to stop and talk to you before every little change is not really going to work. It might, for a while, but he'll soon reach a point where it will just get too annoying and you'll be back where you started, or worse: he'll just stop reviewing your code.A key to a resolution here might be a peer code review tool. I usually avoid product recommendations, but for code reviewsAtlassian's Crucibleis really a life saver. What it does may seem very simple, and it is, but that doesn't mean it's not amazingly awesome. It hooks up to your repository and gives you the opportunity to review individual changesets, files or group of files. You don't get to change any code, instead you comment on everything that doesn't feel quite right. And if you absolutely must change someone else's code, you can simply leave a comment with the changeset explaining your changes. The introductory video at Crucible's product page is worth watching if you want more details. Crucible's pricing is not for everyone, but there are numerous freely available peer review tools. One I've worked with and enjoyed isReview Boardand I'm sure you'll find a lot of others with a simple Google search.Whatever tool you choose, it will completely change your process. No need to stop, get off your chair, interrupt the other person and discuss the changes; all you need to do is set some time off every week and go through the comments (once a week is just a suggestion. You know your schedule and daily routine better than I do). More importantly the core reviews are stored in a database somewhere and you can retrieve them at any time. They aren't ephemeral discussions around the water cooler. My favourite use case for old reviews is when introducing a new team member to our codebase. It's always nice when I can walk someone new through the codebase pointing out where exactly we were stuck, where we had differing opinions, etc.Moving on, you mention that you don't always find this colleague's code readable. That lets me know that you don't have a common set of coding standards, and that's a bad thing. Again you may approach this as a people problem or you can approach this as a process problem, and again I would strongly suggest the latter. Get your team together and adopt a common coding style and set of standards as soon as possible. It doesn't really matter if you chose a set of standards that's common in your development ecosystem or you come up with your own. What really matters is for your standards to be consistent and that you stick to them. Lots and lots of tools out there can help you, but that's a whole different discussion. Just to get you started, a very simple thing to do is having a pre-commit hook run some kind of style formatter on your code. You can continue writing your code however you like and let the tool "fix it" automagically before anyone else sees it.Lastly you mention ina commentthat management does not believe individual dev branches are necessary. Well, there's a reason we call them "dev branches" and not "management branches." I'll stop here as there's no reason for the rant that's forming in my head to get out.All that said, know that I don't doubt your colleague is (a bit) at fault here. That's not my point, my point is that your whole development process is also at fault, and that's something that's easier to fix. Arm yourself with the proper tools, explore the numerous formal and informal processes and pick those that fit your team. Soon you'll reach a point where you'll realize that most of your "people problems" don't exist anymore. And please don't listen to anyone (including yourself) that brings forth the "we're a small team, we don't need all that" excuse. A team of competent developers can set up the necessary tools in less than a week, automate everything that can be automated, and never look back again.PS. "Code ownership" is a nebulous term, constantly debated, and it means different things to different people. You can find a brilliant collection of most of the differing (and sometimes antithetical) opinions onC2.
https://softwareengineering.stackexchange.com/questions/198767| What to do as a Dev when for years their team has lacked product innovation, not used project mgmt methodologies, and kept bad Software Dev practices? [closed]| Closed. This question needs to be morefocused. It is not currently accepting answers.Want to improve this question?Update the question so it focuses on one problem only byediting this post.Closed10 years ago.Improve this questionI am interested in knowing how to deal with a current software development process that has not been changed for years and will eventually lead to product and team failure. Yes, probably the easier way to solve this is changing jobs, but with this economy is easier said than done. However, if you have specific examples and have seen or been multiple times in same situation and think that the best solution to address these issues, is to leave the company, then please support your answer. The point is, this question really has an answer especially if multiple experts on the subject end up indicating that the best route to go is : route A.I know tons of developers have been or are in similar situations. This is one of the main reasons why companies go from being # 1 in their market to becoming last or even off the market. Hopefully the answers in this post will help other developers facing similar obstacles. In a small or large development team this usually happens:Some developers seem not to care and decide to go with the flow and prefer to leave code with lots of code smell the way it is and development process as is,Others get tired of no change and resign and move to another company,Others seem to be afraid to talk and prefer to stay quiet,At times very few developers or just one tries to speak up for improvement of product, and tells the team how important is to follow best coding practices and benefits of doing so for clients, users and team. These type of developers usually decide to stay with the team due to reasons such as company offers benefits that very few software companies offer, or the product has lots of potential, etc.The product in our team is just a fraction of where the company gets its revenue from as it has an umbrella of products (this company is not a software/hardware company; therefore, no constant patent litigation, at least for now, which creates job instability). What I have learned so far during these years from other developers’ experiences and my experience is that to really know a development team, it takes time, not days, nor weeks, but a few months. During the interview process if the team wants to hire you, or needs you; they make everything sound great, and they might tell you what you want to hear. However, the reality is different when you start working in that team and begin digging inside the code and moving towards the complete SDLC process.  This is when as a developer, you start seeing the reality of the job you got into. This reality makes it difficult to want to move from one company to another because it is hard to know if the company you move to will be better or worse. Yes, you can read Glassdoor reviews etc.., but how many of those online reviews are real, and not from HR?What would be the best way to tackle the issues outlined below considering that manager from the beginning has always resisted to change, and previous developers have been doing the same for years?Lack of product Innovation for years: Product has lots of potential and brings good revenue to the company, but product looks like it was made 20 years ago. Some users have complained that product is not user friendly nor intuitive, and others have mentioned that are used to apps like Gmail and get frustrated when using the product because of not having similar features. The main issue here is that when you try as a developer to make changes to the product and start to move main elements of product around just a couple pixels away (to make it more user friendly, or intuitive), manager panics, and tells you to put it back where it was. If you try to add a feature that will benefit productivity for users, manager asks you to  remove it because of "users are used to doing the process the way it is etc.." I think you got the point of the resistance to change, improvement and innovation (manager is not open to change, even when you as a developer provide strong arguments of benefits). Company has a few competitors in the field (the products of few of them are way more competitive), but somehow the company has maintained the current clients for years.Lack of project management coordination: As a result of this, some projects are delivered late, with bugs and some clients complain (clients report the bugs too), or budget is used too fast prior to delivering project etc.. I've provide them a few project coordination tips and the ideas are now being used regularly to track progress of projects and tasks to be done.Bad software Development Practices: Code smell is seen on most if not all files, no documentation, code redundancy, front end tier and back end mixed on same file, outdated development tools, no a real testing environment nor test tools (just copy and paste files from dev environment to production, and then test manually that things look good and release) . Most of the development tools I use for development and testing where unknown by team, as team only uses 2 IDEs for code development and source control is only available for development environment. Other developers have tried to use latest frameworks to improve current issues, but manager does not like it because of "what if you leave, then who is going to maintain that code?, let’s leave it the way it is" Some of those developers already left and moved to another companies.In summary, I am sure similar situations happen to many developers in other companies but due to different circumstances, a developer might prefer to stay in the team than going to another company for reasons like (convenience of job, work flexibility, company benefits, or just because a better opportunity has not arrived). There is not perfect company that I know of, but how would you as a developer behave and approach all these issues in order to keep things positive and ultimately promote change for the improvement of product and betterment of the software development process (whether you have many years of development experience or just a few)?I know this is post is long, but I preferred to give extra details to increase chances of getting more useful feedback.Thanks a lot for your all your feedback and time| Martin Fowler's quote is relevant:  "You can change your organization or change your organization."  Given that you've apparently decided to change your organization (make it better) instead of change your organization (work for a different organization), here are a few suggestions.First, a lot of your course of action depends on details about the power structures and politics at work.  Is there one software development manager, or several?  If several, are there any of them who aren't change-averse?  How many software developers are there?  Are the developers interested in changing?  If so, there are some changes that you should be able to make even without management approval.  (As Fowler suggests inRefactoring, you may not even have to tell management.  You're presumably hired to develop software as best you can, so if there's a better way of doing it, then just do it.)Second, keep in mind that management may have good reasons for what they're doing.  You're a software developer; your job is to develop good software and to know good techniques for doing so.  Management's job is to understand bigger picture issues and business considerations that may be beyond your purview.  Even if you're right and they're wrong about what the business considerations are (your concerns about lack of innovation, late delivery, customer complaints, etc.), understanding where management is coming from will help you communicate in their terms, alleviate their concerns, and so on.Third (and related), make sure you can speak the language of business.  A business is (rightly) not directly concerned with good software development practices; a business is concerned with serving customers' needs and making a profit.  (And many businesses will obviously do the minimum needs-serving possible to make a profit.)  You'll be more effective at promoting change if you can explain how bad software development practices and lack of innovation will hurt the company's profit or long-term health.Fourth, changing a company culture from the position of a rank-and-file worker is extremely hard.  James Shore (an agile consultant and author) wrote aChange Diarydescribing his own efforts at doing so.  I'd strongly recommend reading the whole thing.  A few relevant points:Don't try to change everything at once.  Find the biggest pain points and start there.  Get everyone on board by helping them to see how your changes address those pain points.Understand others' perspectives.  Shore talks about how the changes he was pushing from a software development perspective were resisted by the project manager because he (Shore) failed to consider how the changes would affect the project manager.Eventually, you'll needsomesupport from higher up, even if you're prompting most of the changes yourself.  Shore talks about hischampion("somebody I work with who has more clout than me and thinks along generally the same lines I do").
https://softwareengineering.stackexchange.com/questions/411608| Ways to explain code when told it doesn't make sense| As a programmer I have found my code frequently elicits the reaction "I don't understand". Whenever I get this response I try my best to explain my code patiently, and not make anyone feel afraid to ask questions.I am pretty sure I've got the second part right, people are certainly not afraid to ask questions about my code!However I have good reason to believe my explanations are not effective. I routinely have hour long discussions trying to explain my code, and on many occasions the conversations have ended with my coworker saying they still don't understand, but they have somewhere else to be (lunch, or home, or a meeting, etc).I believe this is a problem with my code, as I cannot recall the last time some else's code has taken an hour of explanation to understand. As well, I rarely see my coworkers spending anywhere near as much time explaining their code to each other.Specifically, when posed with the question "I don't understand your code", what are some strategies I can use to explain my code?I have previously employed the following follow up questions, and I am looking for better, or at least more, follow questions:What part specifically seems to be confusing?Sometimes this works, but often the answer is "the whole thing". I have been in meetings with 5 other programmers, where all of the programmers agreed they didn't understand my code, but none of them could give any specifics parts which were confusing.Are you familiar with pattern "X"?I have tried to learn the names of the coding patterns I tend to use. I will bring up these names, such as "the visitor pattern", and ask them if they are familiar with this pattern. If they are familiar with it I try to show them how my code is an implementation of that pattern. This seems to stop them from immediately asking more questions, but invariably we seem to come back to the same code, and so I am afraid while they fully understand the pattern, the connection between the pattern and my code is not obvious.What are some solutions to problem "X"?Sometimes I try to get them to actively engage with solving the general problem, hoping that if they explain how they would solve it, I can show them the parallels between their solution and mine. This works, however often times the problem is a bit too complicated to just solve in your head, and so they can't quickly describe how they would solve it.ADDITIONAL INFORMATION:The code I work on most frequently is framework/architectural code, often legacy code which no one presently with the company is familiar with. My team is very busy, and while they are patient, they honestly don't have the time to help me work through legacy code. As a result my approach as been to fully understand it myself, and then try to explain it to my team during team meetings.They will be interfacing with it though, and they interface with the existing code on a daily basis.An example of this type of code would be our log pipeline, which takes browser errors, server errors, service errors, http logs, javascript logs, web logs and correctly joins time with session information, going through a few steps before the data eventually ends up in splunk. It isn't exactly complicated, but it also isn't exactly trivial, as the servers needed to handle tens of millions of logs per day, without any significant impact on server performance (our servers are already more expensive than my yearly salary).CODE SAMPLES(Please excuse the text dump. I tried to keep it short, but code samples seem like the best way to demonstrate my problem).I put together a code sample of one piece of code that seemed to confuse my teammates the most. I no longer work at the company, so it isn't the exact code, and the exact code was scrapped anyway (it confused everyone, so we all agreed no one should use it).A bit of background, our company was beginning a major rewrite, converting from a legacy framework to React/Typescript/Redux. There were regretting using Redux, but due to our browser support restrictions we were unable to use Mobx. As a result we were using Redux poorly, trying to make it work like Mobx, or KnockoutJS. The majority of our reducers simple set state, with the caller knowing exactly what they wanted to set (not how Redux action/reducers should work). However due to time constraints, we simply could not switch frameworks, and had to make Redux work. That was at least 3-4 years ago, and I would be surprised if the team was still using Redux now.(I've linked to the Typescript playground for my code, as it is a bit long for a question)An example of existing code can be found here:original codeI am opposed to this style, as although it is clear, it requires changing 4 pieces of code (spread across 3 different files) to add a variable. The steps to adding a new variables are: update thestatedefinition, add a newaction, add to theactions union, and add areducer handler.I made abuilderclass (a term I may not be using correctly, basically it is like yargs,https://www.npmjs.com/package/yargs, where you make a series of chained function calls to create a more complex object) that makes it possible to only add properties to one place, while preserving the types of everything.(This was before Typescript mapped types, which provides alternatives to the builder approach).A recreation of my proposed code can be found:changed code| Personally, I have encountered multiple variants of code-that-is-hard-to-understand, and each needs a different way to cope with:Simply messy.Formatting is off, variable names are not clear, convoluted control structures, methods with multiple responsibilities. => Learn cleanliness, use a formatter.Patternitis:applying patterns for each and every aspect of the code. Instead of a simple "if" apply a subclass strategy with two visitors derived from an abstract visitor, which is created by two factories which are derived from an abstract factory, which is selected via a strategy... (search for "FizzBuzz enterprise edition" on the net) => Understand the basis of patterns. A pattern isnota standard way of solving things, it is a name that you tack on a solution that you found. You don't go from a problem to "which pattern might I apply here", you go from a problem to a solution, andthensay "oh look, my solution follows the form of a visitor pattern, it has a name!"Abstraction mess:instead of having a simple class that does a thing, have two to five abstract base classes, which results in a control structure, where a simple function call goes through abstract and overriden methods in subclasses all over the place. => YAGNI. Embrace this piece of extreme programming. There is no "I might need this in the future, so I split it off now".Misunderstood clean code:"good code needs no comments", and then writing code, that is not self-explanatory, but without any comments b/c "it's good". => These are the hardest to crack. If anyone knows a solution, I'd love to hear suggestions myself.Mathematicians code:looks like a proof on a whiteboard. No variable name longer than a single character, no comments, no explanation. => Teach the mathematician the values of software development, and hand them a copy of "clean code".What many junior programmers don't understand at first is, that the greatest value in software is SIMPLICITY. Don't try to be clever, don't try to optimize runtime (at least, not until you actually find a concrete problem), don't add an extra abstraction because you might need it in the future.Always do the simplest thing that solves the problem at hand. No more. No less.Seemingly, the part about the "misunderstood clean code" needs some clarification. I never meant to tell anyone personally that good code needs no comments.The remark comes from the following situation, which Ioftenencountered with some ex-colleagues:Programmer A: I have written cool code, I understand it. As I have read the book "clean code", I know that comments are not necessary for self-explanatory code, therefore I do not comment.Programmer B: I don't understand a single line of what you have written.Programmer A: Then you are not smart enough to understand good code.The problem here is, that Programmer A does not see his own mistake, but loads it off to lack of understanding on B's side. As this is his understanding, he'll probably never change his ways, and continue to write mumble-jumble which only he understands, and refuse to comment it, ashesees it as plainly self-explanatory. (Unfortunately, nobody else shares that view.)Regarding your code samples: I am not really proficient in TypeScript, so frankly, I don't exactly understand the finer points of what you have done there. (Which probably already points to the first problem.)What I can see from the first glance and a few line counts:You have replaces 40 lines of perfectly readable code (heck, evenIcan understand that) with roughly 60 lines of hard-to-understand code.The resulting change in usage is probably something along the lines of:// old let v = userReducer(x, y);  // new let v = new ReducerFactory().addStringProp("x").addStringProp("y").createReducer();So, the question is "why?".Let us assume that you have taken half a workday to do the concept, the implementation, and the testing. Let us further assume, that one developer day costs $1000.It is quite well known that code that must be maintained has a much higher cost of ownership than the price of initial development. From experience, a good guess is times ten for simple code, and times twenty for complicated code (which I apply here.)Therefore, you have taken $500 * 20 = $10000 of company money to create which business value? That the creation of a given object is somewhat "more elegant" in your personal view?Sorry, as I see it, you do not need arguments to explain what you have done. You need education and experience in software architecture, where you learn to put value on the right things in business.
https://softwareengineering.stackexchange.com/questions/203996| Scrum: How much can the Product Owner shake up the Product Backlog?| For the last 3 sprints or so, I've observed our Product Owner suddenly shoving new stories -- stories not previously in the Product Backlog -- at the top of the Product Backlog.Because of this, the existing items in the backlog never get worked on.  New stories continuously take over the helm and make into our Sprint Backlog.My question is - how much can the Product Owner really shake up the Product Backlog?  Is it really fair game to ignore what's already in the backlog and keep on shoving new stories at the top?I've tried to argue that this is hogwash, but I often hear counter-arguments such as "adapting to frequently changing business needs," "we're moving so fast - we're super agile" and I don't know what to say to those arguments, although I feel it is not how Scrum was meant to be.EDIT: I understand that the product owner owns the product backlog.  What I am observing at my team though, is that the PO constantly puts new items at the top of the backlog, ignoring the existing backlog items completely.For instance, say we're building a car and PO creates 10 stories to make it happen.  We decide to take on 3 stories in our sprint backlog - thus 7 stories still remain in the product backlog.  Everything is good so far.At the next sprint planning, however, the PO now claims that we need to build a baseball bat and creates 5 stories around that - which are then placed at the top of our backlog (i.e. highest priority); nevermind those car stories we already had in the backlog.| > how much can the Product Owner really shake up the Product Backlog?It is the job of the Product Owner to "shake up the Product Backlog".In Scrum it is the job of theproduct ownerto  rank and prioritize the features in theProduct_Backlog.product owner and team agreewhat to implement in the next sprint and put these features into theSprint_BacklogYou as a developer have to argue if you need technical features in the sprint log that the product owner doesn't see.
https://softwareengineering.stackexchange.com/questions/206328| How do I deal with a difficult programmmer joining an open source project?| I have an open source script for a specific site (I'm trying not to call anything by name here) that I and a few other developers recently moved to GitHub. We've gotten several new developers since we moved to the new system, including one very active one in particular. However, this active one has started changing a lot of the project.First of all, he deleted our versioning system (not like Git, but like that -- we called it versionsv4.1.16) and said it would be better to simply push the code to the site when we think it's ready. Now there's no centralized place to put release notes, which has gotten annoying.The thing that has gotten me just about ready to pack my bags and go was the push script. Another developer on the project wrote a simple Python-based push script. Since we keep multiple versions of the script online in various places, I began coding a larger Java program with a graphical interface that will replace the Python script. I went on IRC to notify everyone about it, and I got a very annoying response from the programmer saying that the old Python-based script can do everything mine can do and is so much more lightweight (he also commented about the fact that he thought Python was better than Java and so on). I looked over the code for the old push script and saw that none of the features he said existed were there.So now I want to know what to do. I've spent a lot of my time on this project, so I don't want to just get up and leave, but I'm finding it hard to work with this new developer.  On the flip side, he is now the #1 committer on the project, with even more commits than the lead developer. I'm not really sure what to do about this. Has anybody else experienced this problem? If so, what did you do?UPDATE 1: I have disabled everyone's commit access and I am requesting people go through pull requests. I also proposed several measures to fix the other issues. Everyone else hasn't shown any support for it. The troublesome dev has simply said that people who don't follow the "commit action" closely can think that the project is disorganized when it really isn't. I obviously don't agree with this, so I am seriously contemplating resigning from the project.UPDATE 2: The lead developer began ranting about the fact that one of my commits supposedly deleted three newlines in the code (the revert commit showed up just after I posted the discussion, and doesn't even reference my "commit"), and then the two of them began discussing whether to revoke my commit access. So, I have done the logical thing and left the project. Thanks for your help with this everyone!| You can quit.Not the most constructive thing to do, but sometimes it's the only option. If you do, don't sit around and moan about how you had to give it up, take that energy and put it straight into something else - 'move on' in other words.You can fork it.There's no reason why you have to work with anyone. Fork, improve the code and let the others continue to have a little ego-fest of their own. Your new project will simply compete with the old and its up to you whether you make a success of it, or the old one beats you in terms of users and features.You can engagewith the rest of the development team on the project to voice your concerns. Don't make it personal, but make out that you're unhappy with code churn, or lack of established quality processes, or unhappy that the new decisions are just pushed out without agreement from everyone. You'll either be told that nothing's wrong enough to change, or you'll get a few others agreeing with you that the team needs to fix things up. That might end up with the disruptive guy losing his commit access. Maybe you'll all agree that some of the changes are not improvements and the project needs to be reverted. (This latter option is the most likely outcome, unless it turns into a massive argument of entrenched opinions.)It can be difficult when someone comes along and changes the safe and comfy routines you've become used to, but it could be said that having someone come along and shake up the old, cozy practices are good things in themselves.
https://softwareengineering.stackexchange.com/questions/321672| Acceptance Criteria for Edge Cases| I am a product owner on an agile team. I when doing PO acceptance testing I usually make note to try some edge cases. Its not uncommon for me to discover something and then I pass it back to the the devs. I am getting push back from one of the developers when I reject his stories. He says its unfair since I don't specify the edge cases and how the program should respond in the acceptance criteria, as he tends to code for only what I describe in the story. I've encouraged him to ask me as he bumps into any edge cases while coding, but he thinks its not his job to think through the edge cases, its mine and I should make new stories for the next sprint.In my defense I don't know his design for the story until after he implements it, so its hard to iterate through all the possibilities (will config be in a DB or properties file?). For simplicity's sake, lets say we have a story to add division to a calculator app. In the ideal SCRUM world, would it be incumbent on me to add a "handle divide by zero scenario" to the acceptance criteria or should he be working through those cases as he develops so the app doesn't implode on 5/0? To be clear, in this case I wouldn't accept if the app crashed hard on 5/0, but I would pass if it logs, prints DIV0, or any other way to handle the error... just so long as it doesn't crash.| I think the answer is you both should be thinking about your own set of edge cases. He as the dev should handle edge cases that are data specific such as does the app crash from any given user input, 5 / 0 certainly falls into this part of the spectrum. The dev should ask about you what you think would be an appropriate error message when the input given as part of the user's interaction leads to something invalid.Your portion of the spectrum is the business side of things. How should the calculator behave if the user's account is not allowed to use the divide button? How should it behave when the account is allowed to use the Mod operation but doesn't have access to the division feature?The important message I think that you need to convey, and have acceptance from all team members for, is that you are all on the same team. If the product is not complete the product isnot completeand the team is to blame, not any given member.
